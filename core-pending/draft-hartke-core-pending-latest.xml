<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "reference.RFC.2119.xml">
  <!ENTITY RFC7231 SYSTEM "reference.RFC.7231.xml">
  <!ENTITY RFC7252 SYSTEM "reference.RFC.7252.xml">
  <!ENTITY RFC7641 SYSTEM "reference.RFC.7641.xml">
  <!ENTITY I-D.vanderstok-ace-coap-est SYSTEM "reference.I-D.vanderstok-ace-coap-est.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>

<rfc category="info" docName="draft-hartke-core-pending-01" ipr="trust200902">

  <front>

    <title abbrev="The 'Pending' Response Code for CoAP">
      The 'Pending' Response Code for the Constrained Application Protocol (CoAP)
    </title>

    <author initials="P." surname="van der Stok" fullname="Peter van der Stok">
      <organization>consultant</organization>
      <address>
        <phone>+31-492474673 (Netherlands), +33-966015248 (France)</phone>
        <email>consultancy@vanderstok.org</email>
        <uri>www.vanderstok.org</uri>
      </address>
    </author>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63905</phone>
        <email>hartke@tzi.org</email>
      </address>
    </author>

    <date />

    <workgroup>CoRE Working Group</workgroup>

    <abstract>

      <t>
        This document proposes a new CoAP response code, 2.__ Pending. A CoAP
        server can use this response code to signal that it has accepted the
        request but has not yet started processing it or that processing the
        request will take longer than a client is typically willing to wait for
        a response. A 2.__ response can include status information and indicate
        a location where the result will become available.
      </t>

    </abstract>

    <note title="Note">

      <t>
        The string "2.__" is a placeholder for the CoAP response code that will
        be assigned by IANA on completion of this document.
      </t>

    </note>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Introduction">

      <t>
        The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> is
        a request/response protocol not unlike HTTP. CoAP defines no upper bound
        for the time between a request and the resulting response. For example,
        a CoAP-over-UDP server is expected to return an empty Acknowledgement to
        the client if it cannot provide a response right away, but there is no
        limit on the time when the server should return the Separate Response.
      </t>

      <t>
        In particular in the case of requests with long processing times, a CoAP
        client faces the problem that it cannot easily determine how long it
        should wait for the response and whether the CoAP server is actually
        still processing the request. Long processing times occur, for example,
        when requests need manual intervention to authorize their processing, or
        when they perform a long sequence of remote actions. An example for this
        is the "possibly long" authorization request specified in <xref
        target="I-D.vanderstok-ace-coap-est">EST-coaps</xref>.
      </t>

      <t>
        This document proposes a new CoAP response code, 2.__ Pending. The
        semantics of this response code are modelled after the <xref
        target="RFC7231">HTTP</xref> 202 (Accepted) status code:
        <list>
          <t>
            The 202 (Accepted) status code indicates that the request has been
            accepted for processing, but the processing has not been completed.
            The request might or might not eventually be acted upon, as it might
            be disallowed when processing actually takes place. [...] The
            representation sent with this response ought to describe the
            request's current status and point to (or embed) a status monitor
            that can provide the user with an estimate of when the request will
            be fulfilled.
          </t>
        </list>
      </t>

      <t>
        The 2.__ (Pending) response code adapts this status to CoAP. The 2.__
        (Pending) response code is not meant for overload cases, which are
        better handled by the 5.03 (Service Unavailable) response code.
      </t>

      <section title="Terminology">

        <t>
          Readers are expected to be familiar with the terms and concepts
          described in <xref target="RFC7252"/> and <xref target="RFC7641"/>.
        </t>

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          <xref target="RFC2119"/>.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="2.__ Pending">

      <t>
        A 2.__ (Pending) response in reply to a GET request indicates that the
        target resource exists but a representation of the resource is not
        available yet. The Max-Age Option indicates after what time a client
        should retry its GET request to retrieve the representation. The client
        MAY observe the resource as defined in <xref target="RFC7641"/> to be
        notified when the representation becomes available (see <xref
        target="observing"/>).
      </t>

      <t>
        A 2.__ (Pending) response in reply to a POST request indicates that the
        result of processing the request is not available yet, for example,
        because the server needs more time to process the request than a client
        is typically willing to wait for a response. The server MAY specify a
        location using the Location-* options where the result will become
        available. If the server does not specify a location, the result will
        become available at the target resource of the POST request. To receive
        the result, the client MAY poll or observe the resource at the specified
        location using the GET request method. The Max-Age Option indicates how
        long the client should wait before making the GET request.
      </t>

      <t>
        A 2.__ (Pending) response MAY contain a payload that represents the
        progress of processing the original request or any other status
        information. The content format of this representation is specified by
        the Content-Format Option.
      </t>

      <t>
        A 2.__ (Pending) response is cacheable, but cannot be validated. If it
        contains Location-* options, it invalidates any cached response for the
        resource at the specified location; otherwise, it invalidates any cached
        response for the target resource of the request.
      </t>

      <t>
        As a consequence of being cacheable, a 2.__ (Pending) response in reply
        to a POST request makes the POST method temporarily idempotent: until
        Max-Age expires, any POST request with the same cache-key -- be it from
        the same client or any another client -- can yield the same 2.__
        (Pending) response. (This is the same behavior as for 4.xx and 5.xx
        error responses in reply to POST requests.)
      </t>

      <section title="Observing Resources" anchor="observing">

        <t>
          When a client registers to observe a resource <xref target="RFC7641"/>
          for which no representation is available yet, the server MAY send one
          or more 2.__ (Pending) notifications before sending the first 2.05
          (Content) or 2.03 (Valid) notification. The possible resulting
          sequence of notifications is shown in <xref target="figure-1"/>.
        </t>

        <figure anchor="figure-1" title="Sequence of Notifications">
<artwork align="center"><![CDATA[
      __________       __________       __________
     |          |     |          |     |          |
---->|   2.__   |---->|  2.05 /  |---->|  4.xx /  |
     | Pending  |     |   2.03   |     |   5.xx   |
     |__________|     |__________|     |__________|
        ^   \ \          ^    \           ^
         \__/  \          \___/          /
                \_______________________/
]]></artwork>
        </figure>

        <t>
          Unless the server is unwilling to add the client to the list of
          observers, each 2.__ (Pending) notification MUST include an Observe
          Option with a sequence number as specified in <xref
          target="RFC7641"/>. Otherwise, the registration request falls back to
          a normal GET request.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Security Considerations">

      <t>
        This section analyses the possible threats related to 2.__ (Pending)
        responses. It is meant to inform protocol and application developers
        about the security limitations of the response code as described in this
        document.
      </t>

      <t>
        A 2.__ (Pending) response is subject to the same general security
        considerations as all CoAP responses as described in Section 11 of <xref
        target="RFC7252"/>. Specifically, the security considerations for the
        response code are closest to those of the Observe Option as stated in
        Section 7 of <xref target="RFC7641"/>, because the server stores
        additional state over an extended period.
      </t>

      <t>
        2.__ (Pending) responses are secured following the recommendations for
        the existing CoAP response codes as specified in Section 9 of <xref
        target="RFC7252"/>. When additional security techniques are standardized
        for CoAP (e.g., based on object security), these are then also available
        for securing the responses.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="IANA Considerations">

      <t>
        This document adds the 2.__ (Pending) response code to the "CoAP
        Response Codes" registry.
      </t>

      <texttable title="New CoAP Response Codes" anchor="response-codes">
        <ttcol align="right">Code</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">Reference</ttcol>

        <c>2.__</c>
        <c>Pending</c>
        <c>[RFCXXXX]</c>
      </texttable>

      <t>
        [[IANA: Please assign a code point in the range 2.06-2.30.]] [[RFC
        Editor: Please replace every occurrence of "2.__" in this document with
        the assigned code point and remove this paragraph before publication.]]
      </t>

    </section>

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">

      &RFC2119;
      &RFC7252;
      &RFC7641;

    </references>

    <references title="Informative References">

      &RFC7231;
      &I-D.vanderstok-ace-coap-est;

    </references>


    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
