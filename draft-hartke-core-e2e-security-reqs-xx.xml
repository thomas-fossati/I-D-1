<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "reference.RFC.2119.xml">
  <!ENTITY RFC4949 SYSTEM "reference.RFC.4949.xml">
  <!ENTITY RFC6347 SYSTEM "reference.RFC.6347.xml">
  <!ENTITY RFC7228 SYSTEM "reference.RFC.7228.xml">
  <!ENTITY RFC7252 SYSTEM "reference.RFC.7252.xml">
  <!ENTITY RFC7258 SYSTEM "reference.RFC.7258.xml">
  <!ENTITY RFC7641 SYSTEM "reference.RFC.7641.xml">
  <!ENTITY I-D.ietf-cose-msg SYSTEM "reference.I-D.ietf-cose-msg.xml">
  <!ENTITY I-D.mattsson-core-coap-actuators SYSTEM "reference.I-D.mattsson-core-coap-actuators.xml">
  <!ENTITY I-D.koster-core-coap-pubsub SYSTEM "reference.I-D.koster-core-coap-pubsub.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>

<rfc category="info" docName="draft-hartke-core-e2e-security-reqs-01" ipr="trust200902">
    
    <front>

    <title>Requirements for CoAP End-To-End Security</title>

    <author initials="G." surname="Selander" fullname="Goeran Selander">
      <organization>Ericsson AB</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code>SE-164 80 Stockholm</code>
          <country>Sweden</country>
        </postal>
        <email>goran.selander@ericsson.com</email>
      </address>
    </author>
    
    <author initials="F." surname="Palombini" fullname="Francesca Palombini">
      <organization>Ericsson AB</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code>SE-164 80 Stockholm</code>
          <country>Sweden</country>
        </postal>
        <email>francesca.palombini@ericsson.com</email>
      </address>
    </author>
   
    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63905</phone>
        <email>hartke@tzi.org</email>
      </address>
    </author>
    
    <!--
    <author initials="L." surname="Seitz" fullname="Ludwig Seitz">
      <organization>SICS Swedish ICT AB</organization>
      <address>
        <postal>
          <street>Scheelevaegen 17</street>
          <city>Lund</city>
          <code>223 70</code>
          <country>Sweden</country>
        </postal>
        <email>ludwig@sics.se</email>
      </address>
    </author>
    -->
    
    <date />


    <area>Applications</area>

    <workgroup>CoRE Working Group</workgroup>

    <abstract>

      <t>
        This document analyses threats to CoAP message 
        exchanges traversing proxies and derives the security requirements
        for mitigating those threats.
      </t>

    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Introduction">

      <t>
        The <xref target="RFC7252">Constrained Application Protocol
        (CoAP)</xref> is a Web application protocol designed for
        <xref target="RFC7228">constrained nodes and networks</xref>.
      </t>

      <t>
        CoAP uses <xref target="RFC6347">Datagram Transport Layer
        Security (DTLS)</xref> for security.  At the same time, CoAP
        relies on proxies for scalability and
        efficiency.  These proxies are specified to perform a
        number of operations on CoAP messages which requires
        DTLS to be terminated at the proxy.  The proxy therefore
        not only has access to the data required for performing the
        desired proxy functionality, but is also able to eavesdrop on
        or manipulate any part of the CoAP payload and metadata in
        transit between client and server or inject new CoAP messages
        without being protected or
        detected by DTLS.
      </t>

      <t>
        One way to mitigate this threat is to secure CoAP communication
        at the application layer using an object-based security
        mechanism such as <xref target="I-D.ietf-cose-msg">CBOR
        Encoded Message Syntax</xref> instead of or in addition to
        the security mechanisms at the network layer or transport
        layer. Such a mechanism can provide "end-to-end security" at
        the application layer in contrast to the "hop-by-hop security"
        provided by DTLS.
      </t>

      <t>
        This document analyses security requirements for CoAP requests and
        responses of sensor and actuator deployments involving proxies and
        other similar intermediaries.  The analysis is based on identifying
        the assets associated to sensor- and actuator-based communication
        patterns and considering the potential threats executed through
        proxies to these assets.  The threat analysis provides the basis for
        defining the security requirements that an end-to-end security
        mechanism for CoAP needs to meet.
      </t>

      <section title="Terminology">

        <!--
        <t>
          This document makes use of the terminology defined in
          <xref target="RFC4949"/>.
        </t>
        -->

        <t>
          Readers are expected to be familiar with the terms and
          concepts described in <xref target="RFC7252"/> and
          <xref target="RFC7641"/>.
        </t>

        <!--
        <t>
          Additionally, the following terms are used in this document:
          <list style="hanging">
            <t hangText="...:">...</t>
          </list>
        </t>
        -->

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
          NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
          RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to
          be interpreted as described in <xref target="RFC2119"/>.
          The key word "NOT REQUIRED" is interpreted as synonymous with
          the key word "OPTIONAL".
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Scope and Assumptions">
    
    <t>
      This document analyzes security aspects of various kinds of intermediary
      nodes involved in sensor and actuator communications over CoAP.
      The intermediaries are responsible, for example, for reducing response time and
      network bandwidth use by serving responses from a cache or for enabling
      the client to make requests that it otherwise could not make.
    </t>
    
    <t>
      In general, there are the following types of assets that
      need to be protected:
      <list style="format A%d:" counter="my_count">
        <t>
          The devices at the two ends, the data generated and stored in
          these devices, and their (often very
          constrained) system resources such as available memory, storage,
          processing capacity, and energy.
        </t>
        <t>
          The physical environment of the devices fitted with sensors
          and actuators.  Access to the physical environment is
          provided through CoAP resources that allow a remote entity
          to retrieve information about the physical environment
          (such as the current temperature) or to produce an effect
          on the physical environment (such as the activation of a
          heater).
        </t>
        <t>
          The communication infrastructure linking the two devices
          (which often contains some very constrained parts) and the data
          stored in the message processing devices.
        </t>
      </list>
    </t>
    
    <t>
      The purpose of this document is to analyze threats executed through
      intermediary nodes. An intermediary may directly affect assets of
      type A3, e.g. by dropping messages. An intermediary node may also
      manipulate the messages exchanged between the endpoints and thereby
      have an impact also on the assets A1 and A2, for example: flooding a
      device with messages has impact on its
      system resources, and successful manipulation of an actuator command,
      carried in a message, has an impact on the physical environment.
    </t>
    
    <t>
      An intermediate node handling unprotected messages may be an attractive
      target for an attack, since such nodes are aggregation points for message flows
      (see <xref target="sec-cons"/>) and, furthermore, may be an easier target from the
      Internet than the sensors/actuators residing behind them.  An intermediary
      may become subject to intrusion or infected by malware and perform
      the attacks of a man-in-the-middle; the attack vectors for
      compromise are out of scope for this document.
    </t>
    
    <t>
      The scope of the analysis is
      restricted to threats from intermediaries to single client to server
      interactions.  Threats resulting from collusion between multiple
      intermediaries are also out of scope (see <xref target="sec-cons"/>).
    </t>
    
    <t>
      To assess what impact various threats have to the assets, we need to specify
      and analyse how the intermediary nodes operate.
    </t>
    
    </section>
    
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Proxying" anchor="proxying">

      <figure anchor="fig-hopbyhop" title="Hop-by-Hop Security">
        <artwork align="left">
<![CDATA[     __________       _________       _________       __________
    |          |     |         |     |         |     |          |
    |          |---->|         |---->|         |---->|          |
    |  Client  |     |  Proxy  |     |  Proxy  |     |  Server  |
    |          |<----|         |<----|         |<----|          |
    |__________|     |_________|     |_________|     |__________|
          :             :   :           :   :             :
          '-------------'   '-----------'   '-------------'
             Security         Security         Security
            Association      Association      Association
                 A                B                C]]>
        </artwork>
      </figure>

      <t>
        <vspace blankLines="3"/>
      </t>

      <figure anchor="fig-endtoend" title="End-to-End Security">
        <artwork align="left">
<![CDATA[     __________       _________       _________       __________
    |          |     |         |     |         |     |          |
    |          |---->|         |---->|         |---->|          |
    |  Client  |     |  Proxy  |     |  Proxy  |     |  Server  |
    |          |<----|         |<----|         |<----|          |
    |__________|     |_________|     |_________|     |__________|
          :                                               :
          '-----------------------------------------------'
                        Security Association]]>
        </artwork>
      </figure>

      <t>
        <vspace blankLines="100"/>
      </t>

      <!-- **************************************************************** -->

      <section title="Threats and Security Requirements">

        <section title="Client">

          <figure anchor="fig-client" title="The Client End">
            <artwork align="left">
<![CDATA[     __________             __ _ _
    |          | Request   |
    |          |---------->|
    |  Client  |           |   Proxy
    |          |<----------|
    |__________|  Response |__ _ _]]>
            </artwork>
          </figure>

          <t>
            The client sends a request to the proxy and waits for a
            response.
          </t>
          <t>
            From the perspective of the client, there are three possible
            flows:
            <list style="symbols">
              <t>
                The client receives a response.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    The proxy duly processed the request and returns a
                    response based on data it obtained from the origin
                    server.
                  </t>
                  <t>
                    The proxy encountered an unexpected condition and
                    returns an error response according to specification
                    (e.g., 5.02 Bad Gateway or 5.04 Gateway Timeout).
                  </t>
                  <t>
                    (Threat 1:) The proxy spoofs a response.
                  </t>
                </list>
              </t>
              <t>
                The client does not receive a response.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    The client times out too early.
                  </t>
                  <t>
                    (Threat 2:) The proxy withholds the response.
                  </t>
                </list>
              </t>
              <t>
                The client receives too many responses.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    (Threat 3:) The proxy floods the client with
                    responses.
                  </t>
                </list>
              </t>
            </list>
            This is repeated as often as needed when the client
            observes a resource.
          </t>

          <t>
            <vspace blankLines="100"/>
          </t>

          <section title="Threat 1: Spoofing">
            <t>
              With one exception (see below), this threat is REQUIRED
              to be mitigated by the security solution: the client MUST
              verify that the response is an
              <spanx>authentic response</spanx> before processing it.
            </t>
            <t>
              The definition of an "authentic response"
              depends on the scenario
              (<xref target="proxy-scenarios"/>),
              but usually means that the client can obtain proof for
              some or all of the following things:
              <list style="symbols">
                <t>that the requested action was executed by the origin server;</t>
                <t>that the data originates from the origin server and has not been altered on the way;</t>
                <t>that the data matches the specifications of the request (such as the target resource);</t>
                <t>that the data is fresh (when the data is cacheable);</t>
                <t>that the data is in sequence (when observing a resource).</t>
              </list>
              The proof can, for example, involve a message
              authentication code that the proxy obtains from the origin
              server and includes in the response or an additional
              challenge-response roundtrip.
            </t>
            <t>
              Note that a CoAP proxy is specified to return an error
              response (such as 5.02 Bad Gateway or 5.04 Gateway
              Timeout) when it encounters an error condition. Since the
              condition occurs at the proxy and not at the origin
              server, the response will not be an "authentic response"
              according to the above definition. Thus a client cannot
              tell if the proxy sends the response according to
              specification or if it spoofs the response.
              This threat is NOT REQUIRED to be mitigated by the
              security solution.
            </t>
          </section>

          <section title="Threat 2: Withholding">
            <t>
              This threat is NOT REQUIRED to be mitigated by the
              security solution.
            </t>
          </section>

          <section title="Threat 3: Flooding">
            <t>
              A CoAP client is specified to reject any response that
              it does not expect. This can happen before the client
              verifies if the response is authentic.
              Therefore a flood of responses is primarily a threat to
              the system resources of the client, in particular to its
              energy.
              This threat is NOT REQUIRED to be mitigated by the
              security solution in particular, but a client SHOULD
              generally defend against flooding attacks.
            </t>
            <t>
              <vspace blankLines="100"/>
            </t>
          </section>

        </section>

        <section title="Server">

          <figure anchor="fig-server" title="The Server End">
            <artwork align="left">
<![CDATA[                                 _ _ __             __________
                                       | Request   |          |
                                       |---------->|          |
                               Proxy   |           |  Server  |
                                       |<----------|          |
                                 _ _ __|  Response |__________|]]>
            </artwork>
          </figure>

          <t>
            A server listens for a request and returns a response.
          </t>
          <t>
            From the perspective of the server, there are three possible
            flows:
            <list style="symbols">
              <t>
                The server receives a request.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    The proxy sends a request according to
                    specification.
                  </t>
                  <t>
                    (Threat 4:) The proxy spoofs a request.
                  </t>
                </list>
              </t>
              <t>
                The server does not receive a request.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    The proxy does not need to send a request.
                  </t>
                  <t>
                    (Threat 5:) The proxy withholds a request.
                  </t>
                </list>
              </t>
              <t>
                The server receives too many requests.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    (Threat 6:) The proxy floods the server with
                    requests.
                  </t>
                </list>
              </t>
            </list>
          </t>

          <t>
            <vspace blankLines="100"/>
          </t>

          <section title="Threat 4: Spoofing">
            <t>
              This threat is REQUIRED to be mitigated by the security
              solution: the server MUST verify that the request is an
              <spanx>authentic request</spanx> before processing it.
            </t>
            <t>
              The definition of an "authentic request"
              depends on the scenario
              (<xref target="proxy-scenarios"/>),
              but usually means that the server can obtain proof for
              some or all of the following things:
              <list style="symbols">
                <t>that the proxy acts on behalf of a client;</t>
                <t>that the data originates from the client and has not been altered on the way;</t>
                <t>that the request has not been received so far;</t>
                <t>that the data has been generated by the client not too long ago.</t>
              </list>
              The proof can, for example, involve a message
              authentication code that the proxy obtains from the
              client and includes in the request or a
              challenge-response roundtrip.
            </t>
          </section>

          <section title="Threat 5: Withholding">
            <t>
              This threat is NOT REQUIRED to be mitigated by the
              security solution because a CoAP server cannot detect if
              the proxy does not send a request because it has no work
              to do or if it withholds a request.
            </t>
          </section>

          <section title="Threat 6: Flooding">
            <t>
              This threat is NOT REQUIRED to be mitigated by the
              security solution in particular, but a server SHOULD
              generally defend against flooding attacks.
            </t>
            <t>
              <vspace blankLines="100"/>
            </t>
          </section>

        </section>

        <section title="Proxy">

          <figure anchor="fig-proxy" title="A Proxy">
            <artwork align="left">
<![CDATA[         _ _ __             ___________             __ _ _
               | Request   |           | Request   |
       Client  |---------->|           |---------->|  Server
         or    |           |   Proxy   |           |    or
       Proxy   |<----------|           |<----------|  Proxy
         _ _ __|  Response |___________|  Response |__ _ _]]>
            </artwork>
          </figure>

          <t>
            The proxy receives a request from the client and sends a
            response back to the client. There are two ways for the
            proxy to do this:
            <list style="symbols">
              <t>
                The proxy constructs and sends a request to the server,
                receives a response from the server and uses the
                received data to construct the response to the client.
              </t>
              <t>
                The proxy uses cached data to construct the response to
                the client.
              </t>
            </list>
            In both cases, the proxy needs to read some parts of the
            request from the client and the response from the server
            to accomplish its task.
          </t>

          <t>
            There are the following threats:
            <list style="symbols">
              <t>(Threat 7:) The proxy reads the data in the request from the client and in the response from the server.</t>
              <t>(Threat 8:) The proxy measures the frequency and distribution of incoming requests and outgoing responses.</t>
              <t>(Threat 9:) The proxy stores data from an attacker in its cache (cache poisoning).</t>
            </list>
          </t>

          <t>
            <vspace blankLines="100"/>
          </t>

          <section title="Threat 7: Reading">
            <t>
              This threat is REQUIRED to be mitigated by the security
              solution: clients and servers MUST protect the data in
              the requests and responses they're sending with
              Authenticated Encryption.
            </t>
            <t>
              Note that this requirement is in conflict with the
              requirement that the proxy needs to be able to read some
              parts of the requests and responses in order to accomplish
              its task. Which parts can be encrypted and/or
              integrity-protected depends on the scenario
              (<xref target="proxy-scenarios"/>).
            </t>
            <!-- TODO: forward secrecy -->
          </section>

          <section title="Threat 8: Measuring">
            <t>
              This threat is NOT REQUIRED to be mitigated by the
              security solution.
            </t>
          </section>

          <section title="Threat 9: Poisoning">
            <t>
              TODO.
            </t>
            <t>
              <vspace blankLines="100"/>
            </t>
          </section>

        </section>

      </section>

      <!-- **************************************************************** -->

      <section title="Scenarios" anchor="proxy-scenarios">

        <t>
          <list style="symbols">
            <t>processing rules</t>
            <t>definition of "authentic request" and "authentic response"</t>
            <t>encrypted and integrity-protected parts of a message</t>
          </list>
        </t>

        <section title="One Request - One Response"></section>
        <section title="One Request - Multiple Responses"></section>
        <section title="Multiple Requests - One Response"></section>
        <section title="Multiple Requests - Multiple Responses"></section>

        <section title="Summary">

          <figure>
            <artwork>
<![CDATA[ +-------------- One Request - One Response
 |   +---------- One Request - Multiple Responses
 |   |   +------ Multiple Requests - One Response
 |   |   |   +-- Multiple Requests - Multiple Responses
 |   |   |   |
 V   V   V   V]]>
            </artwork>
          </figure>
          <t>
            <list style="hanging" hangIndent="17">
              <t>--- Server ---</t>
              <t hangText="(x) (x) ( ) ( )">The server must authenticate a message coming from a requesting client. (R1.1)</t>
              <t hangText="(x) (x) ( ) ( )">The server must verify that it has not received this request previously. (R1.2)</t>
              <t>--- Client ---</t>
              <t hangText="(x) (x) (x) (x)">The client must verify that the received response originates from the requested server. (R1.3) The client must be able to verify that a received resource representation originates from the requested server. (R3.1)</t>
              <t hangText="(x) ( ) ( ) ( )">The client must verify that a response corresponds uniquely to a previous request that the client has made. (R1.4)</t>
              <t hangText="( ) (x) ( ) ( )">The client must verify that a response corresponds to a previous request that the client has made. (R2.1)</t>
              <t hangText="( ) (x) ( ) ( )">The client must verify that it has not received this response previously and whether responses for the same request are received in the wrong order. (R2.2)</t>
              <t hangText="( ) ( ) (x) (x)">The client must be able to verify that a received representation is a representation of the resource requested by the client. (R3.2)</t>
              <t hangText="( ) ( ) (x) (x)">The client must be able to verify the content format of the representation. (R3.3)</t>
              <t hangText="( ) ( ) (x) (x)">The client must be able to detect that a received representation is fresh. (R3.4)</t>
              <t>--- Encrypted and Integrity Protected Parts ---</t>
              <t hangText="(x) (x) (x) (x)">The payload must be integrity protected and encrypted between client and server. (R1.5) The representation must be integrity protected and encrypted from the server to the client. (R3.5)</t>
              <t hangText="(x) (x) ( ) ( )">The CoAP options except Uri-* and Proxy-* must be integrity protected in the request.  The effective request URI must be integrity protected in the request. (R1.6)</t>
              <t hangText="(x) (x) ( ) ( )">All CoAP options in the response must be integrity protected. Max-Age must be set to 0. (R1.7)</t>
              <t hangText="(x) (x) ( ) ( )">The CoAP options Uri-Host/Port and Proxy-Uri/Scheme of the request must not be encrypted.  The Max-Age option of the response must not be encrypted.  All other options must be encrypted. (R1.8)</t>
              <t hangText="(x) (x) ( ) ( )">The CoAP header fields Version and Code must be integrity protected in requests and responses.  All other header fields must not be integrity protected. The header fields must not be encrypted. (R1.9)</t>
              <t>--- Miscellaneous ---</t>
              <t hangText="(x) (x) (x) (x)">The communication protocol must provide forward secrecy. (R1.10) (R3.7)</t>
              <t hangText="( ) ( ) (x) (x)">To protect against the proxy colluding with an authorized client, asymmetric cryptography must be used. (R3.6)</t>
            </list>
          </t>
          <t>
            <vspace blankLines="100"/>
          </t>
          
        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Publish-Subscribe">

      <t>
        Applying <xref target="proxying"/> to Publish-Subscribe results
        in <xref target="fig-pubsub-endtoend"/>.
      </t>

      <figure anchor="fig-pubsub-endtoend" title="End-to-End Security">
        <artwork align="left">
<![CDATA[     ___________      _      __________      _      ____________
    |           |    | |    |          |    | |    |            |
    |           |--->| |--->|          |<---| |<---|            |
    | Publisher |    | |    |  Broker  |    | |    | Subscriber |
    |           |<---| |<---|          |--->| |--->|            |
    |___________|    |_|    |__________|    |_|    |____________|
          :         Proxy       :  :       Proxy         :
          :                     :  :                     :
          '---------------------'  '---------------------'
                  Security               Security
                 Association            Association
                      A                      B]]>
        </artwork>
      </figure>

      <t>
        This section is about <xref target="fig-pubsub-ptos"/>.
      </t>

      <figure anchor="fig-pubsub-ptos" title="Publisher-to-Subscriber Security">
        <artwork align="left">
<![CDATA[     ___________      _      __________      _      ____________
    |           |    | |    |          |    | |    |            |
    |           |--->| |--->|          |<---| |<---|            |
    | Publisher |    | |    |  Broker  |    | |    | Subscriber |
    |           |<---| |<---|          |--->| |--->|            |
    |___________|    |_|    |__________|    |_|    |____________|
          :         Proxy                  Proxy         :
          :                                              :
          '----------------------------------------------'
                        Security Association]]>
        </artwork>
      </figure>

      <t>
        (But note that a key aspect of pub-sub is that the subscribers
        do not know the publishers and the publishers do not know the
        subscribers. They only have to know the broker. In
        <xref target="fig-pubsub-ptos"/> all subscribers have to know
        all publishers. That doesn't scale.)
      </t>

      <t>
        <vspace blankLines="100"/>
      </t>

      <!-- **************************************************************** -->

      <section title="Threats and Security Requirements">

        <section title="Publisher">

          <figure anchor="fig-publisher" title="The Publisher End">
            <artwork align="left">
<![CDATA[     ___________             __ _ _
    |           | Request   |
    |           |---------->|
    | Publisher |           |  Broker
    |           |<----------|
    |___________|  Response |__ _ _]]>
            </artwork>
          </figure>

          <t>
            The publisher sends a request to the broker (possibly
            via one or more proxies) and receives a response.
          </t>
          <t>
            From the perspective of the publisher, are there any
            requirements on the response?
          </t>
          <t>
            <vspace blankLines="100"/>
          </t>

        </section>

        <section title="Subscriber">

          <figure anchor="fig-subscriber" title="The Subscriber End">
            <artwork align="left">
<![CDATA[                                 _ _ __             ____________
                                       |   Request |            |
                                       |<----------|            |
                               Broker  |           | Subscriber |
                                       |---------->|            |
                                 _ _ __| Response  |____________|]]>
            </artwork>
          </figure>

          <t>
            The subscriber sends a request to the broker (possibly
            via one or more proxies) and waits for a response.
          </t>
          <t>
            From the perspective of the subscriber, there are three
            possible flows:
            <list style="symbols">
              <t>
                The subscriber receives a response.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    The broker duly processed the request and returns
                    a response based on data it obtained from a
                    publisher.
                  </t>
                  <t>
                    The subscriber made a bad request and the broker
                    returns an error response accordingly (e.g., 4.04
                    Not Found).
                  </t>
                  <t>
                    The broker encountered an unexpected condition and
                    returns an error response accordingly (e.g., 5.03
                    Service Unavailable).
                  </t>
                  <t>
                    (Threat 1:) The broker spoofs a response.
                  </t>
                </list>
              </t>
              <t>
                The subscriber does not receive a response.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    The subscriber times out too early.
                  </t>
                  <t>
                    (Threat 2:) The broker withholds the response.
                  </t>
                </list>
              </t>
              <t>
                The subscriber receives too many responses.
                <vspace/>Reasons include:
                <list style="symbols">
                  <t>
                    (Threat 3:) The proxy floods the subscriber with
                    responses.
                  </t>
                </list>
              </t>
            </list>
            This is repeated as often as needed when the subscriber
            observes a topic.
          </t>

          <!--<t>
            <vspace blankLines="100"/>
          </t>-->

          <section title="Threat 1: Spoofing">
            <t>
              With one exception (see below), this threat is REQUIRED
              to be mitigated by the security solution: the subscriber
              MUST verify that the response is an
              <spanx>authentic response</spanx> before processing it.
            </t>
            <t>
              The definition of an "authentic response"
              depends on the scenario
              (<xref target="pubsub-scenarios"/>),
              but usually means that the subscriber can obtain proof
              for some or all of the following things:
              <list style="symbols">
                <t>that the data matches the specifications of the request (such as the topic);</t>
                <t>that the data originates from a publisher that is authorized to publish to the topic;</t>
                <t>that the data has not been altered on the way between publisher and subscriber;</t>
                <t>that the data is fresh (when the data is cacheable);</t>
                <t>that the data is in sequence (when observing a topic).</t>
              </list>
              The proof can, for example, involve a message
              authentication code that the proxy obtains from the origin
              server and includes in the response or an additional
              challenge-response roundtrip.
            </t>
            <t>
              Note that a CoAP server like the broker is specified to
              return an error response (such as 4.04 Not Found or 5.03
              Service Unavailable) when it encounters an error
              condition. Since the condition occurs at the broker and
              not at the publisher, the response will not be an
              "authentic response" according to the above definition.
              Thus a subscriber cannot tell if the broker sends the
              error response according to specification or if it spoofs
              the response. This threat is NOT REQUIRED to be mitigated
              by the security solution.
            </t>
          </section>

          <section title="Threat 2: Withholding">
            <t>
              This threat is NOT REQUIRED to be mitigated by the
              security solution.
            </t>
          </section>

          <section title="Threat 3: Flooding">
            <t>
              A CoAP client like the subscriber is specified to reject
              any response that it does not expect. This can happen
              before the client verifies if the response is authentic.
              Therefore a flood of responses is primarily a threat to
              the system resources of the client, in particular to its
              energy.
              This threat is NOT REQUIRED to be mitigated by the
              security solution in particular, but a subscriber SHOULD
              generally defend against flooding attacks.
            </t>
            <t>
              <vspace blankLines="100"/>
            </t>
          </section>

        </section>

        <section title="Broker">

          <figure anchor="fig-brokerend" title="A Broker">
            <artwork align="left">
<![CDATA[          _ _ __             __________             __ _ _
                | Request   |          |   Request |
                |---------->|          |<----------|
      Publisher |           |  Broker  |           | Subscriber
                |<----------|          |---------->|
          _ _ __|  Response |__________| Response  |__ _ _]]>
            </artwork>
          </figure>

          <t>
            The broker receives a request from a publisher or a
            subscriber (possibly via one or more proxies).
            <list style="symbols">
              <t>
                If the request comes from a publisher, the broker
                stores the data, notifies any subscribers and returns
                a response to the publisher.
              </t>
              <t>
                If the request comes from a subscriber, the broker
                uses the previously stored data to construct a
                response and returns the response to the client.
              </t>
            </list>
            In both cases, the broker needs to read some parts of the
            requests to accomplish its task.
          </t>
          <t>
            There are the following threats:
            <list style="symbols">
              <t>(Threat 4:) The broker reads the data in the request from the publisher or the subscriber.</t>
              <t>(Threat 5:) The broker measures the frequency and distribution of incoming requests.</t>
              <t>(Threat 6:) The broker stores and notifies subscribers of data from an unauthorized publisher.</t>
            </list>
          </t>

          <t>
            <vspace blankLines="100"/>
          </t>

          <section title="Threat 4: Reading">
            <t>
              This threat is REQUIRED to be mitigated by the security
              solution: publishers MUST protect the data in the requests
              they're sending with Authenticated Encryption.
            </t>
            <t>
              Note that this requirement is in conflict with the
              requirement that the broker needs to be able to read some
              parts of the requests in order to accomplish its task.
              Which parts can be encrypted and/or
              integrity-protected depends on the scenario
              (<xref target="pubsub-scenarios"/>).
            </t>
          </section>

          <section title="Threat 5: Measuring">
            <t>
              This threat is NOT REQUIRED to be mitigated by the
              security solution.
            </t>
          </section>

          <section title="Threat 6: Poisoning">
            <t>
              TODO.
            </t>
            <t>
              <vspace blankLines="100"/>
            </t>
          </section>

        </section>

      </section>

      <!-- **************************************************************** -->

      <section title="Scenarios" anchor="pubsub-scenarios">

        <section title="Multiple Requests - Multiple Responses"><t><vspace blankLines="100"/></t></section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="sec-cons" title="Security Considerations">

      <t>
        A proxy or intermediary may be an aggregation point for message flows.
        Therefore it is an attractive target, both from a security and privacy
        point of view.
      </t>
      
      <t>
        Unless the security mechanisms provide forward secrecy, a
        compromise of long term keying material means that an attacker can 
        decrypt all previously sent information and can be directly used for
        any kind of manipulation of the cyber-physical system.
      </t>
      
      <t>
        Therefore the key exchange mechanism used for establish keys to use with
        application layer security must provide forward secrecy.
      </t>
      
      <t>
        Intermediary nodes are aggregation points also for metadata and
        therefore valuable targets for signal intelligence agencies.
        Pervasive monitoring is an attack <xref target="RFC7258"/> and the 
        effect of collecting and correlating information from multitude of 
        proxies must be mitigated.
      </t>
      
      <t>
        Related to this, it is needed to delete all historical information
        from all nodes handling the plaintext data and metadata, in order
        to avoid information leakage.  The impact of this on the intermediary
        nodes can be limited by confidentiality protecting as much as
        possible between the endpoints.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    

    <section title="IANA Considerations">

      <t>
        This document includes no request to IANA.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">

      &RFC2119;

      &RFC7252;
      
      &RFC7258;
      
      &RFC7641;

    </references>

    <references title="Informative References">

      &RFC6347;

      &RFC7228;
      
      &I-D.ietf-cose-msg;
      
      &I-D.mattsson-core-coap-actuators;
      
      &I-D.koster-core-coap-pubsub;

    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Acknowledgments" numbered="no">

      <!-- sorted by last name -->
      <t>
        Thanks to
        Ari Keranen,
        John Mattsson,
        Jim Schaad, and
        Ludwig Seitz
        for helpful comments and discussions that have shaped the
        document.
      </t>

    </section>
   
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
