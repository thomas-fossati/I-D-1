<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY SELF "[RFCXXXX]">
]>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>

<rfc ipr="trust200902" docName="draft-hartke-t2trg-coral-00" category="exp">

  <front>
    <title abbrev="CoRAL">The Constrained RESTful Application Language (CoRAL)</title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Universität Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63905</phone>
        <email>hartke@tzi.org</email>
      </address>
    </author>

    <date year="2016" month="March" day="13"/>

    
    <workgroup>Thing-to-Thing Research Group</workgroup>
    

    <abstract>


<t>The Constrained RESTful Application Language (CoRAL) is a compact,
   binary representation format for hypermedia-driven applications.  It
   supports links, forms and the embedding of resource representations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Constrained RESTful Environments (CoRE) realize the Web architecture
   <xref target="W3C.REC-webarch-20041215"/> in a suitable form for constrained nodes and networks
   <xref target="RFC7228"/>.</t>

<t>In the Web, hypertext documents contain links and forms that allow a
   user to navigate between resources and submit data to a server for
   processing.  By annotating these elements with machine-readable link
   relation types <xref target="RFC5988"/> and form relation types, it is possible to
   extend this interaction model to machine-to-machine communication.</t>

<t>This document describes the Constrained RESTful Application Language
   (CoRAL), a serialization format for Web links and forms that is based
   on the Concise Binary Object Representation (CBOR) <xref target="RFC7049"/>.
   The format also supports the embedding of representations of
   resources.  Thus, CoRAL can be used as a building block for RESTful,
   hypermedia-driven applications.</t>

<section anchor="terminology" title="Terminology">

<t>Readers are expected to be familiar with the terms and concepts
   described in <xref target="RFC5988"/> and <xref target="I-D.hartke-core-apps"/>.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="overview" title="Overview">

<section anchor="links" title="Links">

<t>A Web link <xref target="RFC5988"/> is a typed connection between two Web resources.
   It is comprised of a context, a link relation type, a link target URI
   and, optionally, a set of target attributes.  The link relation type
   identifies the semantics of a link and thus enables an automated
   agent to understand the nature of the relation.</t>

<t>The CoRAL representation of a resource contains a set of links where
   the context of each link is the represented resource.  A link in a
   CoRAL representation serializes the link relation type, the URI of
   the link target and the target attributes, if any.</t>

<t>In the Web, link relation types are identified by strings, such as
   “stylesheet”, “terms-of-service” or “item”.  In order to minimize the
   overhead of using these relation types in constrained environments,
   <xref target="I-D.hartke-core-apps"/> extends the link relation types registry with
   a numeric identifier for each link relation type.  CoRAL uses this
   numeric identifier instead of the link relation type name.</t>

<t>The link target URI and the target attributes are encoded as options
   in a simple format based on the option structure in CoAP <xref target="RFC7252"/> and
   CBOR encoding <xref target="RFC7049"/>.
   For example, the Web link (in <xref target="RFC5988"/> syntax)</t>

<figure><artwork><![CDATA[
   <coap://example.com/info/tos>;rel=terms-of-service;type=text/plain
]]></artwork></figure>

<t>is serialized in CoRAL as follows:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /abs_link/          0,
     /terms-of-service/ 64,
     [ /format/          3, 0 /text//plain/,
       /href.scheme/     4, "coap",
       /href.host.name/  6, "example.com",
       /href.port/      11, 5683,
       /href.path/      12, "info",
       /href.path/      12, "tos" ]]
]]></artwork></figure>

<t>Multiple links are simply serialized one after another:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /rel_link/     4,
     /first/       23,
     [ /format/     3, 0 /text//plain/,
       /href.path/ 12, "page1" ]]
   [ /rel_link/     4,
     /previous/    49,
     [ /format/     3, 0 /text//plain/,
       /href.path/ 12, "page6" ]]
   [ /rel_link/     4,
     /next/        38,
     [ /format/     3, 0 /text//plain/,
       /href.path/ 12, "page8" ]]
   [ /rel_link/     4,
     /last/        31,
     [ /format/     3, 0 /text//plain/,
       /href.path/ 12, "page42" ]]
]]></artwork></figure>

<t>The Format Option, when present, is a hint indicating what the CoAP
   content format of the result of dereferencing the link should be.  If
   more than one format is available, the Format Option can be repeated:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /rel_link/     4,
     /item/        30,
     [ /format/     3, 47 /application//exi/,
       /format/     3, 50 /application//json/,
       /format/     3, 60 /application//cbor/,
       /href.path/ 12, "item1" ]]
]]></artwork></figure>

</section>
<section anchor="embedding" title="Embedding">

<t>If a representation links to many resources, it may be inefficient to
   retrieve a representation of each link target individually.  For this
   reason, CoRAL supports the embedding of a representation of the link
   target in the link itself:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /rel_link/     4,
     /item/        30,
     [ /format/     3, 50 /application//json/,
       /href.path/ 12, "item1" ],
     <<<
       {
         "task":     "Return the books to the library",
         "assignee": "Alice"
       }
     >>> ]
]]></artwork></figure>

<t>By embedding representations, it is possible to use CoRAL as a (very
   basic) substitute for RDF <xref target="W3C.REC-rdf11-concepts-20140225"/>.  For example,
   the RDF graph (in Turtle <xref target="W3C.REC-turtle-20140225"/> syntax)</t>

<figure><artwork><![CDATA[
   @prefix foaf: <http://xmlns.com/foaf/0.1/> .

   <> foaf:name     "John Doe" ;
      foaf:age      32 ;
      foaf:homepage <coap://www.doe.example/> .
]]></artwork></figure>

<t>could be serialized in CoRAL as follows:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /anon_link/          12,
     /name/             -100,
     [ /format/            3, 0 /text//plain/ ],
     <<<
       John Doe
     >>> ]
   [ /anon_link/          12,
     /age/              -101,
     [ /format/            3, 9 /uint8/ ],
     <<<
       32
     >>> ]
   [ /abs_link/            0,
     /homepage/         -102,
     [ /href.scheme/       4, "coap",
       /href.host.name/    6, "www.doe.example" ]]
]]></artwork></figure>

<t>A flag in the serialized link indicates that the targets of the first
   two links are anonymous resources that don’t have their own URI,
   like literals in RDF.</t>

</section>
<section anchor="namespaces" title="Namespaces">

<t>The link relation type in a serialized link may be from the
   “global” or the “local” namespace.  The global namespace is
   indicated by an unsigned number and is made up of the link relation
   types registered with IANA.  The local namespace is indicated by a
   negative number and is defined by the media type of the CoRAL
   representation.</t>

<t>By default, CoRAL representations have the “application/coral” media
   type where the local namespace is empty.  However, it is possible to
   create new media types based on CoRAL and to register these with the
   “+coral” suffix.  In this case, the media type specification can fill
   the local namespace with application-specific link relation types.</t>

<t>For example, a media type “application/example.shop+coral” could
   define the following set of local link relation types:</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Meaning</ttcol>
      <c>80</c>
      <c>http://example.com/rels/order</c>
      <c>81</c>
      <c>http://example.com/rels/basket</c>
      <c>82</c>
      <c>http://example.com/rels/customer</c>
</texttable>

<t>Similarly, a media type “application/example.foaf+coral” could define
   the following mapping from local link relation type IDs to the FOAF
   RDF model <xref target="FOAF"/>:</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Meaning</ttcol>
      <c>100</c>
      <c>http://xmlns.com/foaf/0.1/name</c>
      <c>101</c>
      <c>http://xmlns.com/foaf/0.1/age</c>
      <c>102</c>
      <c>http://xmlns.com/foaf/0.1/homepage</c>
</texttable>

</section>
<section anchor="forms" title="Forms">

<t>In addition to Web links, CoRAL also supports forms.  A form is an
   affordance that an agent can use to perform an operation on the form
   context, such as updating a resource or creating a new item in a
   collection.</t>

<t>In a form, the link relation type is replaced by the form relation
   type which indicates the semantics of the form.  The Href.* Options
   encode the URI of the target resource to which the agent should
   submit the form.  A form additionally encodes the submission method
   (POST, PUT, PATCH, DELETE) and the description of a representation
   that the service accepts as part of form submission:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /rel_form/    68,
     /create-item/  1,
     [ /method/     1, 2  /POST/,
       /accept/     2, 60 /application//cbor/,
       /href.path/ 12, "items" ]]
]]></artwork></figure>

<t>The Accept Option specifies the content format of the accepted
   representation.  A content format may use the payload of a form to
   describe the accepted representation in more detail, for example, by
   specifying a set of form fields that the agent needs to fill out:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /rel_form/    68,
     /create-item/  1,
     [ /method/     1, 2     /POST/,
       /accept/     2, 65535 /example//form/,
       /href.path/ 12, "items" ],
     <<<
       name, age, homepage
     >>> ]
]]></artwork></figure>

</section>
<section anchor="editing" title="Editing">

<t>The target resource of a link may be editable.  In this case, the
   representation of such a resource typically contains a form that
   allows to edit the resource.  However, it may be inefficient to
   include this form in every representation of the target resource and
   more efficient to include it in a representation that links to the
   resource.  CoRAL supports this by two flags in the link structure.</t>

<t>Setting the Updateable Flag in a link defines a form that can be used
   to update the target resource.  The context and target resource of
   that form is the target resource of the link, the submission method
   is PUT and the content format of the submitted representation is
   defined by the Format Option of the link.  For example, given the
   following CoRAL representation an agent can change the recipient by
   making a PUT request to &lt;./to&gt; with the new value in text/plain
   format:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /updateable_rel_link/    6,
     /sender/              -120,
     [ /format/               3, 0 /text//plain/,
       /href.path/           12, "from" ],
     <<<
       Juliet
     >>> ]
   [ /updateable_rel_link/    6,
     /recipient/           -121,
     [ /format/               3, 0 /text//plain/,
       /href.path/           12, "to" ],
     <<<
       Romeo
     >>> ]
   [ /updateable_rel_link/    6,
     /message/             -122,
     [ /format/               3, 0 /text//plain/,
       /href.path/           12, "message" ],
     <<<
       Art thou not Romeo, and a Montague?
     >>> ]
]]></artwork></figure>

<t>Setting the Deleteable Flag in a link likewise defines a form that
   can be used to delete the target resource.  The submission method is
   DELETE and no representation is included in the request.</t>

</section>
</section>
<section anchor="data-format" title="Data Format">

<t>A CoRAL representation consists of a sequence of zero or more links
   and/or forms, each encoded in CBOR <xref target="RFC7049"/> and concatenated as
   a byte string.  Before encoding, both links and forms are arrays
   with either three of four elements: an unsigned integer carrying
   flags, an integer for the link or form relation type, an array that
   contains zero or more options (as pairs of option numbers and
   option values, ordered by option number), and optionally a payload.</t>

<t>Using the notation of <xref target="I-D.greevenbosch-appsawg-cbor-cddl"/>, this can be expressed as:</t>

<figure><artwork type="cddl"><![CDATA[
   link_or_form = [flags, relation, options, ? payload]
   flags = uint .bits flagbits
   relation = int          ; negative for local
   options = [* (optionname, optionvalue)]
   optionname = uint
   optionvalue = uint / text / bytes
   payload = bytes
   flagbits = &(
     deleteable: 0,
     updateable: 1,
     hreftype1: 2,
     hreftype2: 3,
     is_link: 6,
   )
]]></artwork></figure>

<figure title="Flags" anchor="fig-flags"><artwork align="center"><![CDATA[
+-+-+-+-+-+-+-+-+
|_|T|_|_| H |U|D|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>The flags unsigned integer contains the following fields:</t>

<t><list style="hanging">
  <t hangText='Type (T):'>
  A 1-bit unsigned integer.  Indicates whether the structure
is a link (0) or a form (1).</t>
  <t hangText='Href Type (H):'>
  A 2-bit unsigned integer.  Indicates whether the link
target is specified as an absolute URI (0), as a relative URI (1)
or as the default URI (2), or whether the target is an anonymous
resource (3).</t>
  <t hangText='Updateable (U):'>
  A 1-bit unsigned integer.  Indicates whether the
link target can be updated (1) or not (0).</t>
  <t hangText='Deleteable (D):'>
  A 1-bit unsigned integer.  Indicates whether the
link target can be deleted (1) or not (0).</t>
</list></t>

<t>The relation type is an integer that indicates the link or form
      relation type.  Negative integers are used for local relation
      types, unsigned ones for global relation types.</t>

<t>The options are an array that contains a sequence of pairs of a
      CoRAL option number and an option value, where the option
      numbers are in ascending order.</t>

<t>The payload is an optional element of the array.</t>

<section anchor="option-format" title="Option Format">

<t>CoRAL defines a number of options that can be included in links and
   forms.  Options are used to encode the target resource URI and the
   target attributes.  An option instance in a link or form maps
   the option number of a defined CoRAL option to the option value.</t>

</section>
</section>
<section anchor="options" title="Options">

<t>The CoRAL options defined in this document are summarized in <xref target="tbl-options"/>
   below and explained in the following subsections:</t>

<texttable title="Options" anchor="tbl-options">
      <ttcol align='right'>No.</ttcol>
      <ttcol align='left'>R</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Format</ttcol>
      <ttcol align='left'>Length</ttcol>
      <ttcol align='left'>Default</ttcol>
      <c>0</c>
      <c>&#160;</c>
      <c>Id</c>
      <c>string</c>
      <c>1-255</c>
      <c>(none)</c>
      <c>1</c>
      <c>&#160;</c>
      <c>Method</c>
      <c>uint</c>
      <c>1</c>
      <c>2 (POST)</c>
      <c>2</c>
      <c>x</c>
      <c>Accept</c>
      <c>uint</c>
      <c>0-2</c>
      <c>(none)</c>
      <c>3</c>
      <c>x</c>
      <c>Format</c>
      <c>uint</c>
      <c>0-2</c>
      <c>(none)</c>
      <c>4</c>
      <c>&#160;</c>
      <c>Href.Scheme</c>
      <c>string</c>
      <c>1-255</c>
      <c>(none)</c>
      <c>6</c>
      <c>&#160;</c>
      <c>Href.Host.Name</c>
      <c>string</c>
      <c>1-255</c>
      <c>(none)</c>
      <c>7</c>
      <c>&#160;</c>
      <c>Href.Host.IPv4</c>
      <c>opaque</c>
      <c>4</c>
      <c>(none)</c>
      <c>8</c>
      <c>&#160;</c>
      <c>Href.Host.IPv6</c>
      <c>opaque</c>
      <c>16</c>
      <c>(none)</c>
      <c>11</c>
      <c>&#160;</c>
      <c>Href.Port</c>
      <c>uint</c>
      <c>0-2</c>
      <c>(see below)</c>
      <c>12</c>
      <c>x</c>
      <c>Href.Path</c>
      <c>string</c>
      <c>0-255</c>
      <c>(none)</c>
      <c>13</c>
      <c>x</c>
      <c>Href.Query</c>
      <c>string</c>
      <c>0-255</c>
      <c>(none)</c>
      <c>14</c>
      <c>&#160;</c>
      <c>Href.Fragment</c>
      <c>string</c>
      <c>0-255</c>
      <c>(empty)</c>
      <c>15</c>
      <c>&#160;</c>
      <c>Other-Href</c>
      <c>string</c>
      <c>1-1034</c>
      <c>(none)</c>
      <c>20</c>
      <c>&#160;</c>
      <c>Title</c>
      <c>string</c>
      <c>0-255</c>
      <c>(none)</c>
</texttable>

<t>The option properties are defined as follows:</t>

<t><list style="hanging">
  <t hangText='Number:'>
  An option is identified by an option number.</t>
  <t hangText='Repeatable (R):'>
  An option that is repeatable MAY be included one or more
 times in a link or form. An option that is not repeatable
 MUST NOT be included more than once. If an agent encounters
 an option with more occurrences than the option is defined
 for, each supernumerary option occurrence MUST be ignored.</t>
  <t hangText='Format:'>
  Option values are defined to have a certain format.
 Similar to the types defined in Section 3.2 of RFC 7252, “string”
 stands for a text string; “opaque” for a byte string, and “uint”
 for an unsigned integer.</t>
  <t hangText='Length:'>
  Option values are defined to have a specific length, often in the
 form of an upper and lower
 bound.  For unsigned integer options the length is counted as the
 number of bytes that would be needed to represent the unsigned
 integer as a binary number.  The length of an option value MUST NOT be outside the
 defined range.  If an agent encounters an option with a length
 outside the defined range, that option MUST be ignored.</t>
  <t hangText='Default Value:'>
  Options may be defined to have a default value.  If
the value of an option is intended to be this default value, the
option SHOULD NOT be included in the link or form.  If the option
is not present, the default value MUST be assumed.</t>
</list></t>

<section anchor="accept" title="Accept">

<t>The Accept Option indicates the acceptable content formats for the
   representation included in a form submission.  Each option value is
   one of the content format IDs defined in the CoAP Content-Formats
   registry.  If the Accept Option is absent, the service accepts any
   content format.</t>

</section>
<section anchor="format" title="Format">

<t>The Format Option, when present in a link or a form, is a hint
   indicating what the content format of the payload of the CoAP
   response should be when following the link or submitting the form.
   Note that this is only a hint; it does not override the Content-
   Format Option included in the CoAP response.</t>

<t>As an exception to this rule, the Format Option is REQUIRED if a link
   embeds a representation.  The option then indicates the CoAP content
   format of the embedded representation.</t>

<t>Each option value is one of the content format IDs defined in the CoAP
   Content-Formats registry.</t>

</section>
<section anchor="href" title="Href.*">

<t>The Href.Scheme, Href.Host.Name, Href.Host.IPv4, Href.IPv6,
   Href.Port, Href.Path, Href.Query and Href.Fragment Options are used
   to specify the target resource URI in a link or form.  They hold the
   following values:</t>

<t><list style="symbols">
  <t>the Href.Scheme Option specifies the URI scheme name,</t>
  <t>the Href.Host.Name Option specifies the host as a registered name
<xref target="RFC3986"/>,</t>
  <t>the Href.Host.IPv4 Option specifies the host as a 32-bit IPv4
address,</t>
  <t>the Href.Host.IPv6 Option specifies the host as a 128-bit IPv6
address,</t>
  <t>the Href.Port Option specifies the port number,</t>
  <t>each Href.Path Option specifies one segment of the path,</t>
  <t>each Href.Query Option specifies one argument of the query string,
and</t>
  <t>the Href.Fragment Option specifies the fragment identifier.</t>
</list></t>

<t>The Href.Host.Name, Href.Host.IPv4 and Href.Host.IPv6 options are
   mutually exclusive.</t>

<t>The default value of the Href.Port Option is the default port for the
   URI scheme.</t>

<t>The following table lists the permitted Href.* options
by Href Type. A ‘yes’ indicates that an option of this
type MAY be present; a ‘no’ indicates that an option
of this type MUST NOT be present. The resolution of Href.*
options against a base URI is specified in
<xref target="resolution"/>.</t>

<texttable title="Permitted Href.* Options by Href Type" anchor="table-href">
      <ttcol align='left'>&#160;</ttcol>
      <ttcol align='center'>Absolute</ttcol>
      <ttcol align='center'>Relative</ttcol>
      <ttcol align='center'>Default</ttcol>
      <ttcol align='center'>Anonymous</ttcol>
      <c>Href.Scheme</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
      <c>no</c>
      <c>Href.Host.Name</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
      <c>no</c>
      <c>Href.Host.IPv4</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
      <c>no</c>
      <c>Href.Host.IPv6</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
      <c>no</c>
      <c>Href.Port</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
      <c>no</c>
      <c>Href.Path</c>
      <c>yes</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
      <c>Href.Query</c>
      <c>yes</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
      <c>Href.Fragment</c>
      <c>yes</c>
      <c>yes</c>
      <c>no</c>
      <c>no</c>
</texttable>

</section>
<section anchor="id" title="Id">

<t>The Id Option specifies an unique identifier for the link or form
   that can be used as a fragment identifier for this link or form in
   the CoRAL representation.
   The option value must be unique amongst all the IDs in the
   representation.  The value must contain at least one character and
   must not contain any space characters.</t>

</section>
<section anchor="method" title="Method">

<t>The Method Option indicates the CoAP method to use for form
   submission.  The option value is one of the CoAP method codes defined
   in the CoAP Method Codes registry.</t>

</section>
<section anchor="other-href" title="Other-Href">

<t>In case the target resource URI cannot be expressed with the Href.*
   Options, the URI can be specified using the Other-Href Option.</t>

<t>The option value is a string that matches the syntax of the URI-
   reference production defined in <xref target="RFC3986"/>.  The Other-Href Option
   MUST take precedence over any of the Href.* Options, each of which
   MUST NOT be included in a link or form containing the Other-Href
   Option.</t>

</section>
<section anchor="title" title="Title">

<t>The Title Option, when present, is used to label the target of a link
   such that it can be used as a human-readable identifier (e.g., a menu
   entry).</t>

</section>
</section>
<section anchor="resolution" title="Reference Resolution">

<t>This section defines the process of resolving the sequence of
Href.* options in a link or a form to an absolute URI suitable
for inclusion in a CoAP request. The URI reference is resolved
against a base URI that is determined as specified in Section
5.1 of RFC 3986. The base URI is assumed to be pre-parsed into
a sequence of Href.* options; the result is returned as a
sequence of Href.* options as well.</t>

<t>The following pseudocode describes an algorithm for
transforming a URI reference R into its target URI T, using
the Href Type H, the Link or Form Relation Type S and the
base URI B.</t>

<figure><artwork><![CDATA[
   if (H == 3) then
      T = [ ]
   elif (H == 2) then
      T = [ (k, v) | (k, v) <- B, k <= Href.Path ] ++
          [ (Href.Path, S) ]
   elif (R starts with Href.Scheme) then
      T = R
   elif (R starts with Href.Host.*) then
      T = [ (k, v) | (k, v) <- B, k == Href.Scheme ] ++
          [ (k, v) | (k, v) <- R, k >  Href.Scheme ]
   elif (R starts with Href.Port) then
      T = [ (k, v) | (k, v) <- B, k <  Href.Port ] ++
          [ (k, v) | (k, v) <- R, k >= Href.Port ]
   elif (H == 1) then
      T = [ (k, v) | (k, v) <- B, k <= Href.Path ] ++
          [ (k, v) | (k, v) <- R, k >= Href.Path ]
   else
      T = [ (k, v) | (k, v) <- B, k <  Href.Path ] ++
          [ (k, v) | (k, v) <- R, k >= Href.Path ]
   endif
]]></artwork></figure>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>TODO.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="coral-option-number-registry" title="CoRAL Option Number Registry">

<t>This document establishes the CoRAL Option Number registry for the
   option numbers used in CoRAL.  The registry is located within the
   CoRE Parameters registry.</t>

<section anchor="registering-new-option-numbers" title="Registering New Option Numbers">

<t>Option numbers are registered on the advice of a Designated Expert
   (appointed by the IESG or their delegate), with a Specification
   Required (using terminology from <xref target="RFC5226"/>).</t>

<t>Registration requests consist of the completed registration template
   below, typically published in an RFC.  However, to allow for the
   allocation of values prior to publication, the Designated Expert may
   approve registration once they are satisfied that a specification
   will be published.</t>

<t>The registration template is:</t>

<t><list style="symbols">
  <t>Option Number:</t>
  <t>Option Name:</t>
  <t>Reference:</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The CoRAL Option Number registry’s initial contents are:</t>

<t><list style="symbols">
  <t>Option Number: 0<vspace />
Option Name: Id<vspace />
Reference: &SELF;</t>
  <t>Option Number: 1<vspace />
Option Name: Method<vspace />
Reference: &SELF;</t>
  <t>Option Number: 2<vspace />
Option Name: Accept<vspace />
Reference: &SELF;</t>
  <t>Option Number: 3<vspace />
Option Name: Format<vspace />
Reference: &SELF;</t>
  <t>Option Number: 4<vspace />
Option Name: Href.Scheme<vspace />
Reference: &SELF;</t>
  <t>Option Number: 6<vspace />
Option Name: Href.Host.Name<vspace />
Reference: &SELF;</t>
  <t>Option Number: 7<vspace />
Option Name: Href.Host.IPv4<vspace />
Reference: &SELF;</t>
  <t>Option Number: 8<vspace />
Option Name: Href.Host.IPv6<vspace />
Reference: &SELF;</t>
  <t>Option Number: 11<vspace />
Option Name: Href.Port<vspace />
Reference: &SELF;</t>
  <t>Option Number: 12<vspace />
Option Name: Href.Path<vspace />
Reference: &SELF;</t>
  <t>Option Number: 13<vspace />
Option Name: Href.Query<vspace />
Reference: &SELF;</t>
  <t>Option Number: 14<vspace />
Option Name: Href.Fragment<vspace />
Reference: &SELF;</t>
  <t>Option Number: 15<vspace />
Option Name: Other-Href<vspace />
Reference: &SELF;</t>
  <t>Option Number: 20<vspace />
Option Name: Title<vspace />
Reference: &SELF;</t>
</list></t>

</section>
</section>
<section anchor="media-type" title="Media Type">

<t>This document registers the media type “application/coral” in the
   “Media Types” registry.</t>

<t><list style="hanging">
  <t hangText='Type name:'><vspace blankLines='0'/>
  application</t>
  <t hangText='Subtype name:'><vspace blankLines='0'/>
  coral</t>
  <t hangText='Required parameters:'><vspace blankLines='0'/>
  N/A</t>
  <t hangText='Optional parameters:'><vspace blankLines='0'/>
  N/A</t>
  <t hangText='Encoding considerations:'><vspace blankLines='0'/>
  CoRAL is a binary encoding.</t>
  <t hangText='Security considerations:'><vspace blankLines='0'/>
  See <xref target="sec-cons"/> of &SELF;.</t>
  <t hangText='Interoperability considerations:'><vspace blankLines='0'/>
  There are no known interoperability issues.</t>
  <t hangText='Published specification:'><vspace blankLines='0'/>
  &SELF;</t>
  <t hangText='Applications that use this media type:'><vspace blankLines='0'/>
  N/A</t>
  <t hangText='Fragment identifier considerations:'><vspace blankLines='0'/>
  Fragment identifiers used with “application/coral”
representations
refer to the link or form with the indicated unique identifier.
See <xref target="id"/> of &SELF; for details.</t>
  <t hangText='Additional information:'><vspace blankLines='0'/>
  Deprecated alias names for this type: N/A
<vspace />Magic number(s): N/A
<vspace />File extension(s): N/A
<vspace />Macintosh file type code(s): N/A</t>
  <t hangText='Person &amp; email address to contact for further information:'><vspace blankLines='0'/>
  See “Author’s Address” section of &SELF;.</t>
  <t hangText='Intended usage:'><vspace blankLines='0'/>
  COMMON</t>
  <t hangText='Restrictions on usage:'><vspace blankLines='0'/>
  N/A</t>
  <t hangText='Author:'><vspace blankLines='0'/>
  See “Author’s Address” section of &SELF;.</t>
  <t hangText='Change controller:'><vspace blankLines='0'/>
  IESG</t>
</list></t>

</section>
<section anchor="structured-syntax-suffix" title="Structured Syntax Suffix">

<t>This document registers the suffix “+coral” in the “Structured Syntax
   Suffix” registry.</t>

<t><list style="hanging">
  <t hangText='Name:'><vspace blankLines='0'/>
  Constrained RESTful Application Language (CoRAL)</t>
  <t hangText='+suffix:'><vspace blankLines='0'/>
  +coral</t>
  <t hangText='References:'><vspace blankLines='0'/>
  &SELF;</t>
  <t hangText='Encoding considerations:'><vspace blankLines='0'/>
  CoRAL is a binary encoding.</t>
  <t hangText='Interoperability considerations:'><vspace blankLines='0'/>
  There are no known interoperability issues.</t>
  <t hangText='Fragment identifier considerations:'><vspace blankLines='0'/>
  The syntax and semantics of fragment identifiers specified for
+coral are as specified for “application/coral”.</t>
  <t hangText='Security considerations:'><vspace blankLines='0'/>
  See <xref target="sec-cons"/> of &SELF;.</t>
  <t hangText='Contact:'><vspace blankLines='0'/>
  See “Author’s Address” section of &SELF;.</t>
  <t hangText='Author/Change controller:'><vspace blankLines='0'/>
  IESG</t>
</list></t>

</section>
<section anchor="coap-content-format" title="CoAP Content-Format">

<t>This document registers a content format for the “application/coral”
   media type in the “CoAP Content-Formats” registry.</t>

<t><list style="symbols">
  <t>Media Type: application/coral<vspace />
Encoding: -<vspace />
ID: 70<vspace />
Reference: &SELF;</t>
</list></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='I-D.hartke-core-apps'>
<front>
<title>CoRE Application Descriptions</title>

<author initials='K' surname='Hartke' fullname='Klaus Hartke'>
    <organization />
</author>

<date month='February' day='12' year='2016' />

<abstract><t>The interfaces of RESTful, hypertext-driven applications consist of reusable components such as Internet media types and link relation types.  This document defines a simple standard that application designers can use to describe the interface of their application in a structured way so that other parties can develop interoperable clients and servers or reuse the components in their own applications.  Note to Readers  This Internet-Draft should be discussed on the Thing-to-Thing Research Group (T2TRG) mailing list &lt;t2trg@irtf.org>.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-hartke-core-apps-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-hartke-core-apps-03.txt' />
</reference>



<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor='RFC3986' target='http://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor='RFC5226' target='http://www.rfc-editor.org/info/rfc5226'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'><organization /></author>
<date year='2008' month='May' />
<abstract><t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t><t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t><t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='5226'/>
<seriesInfo name='DOI' value='10.17487/RFC5226'/>
</reference>



<reference  anchor='RFC5988' target='http://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor='RFC7049' target='http://www.rfc-editor.org/info/rfc7049'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='2013' month='October' />
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.  These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t></abstract>
</front>
<seriesInfo name='RFC' value='7049'/>
<seriesInfo name='DOI' value='10.17487/RFC7049'/>
</reference>



<reference  anchor='RFC7252' target='http://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'><organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'><organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='I-D.greevenbosch-appsawg-cbor-cddl'>
<front>
<title>CBOR data definition language (CDDL): a notational convention to express CBOR data structures</title>

<author initials='C' surname='Vigano' fullname='Christoph Vigano'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='October' day='18' year='2015' />

<abstract><t>This document proposes a notational convention to express CBOR data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-greevenbosch-appsawg-cbor-cddl-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-greevenbosch-appsawg-cbor-cddl-07.txt' />
</reference>



<reference anchor='I-D.hartke-core-lighting'>
<front>
<title>CoRE Lighting</title>

<author initials='K' surname='Hartke' fullname='Klaus Hartke'>
    <organization />
</author>

<date month='September' day='14' year='2015' />

<abstract><t>CoRE Lighting is an application-level protocol for discovering, configuring and controlling smart objects (or "things") in a simple lighting scenario.  The protocol is based on CoAP transfer of representations that are formatted according to media types defined in this document.  Note to Readers  This Internet-Draft is discussed on the Thing-to-Thing Research Group (T2TRG) mailing list &lt;t2trg@irtf.org>.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-hartke-core-lighting-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-hartke-core-lighting-00.txt' />
</reference>



<reference anchor='I-D.kelly-json-hal'>
<front>
<title>JSON Hypertext Application Language</title>

<author initials='M' surname='Kelly' fullname='Mike Kelly'>
    <organization />
</author>

<date month='July' day='22' year='2015' />

<abstract><t>This document proposes a media type for representing resources and their relations with hyperlinks.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-kelly-json-hal-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-kelly-json-hal-07.txt' />
</reference>



<reference  anchor='RFC7228' target='http://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='W3C.REC-rdf11-concepts-20140225'
           target='http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225'>
<front>
<title>RDF 1.1 Concepts and Abstract Syntax</title>

<author initials='R.' surname='Cyganiak' fullname='Richard Cyganiak'>
    <organization />
</author>

<author initials='D.' surname='Wood' fullname='David Wood'>
    <organization />
</author>

<author initials='M.' surname='Lanthaler' fullname='Markus Lanthaler'>
    <organization />
</author>

<date month='February' day='25' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-rdf11-concepts-20140225' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225' />
</reference>



<reference anchor='W3C.REC-turtle-20140225'
           target='http://www.w3.org/TR/2014/REC-turtle-20140225'>
<front>
<title>RDF 1.1 Turtle</title>

<author initials='E.' surname='Prud&amp;#039;hommeaux' fullname='Eric Prud&amp;#039;hommeaux'>
    <organization />
</author>

<author initials='G.' surname='Carothers' fullname='Gavin Carothers'>
    <organization />
</author>

<date month='February' day='25' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-turtle-20140225' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-turtle-20140225' />
</reference>



<reference anchor='W3C.REC-webarch-20041215'
           target='http://www.w3.org/TR/2004/REC-webarch-20041215'>
<front>
<title>Architecture of the World Wide Web, Volume One</title>

<author initials='I.' surname='Jacobs' fullname='Ian Jacobs'>
    <organization />
</author>

<author initials='N.' surname='Walsh' fullname='Norman Walsh'>
    <organization />
</author>

<date month='December' day='15' year='2004' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-webarch-20041215' />
<format type='HTML' target='http://www.w3.org/TR/2004/REC-webarch-20041215' />
</reference>


<reference anchor="FOAF" target="http://xmlns.com/foaf/spec/20140114.html">
  <front>
    <title>FOAF Vocabulary Specification 0.99</title>
    <author initials="D." surname="Brickley">
      <organization></organization>
    </author>
    <author initials="L." surname="Miller">
      <organization></organization>
    </author>
    <date year="2014" month="January"/>
  </front>
</reference>
<reference anchor="WOTPRAC" target="http://w3c.github.io/wot/current-practices/wot-practices.html">
  <front>
    <title>WoT Current Practices</title>
    <author initials="D." surname="Peintner">
      <organization></organization>
    </author>
    <author initials="M." surname="Kovatsch">
      <organization></organization>
    </author>
    <date year="2016" month="February"/>
  </front>
</reference>


    </references>


<section anchor="examples" title="Examples">

<section anchor="core-lighting" title="CoRE Lighting">

<t>CoRE Lighting <xref target="I-D.hartke-core-lighting"/> defines a benchmark scenario
   for the exploration of hypermedia-oriented design in constrained,
   RESTful environments.  The bulletin board example presented in
   Section 5.2.1 of <xref target="I-D.hartke-core-lighting"/> could be serialized in
   CoRAL as follows:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /rel_form/           68,
     /create-item/         1,
     [ /accept/            2, 65200,
       /href.path/        12, "bulletins" ]]
   [ /abs_link/            0,
     /item/               30,
     [ /format/            3, 65200,
       /href.host.name/    6, "light-bulb.example" ],
     <<<
       [ /rel_link/        4,
         /config/       -100,
         [ /format/        3, 65202,
           /href.path/    12, "config" ]],
       [ /anon_link/      12,
         /name/         -101,
         [ /format/        3, 0 /text//plain/ ],
         <<<
           Light 2
         >>> ],
       [ /anon_link/      12,
         /purpose/      -102,
         [ /format/        3, 0 /text//plain/ ],
         <<<
           Illuminates the couch.
         >>> ],
       [ /anon_link/      12,
         /location/     -103,
         [ /format/        3, 0 /text//plain/ ],
         <<<
           Living Room
         >>> ]
     >>> ]
   [ /abs_link/            0,
     /item/               30,
     [ /format/            3, 65200,
       /href.host.name/    6, "remote-control.example" ],
     <<<
       [ /rel_link/        4,
         /about/           1,
         [ /format/        3, 65203,
           /href.path/    12, "state" ]],
       [ /anon_link/      12,
         /name/         -101,
         [ /format/        3, 0 /text//plain/ ],
         <<<
           LRC 1
         >>> ],
       [ /anon_link/      12,
         /purpose/      -102,
         [ /format/        3, 0 /text//plain/ ],
         <<<
           Controls Light 2.
         >>> ],
       [ /anon_link/      12,
         /location/     -103,
         [ /format/        3, 0 /text//plain/ ],
         <<<
           Living Room
         >>> ]
     >>> ]
]]></artwork></figure>

</section>
<section anchor="w3c-wot-thing-description" title="W3C WoT Thing Description">

<t>The W3C Web of Things (WoT) Thing Description (TD) <xref target="WOTPRAC"/> provides
   a vocabulary for describing an a ‘thing’ based on metadata and
   interactions.  A thing description like</t>

<figure><artwork><![CDATA[
   {
      "@context": ".../w3c-wot-td-context.jsonld",
      "interactions": [
         {
            "@type": "Property",
            "name": "colorTemperature",
            "outputData": "xsd:unsignedShort",
            "writable": true
         }, {
            "@type": "Property",
            "name": "rgbValueRed",
            "outputData": "xsd:unsignedByte",
            "writable": false
         }, {
            "@type": "Property",
            "name": "rgbValueGreen",
            "outputData": "xsd:unsignedByte",
            "writable": false
         }, {
            "@type": "Property",
            "name": "rgbValueBlue",
            "outputData": "xsd:unsignedByte",
            "writable": false
         }
      ]
   }
]]></artwork></figure>

<t>could be serialized in CoRAL as follows:</t>

<figure><artwork type="cbor"><![CDATA[
   [ /updateable_def_link/   10,
     /colorTemperature/    -200,
     [ /format/               3, 10 /uint16/ ]]
   [ /def_link/               8,
     /rgbValueRed/         -201,
     [ /format/               3, 9 /uint8/ ]]
   [ /def_link/               8,
     /rgbValueGreen/       -202,
     [ /format/               3, 9 /uint8/ ]]
   [ /def_link/               8,
     /rgbValueBlue/        -203,
     [ /format/               3, 9 /uint8/ ]]
]]></artwork></figure>

<t>Each “Property” interaction in Thing Description is mapped to a link,
   the “name” attribute to a local link relation type, the “outputData”
   attribute to the Format Option, and the “writable” attribute to the
   Updateable Flag.</t>

<t>(This example assumes the definition of appropriate local link
   relations, a media type with content format ID 9 for
   xsd:unsignedByte and a media type with content format ID 10 for
   xsd:unsignedShort.)</t>

</section>
</section>
<section numbered="no" anchor="acknowledgements" title="Acknowledgements">

<t>This specification is heavily inspired by the JSON Hypertext
   Application Language (HAL) <xref target="I-D.kelly-json-hal"/>; the author of and
   contributors to that specification are acknowledged for their great
   work.</t>

<t>Yassin Nasir Hassan suggested placing the hypermedia controls for
   modifying a link target in the link context rather than in the
   representation of the link target.</t>

<t>Carsten Bormann contributed the CDDL grammar and CBOR examples.</t>

<!--  LocalWords:  CoRAL namespace
 -->

</section>


  </back>
</rfc>

