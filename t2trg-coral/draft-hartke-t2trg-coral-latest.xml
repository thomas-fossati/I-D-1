<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "reference.RFC.2119.xml">
  <!ENTITY RFC3629 SYSTEM "reference.RFC.3629.xml">
  <!ENTITY RFC3629 SYSTEM "reference.RFC.3629.xml">
  <!ENTITY RFC3986 SYSTEM "reference.RFC.3986.xml">
  <!ENTITY RFC3987 SYSTEM "reference.RFC.3987.xml">
  <!ENTITY RFC4648 SYSTEM "reference.RFC.4648.xml">
  <!ENTITY RFC5234 SYSTEM "reference.RFC.5234.xml">
  <!ENTITY RFC6690 SYSTEM "reference.RFC.6690.xml">
  <!ENTITY RFC7049 SYSTEM "reference.RFC.7049.xml">
  <!ENTITY RFC7228 SYSTEM "reference.RFC.7228.xml">
  <!ENTITY RFC7230 SYSTEM "reference.RFC.7230.xml">
  <!ENTITY RFC7231 SYSTEM "reference.RFC.7231.xml">
  <!ENTITY RFC7252 SYSTEM "reference.RFC.7252.xml">
  <!ENTITY RFC8174 SYSTEM "reference.RFC.8174.xml">
  <!ENTITY I-D.ietf-core-links-json SYSTEM "reference.I-D.ietf-core-links-json.xml">
  <!ENTITY I-D.kelly-json-hal SYSTEM "reference.I-D.kelly-json-hal.xml">
  <!ENTITY I-D.nottingham-rfc5988bis SYSTEM "reference.I-D.nottingham-rfc5988bis.xml">
  <!ENTITY W3C.REC-html51-20161101 SYSTEM "reference.W3C.REC-html51-20161101.xml">
  <!ENTITY W3C.REC-rdf11-concepts-20140225 SYSTEM "reference.W3C.REC-rdf11-concepts-20140225.xml">
  <!ENTITY W3C.REC-turtle-20140225 SYSTEM "reference.W3C.REC-turtle-20140225.xml">
  <!ENTITY W3C.REC-webarch-20041215 SYSTEM "reference.W3C.REC-webarch-20041215.xml">
  <!ENTITY W3C.REC-xml-20081126 SYSTEM "reference.W3C.REC-xml-20081126.xml">
  <!ENTITY W3C.REC-xml-names-20091208 SYSTEM "reference.W3C.REC-xml-names-20091208.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>

<rfc category="exp" docName="draft-hartke-t2trg-coral-03" ipr="trust200902">

  <front>

    <title abbrev="Constrained RESTful Application Language">
      The Constrained RESTful Application Language (CoRAL)
    </title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63905</phone>
        <email>hartke@tzi.org</email>
      </address>
    </author>

    <date />

    <workgroup>Thing-to-Thing Research Group</workgroup>

    <abstract>

      <t>
        The Constrained RESTful Application Language (CoRAL) defines a model and
        two serialization formats for describing typed connections between
        resources on the Web ("links") and possible operations on such resources
        ("forms") as well as simple resource metadata.
      </t>

    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Introduction" anchor="introduction">

      <t>
        The Constrained RESTful Application Language (CoRAL) is a language for
        the description of typed connections between resources on the Web
        ("links") and possible operations on such resources ("forms") as well as
        simple resource metadata. This document defines the CoRAL data and
        interaction model as well as two specialized serialization formats.
      </t>

      <t>
        CoRAL is intended for driving automated software agents that navigate a
        Web application based on a standardized vocabulary of link and form
        relation types. CoRAL can be used both with the <xref
        target="RFC7230">Hypertext Transfer Protocol (HTTP)</xref> and the <xref
        target="RFC7252">Constrained Application Protocol (CoAP)</xref>.
      </t>

      <t>
        The CoRAL data and interaction model is a superset of the Web linking
        model described in <xref target="I-D.nottingham-rfc5988bis">RFC
        5988</xref>. The data model consists of links, which describe the
        relationships between pairs of resources and the type of those
        relationships, and forms, which describe possible operations on
        resources and the type of those operations. Additionally, the model can
        describe simple resource metadata in a style similar to the <xref
        target="W3C.REC-rdf11-concepts-20140225">Resource Description Framework
        (RDF)</xref>. Unlike RDF, CoRAL does not only describe the relationships
        between resources but also defines an interaction model. The interaction
        model specifies how an automated software agent can navigate between
        resources by following links and perform operations on resources by
        submitting forms.
      </t>

      <t>
        The primary CoRAL serialization format is a compact, binary encoding of
        links and forms based on the <xref target="RFC7049">Concise Binary
        Object Representation (CBOR)</xref>. It shares many similarities with
        the message format of the <xref target="RFC7252">Constrained Application
        Protocol (CoAP)</xref> and is intended for <xref
        target="RFC7228">environments with constraints on power, memory, and
        processing resources</xref>. The format uses numeric identifiers instead
        of strings for link and form relation types and pre-parses URIs into
        (what CoAP considers to be) their components, which greatly simplifies
        URI processing. As a result, link serializations are often more compact
        than equivalent serializations in <xref target="RFC6690">CoRE Link
        Format</xref>, including <xref target="I-D.ietf-core-links-json">its
        CBOR variant</xref>, or the <xref target="I-D.kelly-json-hal">JSON
        Hypertext Application Language (HAL)</xref> that inspired CoRAL.
        Additionally, the format supports the serialization of forms, which
        those other formats do not support.
      </t>

      <t>
        The second serialization format is a light, textual encoding of links
        and forms that is intended to be easy to read and write by humans. The
        format is used for giving examples throughout the document and is
        stylistically similar to <xref
        target="W3C.REC-turtle-20140225">Turtle</xref>, although it is not a
        syntax for RDF.
      </t>

      <section title="Terminology">

        <t>
          Readers of this document are expected to be familiar with the terms
          and concepts described in <xref target="I-D.nottingham-rfc5988bis">RFC
          5988</xref>. Additional concepts are introduced in <xref
          target="overview"/>.
        </t>

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          <xref target="RFC2119">BCP 14</xref> <xref target="RFC8174"/> when,
          and only when, they appear in all capitals, as shown here.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Overview" anchor="overview">
    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Data and Interaction Model" anchor="model">

      <t>
        The Constrained RESTful Application Language (CoRAL) is designed for
        building <xref target="W3C.REC-webarch-20041215">Web-based
        applications</xref> in which automated software agents navigate between
        resources by following links and perform operations on resources by
        submitting forms.
      </t>

      <section title="Browsing Context">

        <t>
          Borrowing from <xref target="W3C.REC-html51-20161101">HTML 5</xref>,
          each agent maintains a <spanx>browsing context</spanx>, an environment
          in which the representations of resources on the Web are processed.
          (In HTML 5, the browsing context typically corresponds to a tab or
          window in a Web browser.)
        </t>

        <t>
          A browsing context has a <spanx>session history</spanx>, which lists
          the resource representations that the browsing context has processed,
          is processing, or will process. At any time, one representation in
          each browsing context is designated the <spanx>active</spanx>
          representation.
        </t>

      </section>

      <section title="Session History">

        <t>
          A session history consists of a flat list of session history entries.
          Each <spanx>session history entry</spanx> consists of an <xref
          target="RFC3987">Internationalized Resource Identifier (IRI)</xref>
          and a resource representation, and may in addition have other
          information associated with it. New entries are added to the session
          history as the agent navigates from resource to resource.
        </t>

        <t>
          At any point, one of the entries in the session history is the
          <spanx>current entry</spanx>. This is the entry representing the
          active document of the browsing context. 
        </t>

      </section>

      <section title="Documents">

        <t>
          A resource representation in one of the CoRAL serialization formats is
          called a CoRAL <spanx>document</spanx>. The IRI that was used to
          retrieve the representation is called the document's <spanx>retrieval
          context</spanx>.
        </t>

        <t>
          A CoRAL document consists of a list of zero or more links and forms,
          which are collectively called <spanx>elements</spanx>. Serialization
          formats may define additional types of elements for efficiency or
          convenience, such as a base IRI for relative IRI references.
        </t>

      </section>

      <section title="Links">

        <t>
          A <spanx>link</spanx> describes a relationship between two resources
          on the Web. It consists of a <spanx>link context</spanx>, a
          <spanx>link relation type</spanx>, and a <spanx>link target</spanx>. A
          link may additionally have a nested list of zero or more links and
          forms, which take the place of link target attributes.
        </t>

        <t>
          A link can be viewed as a statement of the form "<spanx>link
          context</spanx> has a <spanx>link relation type</spanx> resource at
          <spanx>link target</spanx>", where the link target may be further
          described by nested links and forms.
        </t>

        <t>
          The link relation type identifies the semantics of a link. In HTML 5
          and RFC 5988, link relation types are strings of characters, such as
          "stylesheet", "icon" or "item". In order to minimize the overhead in
          constrained environments, link relation types in CoRAL are unsigned
          integers.
        </t>

        <t>
          The link context and link target are both resources. Borrowing from
          RDF, resources can be denoted either by an IRI or a literal. Agents
          can use an IRI to navigate their browsing context to the referenced
          resource; this is called <spanx>dereferencing the IRI</spanx> or
          <spanx>following the link</spanx>. Not all IRIs are dereferencable,
          however. A dereferencable IRI may need to be converted to a URI (see
          RFC 3987, Section 3.1) for protocols (such as HTTP and CoAP) that do
          not support IRIs. Literals can be used to directly identify values,
          such as strings and numbers.
        </t>

        <t>
          A link can occur as a top-level element in a document or as a nested
          element within a link. When a link occurs as a top-level element in a
          document, the link context is the document's retrieval context. When a
          link occurs within a link, the link context of the inner link is the
          link target of the outer link.
        </t>

        <t>
          This specification does not place restrictions on the cardinality of
          links; there can be multiple links to and from a particular target,
          and multiple links of the same or different types between a given
          context and target. However, the CoRAL data model constrains the
          description of a web of resources to a tree structure; links between
          linked resources can only be described by nesting links. This is what
          makes CoRAL "constrained" compared to RFC 5988 and RDF.
        </t>

      </section>

      <section title="Forms">

        <t>
          A <spanx>form</spanx> provides instructions for performing an
          operation on a Web resource. It consists of a <spanx>form
          context</spanx>, a <spanx>form relation type</spanx>, a <spanx>request
          method</spanx>, and a <spanx>submission IRI</spanx>. A form may
          additionally be accompanied by <spanx>form data</spanx>.
        </t>

        <t>
          A form can be viewed as an instruction of the form "To perform a
          <spanx>form relation type</spanx> operation on <spanx>form
          context</spanx>, make a <spanx>request method</spanx> request to
          <spanx>submission IRI</spanx>", where the payload of the request may
          be further described by form data.
        </t>

        <t>
          The form relation type identifies the semantics of the operation. Form
          relation types in CoRAL are unsigned integers.
        </t>

        <t>
          The form context is the resource on which the operation is ultimately
          performed. To perform the operation, an agent must construct a request
          with the specified request method and submission IRI. The set of
          possible request methods is defined by the protocol identified by the
          scheme of the submission IRI. The submission IRI will refer to the
          form context in most cases, but it may refer to a different resource.
          The submission IRI may need to be converted to a URI (see RFC 3987,
          Section 3.1) for protocols that do not support IRIs. Constructing and
          sending the request is called _submitting the form_.
        </t>

        <t>
          If a form is accompanied by form data, the agent must construct and
          include a request payload that matches the specifications of the form
          data.
        </t>

        <t>
          A form can occur as a top-level element in a document or as a nested
          element within a link. When a form occurs as a top-level element in a
          document, the form context is the document's retrieval context. When a
          form occurs within a link, the form context is the link target of the
          enclosing link.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Textual Format" anchor="textual">

      <t>
        This section defines the syntax of the CoRAL textual format using two
        grammars: The lexical grammar defines how Unicode characters are
        combined to form line terminators, white space, comments, and tokens.
        The syntactic grammar defines how the tokens are combined to form
        documents. Both grammars are presented in <xref
        target="RFC5234">Augmented Backus-Naur Form (ABNF)</xref>.
      </t>

      <t>
        A document in the textual format is a Unicode string in a Unicode
        encoding form <xref target="UNICODE"/>. The media type for such
        documents is "text/coral". The "charset" parameter is not used; charset
        information is transported inside the document in the form of an
        optional Byte Order Mark (BOM). The use of the <xref
        target="RFC3629">UTF-8 encoding scheme</xref>, without a BOM, is
        RECOMMENDED.
      </t>

      <section title="Lexical Structure">

        <t>
          The lexical structure of a document in the textual format is made up
          of four basic elements: line terminators, white space, comments, and
          tokens. Of these, only tokens are significant in the syntactic
          grammar. There are four kinds of tokens: IRI references, literals,
          identifiers, and punctuators.
        </t>

        <t>
          When several lexical grammar rules match a sequence of characters in a
          document, the longest match takes priority.
        </t>

        <section title="Line Terminators">

          <t>
            Line terminators divide text into lines. A line terminator is any
            Unicode character with Line_Break class BK, CR, LF, or NL. However,
            any CR character that immediately precedes a LF character is
            ignored. (This affects only the numbering of lines.)
          </t>

        </section>

        <section title="White Space">

          <t>
            White space is a sequence of one or more white space characters. A
            white space character is any Unicode character with the White_Space
            property.
          </t>

        </section>

        <section title="Comments">

          <t>
            Comments are sequences of characters that are ignored when parsing
            text into tokens. Single-line comments begin with the characters
            "//" and extend to the end of the line. Delimited comments begin
            with the characters "/*" and end with the characters "*/". Delimited
            comments can occupy a portion of a line, a single line, or multiple
            lines.
          </t>

          <t>
            Comments do not nest. The character sequences "/*" and "*/" have no
            special meaning within a single-line comment, and the character
            sequences "//" and "/*" have no special meaning within a delimited
            comment.
          </t>

        </section>

        <section title="IRI References">

          <t>
            An IRI reference is a Unicode string that conforms to the syntax
            defined in <xref target="RFC3987">RFC 3987</xref>. An IRI reference
            can be absolute or relative and may contain a fragment identifier.
            Relative IRI references must be resolved against a base IRI to their
            absolute form. IRI references are enclosed in angle brackets ("&lt;"
            and "&gt;").
            <list>
              <t>iri = %x3C IRI-reference %x3E</t>
              <t>IRI-reference = &lt;Defined in RFC 3987&gt;</t>
            </list>
          </t>

        </section>

        <section title="Literals">

          <t>
            A literal is a textual representation of a value. There are six
            kinds of literals: Boolean, integer, floating-point, byte string,
            text string, and null.
          </t>

          <section title="Boolean Literals">

            <t>
              The literals "true" and "false" denote the Boolean values true and
              false, respectively.
              <list>
                <t>boolean = %x74.72.75.65 / %x66.61.6C.73.65</t>
              </list>
            </t>

          </section>

          <section title="Integer Literals">

            <t>
              Integer literals denote integer values of unspecified precision.
              By default, integer literals are expressed in decimal, but can
              also be specified in an alternate base using a prefix. Binary
              literals begin with "0b", octal literals begin with "0o", and
              hexadecimal literals begin with "0x".
            </t>

            <t>
              Decimal literals contain the digits "0" through "9". Binary
              literals contain "0" and "1", octal literals contain "0" through
              "7", and hexadecimal literals contain "0" through "9" as well as
              "A" through "F" in upper- or lowercase.
            </t>

            <t>
              Negative integers are expressed by prepending a minus sign ("-").
              <list>
                <t>integer = [%x2D] (decimal / binary / octal / hexadecimal)</t>
                <t>decimal = 1*DIGIT</t>
                <t>binary = %x30 (%x42 / %x62) 1*BINDIG</t>
                <t>octal = %x30 (%x4F / %x6F) 1*OCTDIG</t>
                <t>hexadecimal = %x30 (%x58 / %x78) 1*HEXDIG</t>
                <t>DIGIT = %x30-39</t>
                <t>BINDIG = %x30-31</t>
                <t>OCTDIG = %x30-37</t>
                <t>HEXDIG = %x30-39 / %x41-46 / %x61-66</t>
              </list>
            </t>

          </section>

          <section title="Floating-point Literals">

            <t>
              Floating-point literals denote floating-point values of
              unspecified precision.
            </t>

            <t>
              Floating-point literals consist of a sequence of decimal digits
              followed by either a fraction, an exponent, or both. The fraction
              consists of a decimal point (".") followed by a sequence of
              decimal digits. The exponent consists of an upper- or lowercase
              "e" followed by an optional sign and a sequence of decimal digits
              that indicate a power of 10 by which the value preceding the "e"
              is multiplied.
            </t>

            <t>
              Negative floating-point values are expressed by prepending a minus
              sign ("-").
              <list>
                <t>floating-point = [%x2D] 1*DIGIT [fraction] [exponent]</t>
                <t>fraction = %x2E 1*DIGIT</t>
                <t>exponent = (%x45 / %x65) [%x2B / %x2D] 1*DIGIT</t>
              </list>
            </t>

            <t>
              Floating-point literals can additionally denote the special
              "Not-a-Number" (NaN) value, positive infinity, and negative
              infinity. The NaN value is produced by the token "NaN". The two
              infinite values are produced by the tokens "+Infinity" (or simply
              "Infinity") and "-Infinity".
              <list>
                <t>floating-point =/ %x4E.61.4E</t>
                <t>floating-point =/ [%x2B] %x49.6E.66.69.6E.69.74.79</t>
                <t>floating-point =/ %x2D.49.6E.66.69.6E.69.74.79</t>
              </list>
            </t>

          </section>

          <section title="Byte String Literals">

            <t>
              A byte string literal consists of a prefix and zero or more bytes
              encoded in <xref target="RFC4648">Base16, Base32, or Base64</xref>
              and enclosed in single quotes. Byte string literals in Base16
              begin with "h" or "b16", byte string literals in Base32 begin with
              "b32", and byte string literals in Base64 begin with "b64".
              <list>
                <t>bytes = base16 / base32 / base64</t>
                <t>base16 = (%x68 / %x62.31.36) SQUOTE &lt;Base16 encoded data&gt; SQUOTE</t>
                <t>base32 = %x62.33.32 SQUOTE &lt;Base32 encoded data&gt; SQUOTE</t>
                <t>base64 = %x62.36.34 SQUOTE &lt;Base64 encoded data&gt; SQUOTE</t>
                <t>SQUOTE = %x27</t>
              </list>
            </t>

          </section>

          <section title="Text String Literals">

            <t>
              A text string literal consists of zero or more Unicode characters
              enclosed in double quotes. It can include simple escape sequences
              (such as \t for the tab character) and hexadecimal and Unicode
              escape sequences.
              <list>
                <t>text = DQUOTE *(char / %x5C escape) DQUOTE</t>
                <t>char = &lt;Any character except %x22, %x5C, and line terminators&gt;</t>
                <t>escape = simple-escape / hexadecimal-escape / unicode-escape</t>
                <t>simple-escape = %x30 / %x62 / %x74 / %x6E / %x76</t>
                <t>simple-escape =/ %x66 / %x72 / %x22 / %x27 / %x5C</t>
                <t>hexadecimal-escape = (%x58 / %x78) 2HEXDIG</t>
                <t>unicode-escape = %x55 4HEXDIG / %x75 8HEXDIG</t>
                <t>DQUOTE = %x22</t>
              </list>
            </t>

            <t>
              An escape sequence denotes a single Unicode code point. For
              hexadecimal and Unicode escape sequences, the code point is formed
              by the hexadecimal number following the "\X", "\x", "\U", or "\u"
              prefix. Simple escape sequences indicate the following code
              points:
            </t>

            <texttable title="Simple Escape Sequences" anchor="escape">
              <ttcol>Escape Sequence</ttcol>
              <ttcol>Character Name</ttcol>
              <ttcol>Code Point</ttcol>

              <c>\0</c>
              <c>Null</c>
              <c>%x00</c>
              <c>\b</c>
              <c>Backspace</c>
              <c>%x08</c>
              <c>\t</c>
              <c>Character Tabulation</c>
              <c>%x09</c>
              <c>\n</c>
              <c>Line Feed</c>
              <c>%x0A</c>
              <c>\v</c>
              <c>Line Tabulation</c>
              <c>%x0B</c>
              <c>\f</c>
              <c>Form Feed</c>
              <c>%x0C</c>
              <c>\r</c>
              <c>Carriage Return</c>
              <c>%x0D</c>
              <c>\"</c>
              <c>Quotation Mark</c>
              <c>%x22</c>
              <c>\'</c>
              <c>Apostrophe</c>
              <c>%x27</c>
              <c>\\</c>
              <c>Reverse Solidus</c>
              <c>%x5C</c>
            </texttable>

          </section>

          <section title="Null Literal">

            <t>
              The literals "null" and "?" denote the intentional absence of any
              value.
              <list>
                <t>null = %x6E.75.6C.6C / %x3F</t>
              </list>
            </t>

          </section>

        </section>

        <section title="Identifiers">

          <t>
            Identifier tokens are user-defined symbolic names. The rules for
            identifiers correspond exactly to those recommended by the <xref
            target="UNICODE-UAX31">Unicode Standard Annex #31</xref>: An
            identifier consists of a Unicode character in the ID_Start class
            followed by zero or more Unicode characters in the ID_Continue
            class.
            <list>
              <t>identifier = START *CONTINUE</t>
              <t>START = &lt;Any character in the ID_Start class&gt;</t>
              <t>CONTINUE = &lt;Any character in the ID_Continue class&gt;</t>
            </list>
          </t>

          <t>
            All identifiers must be converted into Unicode Normalization Form C
            (NFC), as defined by the <xref target="UNICODE-UAX15">Unicode
            Standard Annex 15</xref>. Comparison of identifiers is based on NFC
            and is case-sensitive.
          </t>

        </section>

        <section title="Punctuators">

          <t>
            Punctuator tokens are used for grouping and separating.
            <list>
              <t>punctuator = "#" | ":" | "[" | "]" | "{" | "}" | "=" | "->"</t>
            </list>
          </t>

        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Security Considerations" anchor="security">
    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="IANA Considerations">
    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">

      &RFC2119;
      &RFC3629;
      &RFC3987;
      &RFC4648;
      &RFC5234;
      &RFC7049;
      &RFC8174;

      &I-D.nottingham-rfc5988bis;

      <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
        <front>
          <title>The Unicode Standard</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date />
        </front>
        <annotation>
          Note that this reference is to the latest version of Unicode, rather
          than to a specific release. It is not expected that future changes in
          the Unicode specification will have any impact on CoRAL.
        </annotation>
      </reference>

      <reference anchor="UNICODE-UAX15" target="http://unicode.org/reports/tr15/">
        <front>
          <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date />
        </front>
      </reference>

      <reference anchor="UNICODE-UAX31" target="http://unicode.org/reports/tr31/">
        <front>
          <title>Unicode Standard Annex #31: Unicode Identifier and Pattern Syntax</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date />
        </front>
      </reference>

    </references>

    <references title="Informative References">

      &RFC6690;
      &RFC7228;
      &RFC7230;
      &RFC7231;
      &RFC7252;

      &I-D.ietf-core-links-json;
      &I-D.kelly-json-hal;

      &W3C.REC-html51-20161101;
      &W3C.REC-rdf11-concepts-20140225;
      &W3C.REC-turtle-20140225;
      &W3C.REC-webarch-20041215;

    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Acknowledgements" numbered="no">

      <t>
        CoRAL is heavily inspired by the <xref target="I-D.kelly-json-hal">JSON
        Hypertext Application Language</xref>; the author of and contributors to
        that specification are greatly acknowledged.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
