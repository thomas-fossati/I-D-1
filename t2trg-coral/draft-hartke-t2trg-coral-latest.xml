<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "reference.RFC.2119.xml">
  <!ENTITY RFC3629 SYSTEM "reference.RFC.3629.xml">
  <!ENTITY RFC3986 SYSTEM "reference.RFC.3986.xml">
  <!ENTITY RFC3987 SYSTEM "reference.RFC.3987.xml">
  <!ENTITY RFC4648 SYSTEM "reference.RFC.4648.xml">
  <!ENTITY RFC5234 SYSTEM "reference.RFC.5234.xml">
  <!ENTITY RFC5246 SYSTEM "reference.RFC.5246.xml">
  <!ENTITY RFC6657 SYSTEM "reference.RFC.6657.xml">
  <!ENTITY RFC6690 SYSTEM "reference.RFC.6690.xml">
  <!ENTITY RFC6838 SYSTEM "reference.RFC.6838.xml">
  <!ENTITY RFC6943 SYSTEM "reference.RFC.6943.xml">
  <!ENTITY RFC7049 SYSTEM "reference.RFC.7049.xml">
  <!ENTITY RFC7228 SYSTEM "reference.RFC.7228.xml">
  <!ENTITY RFC7230 SYSTEM "reference.RFC.7230.xml">
  <!ENTITY RFC7231 SYSTEM "reference.RFC.7231.xml">
  <!ENTITY RFC7252 SYSTEM "reference.RFC.7252.xml">
  <!ENTITY RFC8174 SYSTEM "reference.RFC.8174.xml">
  <!ENTITY I-D.ietf-cbor-cddl SYSTEM "reference.I-D.ietf-cbor-cddl.xml">
  <!ENTITY I-D.ietf-core-links-json SYSTEM "reference.I-D.ietf-core-links-json.xml">
  <!ENTITY I-D.nottingham-rfc5988bis SYSTEM "reference.I-D.nottingham-rfc5988bis.xml">
  <!ENTITY W3C.REC-html51-20161101 SYSTEM "reference.W3C.REC-html51-20161101.xml">
  <!ENTITY W3C.REC-rdf11-concepts-20140225 SYSTEM "reference.W3C.REC-rdf11-concepts-20140225.xml">
  <!ENTITY W3C.REC-turtle-20140225 SYSTEM "reference.W3C.REC-turtle-20140225.xml">
  <!ENTITY W3C.REC-webarch-20041215 SYSTEM "reference.W3C.REC-webarch-20041215.xml">
  <!ENTITY W3C.REC-xml-20081126 SYSTEM "reference.W3C.REC-xml-20081126.xml">
  <!ENTITY W3C.REC-xml-names-20091208 SYSTEM "reference.W3C.REC-xml-names-20091208.xml">
  <!ENTITY SELF "[I-D.hartke-t2trg-coral]">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>

<rfc category="exp" docName="draft-hartke-t2trg-coral-03" ipr="trust200902">

  <front>

    <title abbrev="Constrained RESTful Application Language">
      The Constrained RESTful Application Language (CoRAL)
    </title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63905</phone>
        <email>hartke@tzi.org</email>
      </address>
    </author>

    <date />

    <workgroup>Thing-to-Thing Research Group</workgroup>

    <abstract>

      <t>
        The Constrained RESTful Application Language (CoRAL) defines a data
        model and interaction model as well as two specialized serialization
        formats for the description of typed connections between resources on
        the Web ("links") and possible operations on such resources ("forms") as
        well as simple resource metadata.
      </t>

    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Introduction" anchor="introduction">

      <t>
        The Constrained RESTful Application Language (CoRAL) is a language for
        the description of typed connections between resources on the Web
        ("links") and possible operations on such resources ("forms") as well as
        simple resource metadata. This document defines the CoRAL data and
        interaction model as well as two specialized CoRAL serialization
        formats.
      </t>

      <t>
        CoRAL is intended for driving automated software agents that navigate a
        Web application based on a standardized vocabulary of link and form
        relation types. It is designed to be used in conjunction with a Web
        transfer protocol such as the <xref target="RFC7230">Hypertext Transfer
        Protocol (HTTP)</xref> or the <xref target="RFC7252">Constrained
        Application Protocol (CoAP)</xref>.
      </t>

      <t>
        The CoRAL data and interaction model is a superset of the Web linking
        model described in <xref target="I-D.nottingham-rfc5988bis">RFC
        5988</xref>. The data model consists of two elements: links, which
        describe relationships between pair of resources and the types of those
        relationships, and forms, which describe possible operations on
        resources and the types of those operation. Additionally, the model can
        describe simple resource metadata in a style similar to the <xref
        target="W3C.REC-rdf11-concepts-20140225">Resource Description Framework
        (RDF)</xref>. Unlike RDF, the focus of CoRAL is on the interaction with
        resources, not on the relationships between them. The interaction model
        derives from the model of <xref target="W3C.REC-html51-20161101">HTML
        5</xref> and specifies how an automated software agent can navigate
        between resources by following links and perform operations on resources
        by submitting forms.
      </t>

      <t>
        The primary CoRAL serialization format is a compact, binary encoding of
        links and forms in <xref target="RFC7049">Concise Binary Object
        Representation (CBOR)</xref>. It is intended for <xref
        target="RFC7228">environments with constraints on power, memory, and
        processing resources</xref> and shares many similarities with the
        message format of the <xref target="RFC7252">Constrained Application
        Protocol (CoAP)</xref>. For example, it uses numeric identifiers instead
        of strings for link and form relation types and pre-parses URIs into
        (what CoAP considers to be) their components, which greatly simplifies
        URI processing. As a result, link serializations are often more compact
        than equivalent serializations in <xref target="RFC6690">CoRE Link
        Format</xref>, including <xref target="I-D.ietf-core-links-json">its
        CBOR variant</xref>. Additionally, the format supports the serialization
        of forms, which CoRE Link Format does not.
      </t>

      <t>
        The second serialization format is a light, textual encoding of links
        and forms that is intended to be easy to read and write by humans. The
        format is used for giving examples throughout the document and is
        stylistically similar to <xref
        target="W3C.REC-turtle-20140225">Turtle</xref>, although it is not a
        syntax for RDF.
      </t>

      <section title="Terminology">

        <t>
          Readers of this document are expected to be familiar with the terms
          and concepts described in <xref target="I-D.nottingham-rfc5988bis">RFC
          5988</xref>. Additional concepts are introduced in <xref
          target="overview"/>.
        </t>

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          <xref target="RFC2119">BCP 14</xref> <xref target="RFC8174"/> when,
          and only when, they appear in all capitals, as shown here.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Overview" anchor="overview">
    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Data and Interaction Model" anchor="model">

      <t>
        The Constrained RESTful Application Language (CoRAL) is designed for
        building <xref target="W3C.REC-webarch-20041215">Web-based
        applications</xref> in which automated software agents navigate between
        resources by following links and perform operations on resources by
        submitting forms.
      </t>

      <section title="Browsing Context">

        <t>
          Borrowing from <xref target="W3C.REC-html51-20161101">HTML 5</xref>,
          each such agent maintains a <spanx>browsing context</spanx>, an
          environment in which the representations of resources on the Web are
          processed. (In HTML 5, the browsing context typically corresponds to a
          tab or window in a Web browser.)
        </t>

        <t>
          A browsing context has a <spanx>session history</spanx>, which lists
          the resource representations that the agent has processed, is
          processing, or will process. At any time, one representation in each
          browsing context is designated the <spanx>active</spanx>
          representation.
        </t>

        <t>
          A session history consists of a flat list of session history entries.
          Each <spanx>session history entry</spanx> consists of a resource
          representation and the <xref target="RFC3987">Internationalized
          Resource Identifier (IRI)</xref> that was used to retrieve the
          representation. An entry may additionally have other information
          associated with it. New entries are added to the session history as
          the agent navigates from resource to resource.
        </t>

      </section>

      <section title="Documents">

        <t>
          A resource representation in one of the CoRAL serialization formats is
          called a CoRAL <spanx>document</spanx>. The IRI that was used to
          retrieve the representation is called the document's <spanx>retrieval
          context</spanx>.
        </t>

        <t>
          A CoRAL document consists of a list of zero or more links and forms,
          which are collectively called <spanx>elements</spanx>. Serialization
          formats may define additional types of elements for efficiency or
          convenience, such as a base IRI for relative IRI references.
        </t>

      </section>

      <section title="Links">

        <t>
          A <spanx>link</spanx> describes a relationship between two resources
          on the Web. It consists of a <spanx>link context</spanx>, a
          <spanx>link relation type</spanx>, and a <spanx>link target</spanx>. A
          link may additionally have a nested list of zero or more links and
          forms, which take the place of link target attributes.
        </t>

        <t>
          A link can be viewed as a statement of the form "<spanx>link
          context</spanx> has a <spanx>link relation type</spanx> resource at
          <spanx>link target</spanx>", where the link target may be further
          described by nested links and forms.
        </t>

        <t>
          The link relation type identifies the semantics of a link. In HTML 5
          and RFC 5988, link relation types are typically denoted by registered
          names, such as "stylesheet" or "icon". In CoRAL, link relation types
          are denoted by IRIs and unsigned integers. The use of IRIs allows the
          creation of new, unique relation types in a decentralized way, but
          increases the size of representations. The use of unsigned integers
          minimizes the overhead of link relation types in constrained
          environments, but requires the registration of assigned values in a
          registry.
        </t>

        <t>
          The link context and link target are both resources. Resources in
          CoRAL are denoted either by an IRI or directly by a literal, similar
          to RDF. If the scheme of the IRI indicates a Web transfer protocol
          such as HTTP or CoAP, agents can dereference the IRI and navigate
          their browsing context to the referenced resource; this is called
          <spanx>following the link</spanx>. Literals can be used to directly
          identify values. Supported types are Boolean values, integers,
          floating-point values, byte strings, and text strings.
        </t>

        <t>
          A link can occur as a top-level element in a document or as a nested
          element within a link. When a link occurs as a top-level element in a
          document, the link context is equal to the document's retrieval
          context. When a link occurs within a link, the link context of the
          inner link is equal to the link target of the outer link.
        </t>

        <t>
          There are no restrictions on the cardinality of links; there can be
          multiple links to and from a particular target, and multiple links of
          the same or different types between a given link context and target.
          However, the CoRAL data model constrains the description of a web of
          resources to a graph in tree form; links between linked resources can
          only be described by further nesting links.
        </t>

      </section>

      <section title="Forms">

        <t>
          A <spanx>form</spanx> provides instructions to an agent for performing
          an operation on a Web resource. It consists of a <spanx>form
          context</spanx>, a <spanx>form relation type</spanx>, a <spanx>request
          method</spanx>, and a <spanx>submission IRI</spanx>. Additionally, a
          form may be accompanied by <spanx>form data</spanx>.
        </t>

        <t>
          A form can be viewed as an instruction of the form "To perform a
          <spanx>form relation type</spanx> operation on <spanx>form
          context</spanx>, make a <spanx>request method</spanx> request to
          <spanx>submission IRI</spanx>", where the payload of the request may
          be further described by form data.
        </t>

        <t>
          The form relation type identifies the semantics of the operation. Like
          link relation types, form relation types can be denoted by IRIs and
          unsigned integers.
        </t>

        <t>
          The form context is the resource on which an operation is ultimately
          performed. To perform the operation, an agent must construct a request
          with the specified request method and submission IRI. The set of
          possible request methods is defined by the protocol identified by the
          scheme of the submission IRI. The submission IRI typically refers to
          the form context, but MAY refer to a different resource. Constructing
          and sending the request is called _submitting the form_.
        </t>

        <t>
          If a form is accompanied by form data, the agent must also construct
          and include a request payload that matches the specifications of the
          form data.
        </t>

        <t>
          A form can occur as a top-level element in a document or as a nested
          element within a link. When a form occurs as a top-level element in a
          document, the form context is equal to the document's retrieval
          context. When a form occurs within a link, the form context is equal
          to the target of the enclosing link.
        </t>

      </section>

      <section title="Form Data">

        <t>
          Form data provides instructions for agents to construct a request
          payload. It consists of a list of zero or more <spanx>form
          fields</spanx>. Each form field consists of a <spanx>key</spanx> and a
          <spanx>value</spanx>.
        </t>

        <t>
          Form fields can either directly identify data items that need to be
          included in the request payload, or reference an external resource
          (such as a schema) that describes the data. Additionally, they can
          specify other information, such as acceptable serialization formats
          for the data.
        </t>

        <t>
          The key in a form field identifies the semantics of the field. Like
          link and form relation types, keys are denoted by IRIs and unsigned
          integers.
        </t>

        <t>
          The value in a form field can be an IRI, a Boolean value, an integer,
          a floating-point value, a byte string, or a text string.
        </t>

      </section>

      <section title="Navigation">

        <t>
          An agent begins interacting with an application through a GET request
          on an <spanx>entry point IRI</spanx>. The entry point IRI is the only
          IRI an agent is expected to know before interacting with an
          application. From there, it makes all requests by following links and
          submitting forms that are provided in responses. The entry point IRI
          can be obtained by either manual configuration or discovery at
          runtime.
        </t>

        <t>
          If dereferencing the entry point IRI yields a CoRAL document, the
          agent proceeds as follows:
          <list style="numbers">
            <t>
              The first step for the agent is to decide what to do next, i.e.,
              which type of link to follow or form to submit, based on the link
              relation types and form relation types it understands.
            </t>
            <t>
              The agent finds the link(s) or form(s) with the given relation
              type in the active representation. This may yield one or more
              candidates from which the agent must select the most appropriate
              one in the next step. The set of candidates may be empty, for
              example, if an operation is not supported or allowed.
            </t>
            <t>
              The agent selects one of the candidates based on the metadata
              associated with the link or form. Metadata can include the IRI
              scheme, the media type of the target resource representation, the
              request method, and other attributes that describe the target.
            </t>
            <t>
              The agent resolves the IRI reference in the link or form in order
              to obtain the <spanx>request IRI</spanx>. Fragment identifiers are
              not part of request IRIs and MUST be separated from the rest of
              the IRI prior to a dereference. The request IRI may need to be
              converted to a URI (see Section 3.1 of <xref target="RFC3987">RFC
              3987</xref>) for protocols that do not support IRIs.
            </t>
            <t>
              The agent constructs a new request with the request IRI or URI. If
              the agent follows a link, the request method is GET. If the agent
              submits a form, the request method is specified in the form. The
              agent SHOULD set header fields and options according to provided
              metadata (e.g., set the HTTP Accept header field or the CoAP
              Accept option when the media type of the target resource is
              provided). In the case of a form with form data, the agent also
              MUST construct and include a request payload that matches the
              specifications of the form data.
            </t>
            <t>
              The agent sends the request and retrieves the response.
            </t>
            <t>
              If a fragment identifier was separated from the request IRI, the
              agent dereferences the fragment identifier within the retrieved
              representation.
            </t>
            <t>
              The agent <spanx>updates the session history</spanx>: It removes
              all the entries in the browsing context's session history after
              the current entry. Then it appends a new entry at the end of the
              history representing the new resource.
            </t>
            <t>
              If response contains a CoRAL document, the agent can finally
              decide again what to do next.
            </t>
          </list>
        </t>

      </section>

      <section title="History Traversal">

        <t>
          An agent can additionally navigate a browsing context by traversing
          the browsing context's session history. An agent can <spanx>traverse
          the session history</spanx> by updating the active representation to
          the that entry.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Binary Format" anchor="binary">

      <t>
        This section defines the encoding of documents in the CoRAL binary
        format.
      </t>

      <t>
        A document in the binary format is a data item in the <xref
        target="RFC7049">Concise Binary Object Representation (CBOR)</xref>. The
        structure of this data item is presented in the <xref
        target="I-D.ietf-cbor-cddl">Concise Data Definition Language
        (CDDL)</xref>.
      </t>

      <section title="Data Structure">

        <t>
          The data structure of a document in the binary format is made up of
          three kinds of elements: links and forms, as defined by the CoRAL data
          model, and base IRI directives. Base IRI directives provide a way to
          encode IRI references with a common base more efficiently.
        </t>

        <t>
          Elements are processed in the order they appear in the document.
          Document processors need to maintain an <spanx>environment</spanx>
          while iterating an array of elements. The environment consists of
          three variables: a <spanx>current context IRI</spanx>, a
          <spanx>current base IRI</spanx>, and a <spanx>current relation
          type</spanx>. The current context IRI and current base IRI are both
          initially set to the document's retrieval context. The current
          relation type is initially set to zero.
        </t>

        <section title="Documents">

          <t>
            The body of a document in the binary format is encoded as an array
            of zero or more links, forms, and directives.
            <list>
              <t>body = [*(link / form / directive)]</t>
            </list>
          </t>

        </section>

        <section title="Links" anchor="binary-links">

          <t>
            A link is encoded as an array that consists of the unsigned integer
            2, followed by the link relation type and the link target,
            optionally followed by a link body that contains nested elements.
            <list>
              <t>link = [link: 2, relation, target, ?body]</t>
            </list>
          </t>

          <t>
            The link relation type is encoded either as a text string containing
            an absolute IRI reference or as an (unsigned or negative) integer
            representing the difference to the current relation type. A link is
            processed by updating the current relation type to the result of
            adding the specified integer (or zero in the case of a text string)
            to the current relation type.
            <list>
              <t>relation = text / int</t>
            </list>
          </t>

          <t>
            The link target is denoted by an IRI reference or represented by a
            literal value. The IRI reference may be relative or absolute and is
            resolved against the current base IRI. The encoding of IRI
            references in the binary format is described in <xref
            target="binary-iri"/>. The link target MAY be null, which indicates
            that the link target is an unspecified resource.
            <list>
              <t>target = iri / literal / null</t>
              <t>literal = bool / int / float / bytes / text</t>
            </list>
          </t>

          <t>
            The array of elements in the link body (if any) is processed in a
            fresh environment. The current context IRI and current base IRI in
            the new environment are both initially set to the link target of the
            enclosing link. The current relation type in the new environment is
            initially set to the current relation type.
          </t>

        </section>

        <section title="Forms">

          <t>
            A form is encoded as an array that consists of the unsigned integer
            3, followed by the form relation type, the submission method, and a
            submission IRI reference, optionally followed by form data.
            <list>
              <t>form = [form: 3, relation, method, iri, ?form-data]</t>
            </list>
          </t>

          <t>
            The form relation type is encoded and processed in the same way as a
            link relation type; see <xref target="binary-links"/>.
          </t>

          <t>
            The method is encoded as a text string or an unsigned integer that
            refers to one of the request methods defined by the protocol that is
            identified by the scheme of the submission IRI. Methods as text
            strings are constrained to the range of US-ASCII characters and are
            case-insensitive.
          </t>

          <t>
            For <xref target="RFC7231">HTTP</xref>, the method MUST be encoded
            as a text string; the set of possible values is maintained in the
            HTTP Method Registry. For <xref target="RFC7252">CoAP</xref>, the
            method MUST be encoded as an unsigned integer; the set of possible
            values is maintained in the CoAP Method Codes Registry.
            <list>
              <t>method = text / uint</t>
            </list>
          </t>

          <t>
            The submission IRI reference may be relative or absolute and is
            resolved against the current base IRI. The encoding of IRI
            references in the binary format is described in <xref
            target="binary-iri"/>.
          </t>

          <section title="Form Data">

            <t>
              Form data is encoded as an array of zero or more key-value pairs.
              <list>
                <t>form-data = [*(key, value)]</t>
              </list>
              Form data is processed in a fresh environment. The current context
              IRI and current base IRI in the new environment are both initially
              set to the submission IRI of the enclosing form. The current
              relation type in the new environment is initially set to the
              current relation type.
            </t>

            <t>
              A key is encoded and processed in the same way as a link relation
              type; see <xref target="binary-links"/>.
              <list>
                <t>key = text / uint</t>
              </list>
            </t>

            <t>
              A value can be an IRI reference, Boolean value, integer,
              floating-point value, byte string, or text string. An IRI
              reference may be relative or absolute and is resolved against the
              current base IRI. The encoding of IRI references in the binary
              format is described in <xref target="binary-iri"/>.
              <list>
                <t>value = iri / bool / int / float / bytes / text</t>
              </list>
            </t>

          </section>

          <section title="Short Forms">

            <t>
              Forms in certain shapes can be encoded in a more efficient manner
              using short forms. The following short forms are available:
              <list>
                <t>form =/ [form.create: 4, ?accept: uint .size 2]</t>
                <t>form =/ [form.update: 5]</t>
                <t>form =/ [form.delete: 6]</t>
              </list>
            </t>

            <t>
              If the scheme of the submission IRI indicates HTTP, the short
              forms expand as follows:
              <list>
                <t>
                  [ 4 ] &nbsp;&nbsp; -&gt; [ 3, "create", "POST", [ ] ]<vspace/>
                  [ 4, x ] -&gt; [ 3, "create", "POST", [ ], [ "accept", x ] ]<vspace/>
                  [ 5 ] &nbsp;&nbsp; -&gt; [ 3, "update", "PUT", [ ] ]<vspace/>
                  [ 6 ] &nbsp;&nbsp; -&gt; [ 3, "delete", "DELETE", [ ] ]
                </t>
              </list>
              If the scheme of the submission IRI indicates CoAP, the short
              forms expand as follows:
              <list>
                <t>
                  [ 4 ] &nbsp;&nbsp; -&gt; [ 3, "create", 2, [] ]<vspace/>
                  [ 4, x ] -&gt; [ 3, "create", 2, [ ], [ "accept", x ] ]<vspace/>
                  [ 5 ] &nbsp;&nbsp; -&gt; [ 3, "update", 3, [ ] ]<vspace/>
                  [ 6 ] &nbsp;&nbsp; -&gt; [ 3, "delete", 4, [ ] ]
                 </t>
              </list>
            </t>

          </section>

        </section>

        <section title="Directives">

          <t>
            Directives provide the ability to manipulate the environment when
            processing a list of elements. There is one directive available: the
            Base URI directive.
            <list>
              <t>directive = base-directive</t>
            </list>
          </t>

          <section title="Base URI Directives">

            <t>
              A Base IRI directive is encoded as an array that consists of the
              unsigned integer 1, followed by an IRI reference.
              <list>
                <t>base-directive = [base: 1, iri]</t>
              </list>
            </t>

            <t>
              The encoding of IRI references in the binary format is described in
              <xref target="binary-iri"/>.
            </t>

            <t>
              The directive is processed by resolving the IRI reference against
              the current context IRI and assigning the result to the current base
              IRI.
            </t>

          </section>

        </section>

      </section>

      <section title="IRIs" anchor="binary-iri">

        <t>
          ...
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Textual Format" anchor="textual">

      <t>
        This section defines the syntax of documents in the CoRAL textual format
        using two grammars: The lexical grammar defines how Unicode characters
        are combined to form line terminators, white space, comments, and
        tokens. The syntactic grammar defines how the tokens are combined to
        form documents. Both grammars are presented in <xref
        target="RFC5234">Augmented Backus-Naur Form (ABNF)</xref>.
      </t>

      <t>
        A document in the textual format is a Unicode string in a Unicode
        encoding form <xref target="UNICODE"/>. The media type for such
        documents is "text/coral". The "charset" parameter is not used; charset
        information is transported inside the document in the form of an
        optional Byte Order Mark (BOM). The use of the <xref
        target="RFC3629">UTF-8 encoding scheme</xref>, without a BOM, is
        RECOMMENDED.
      </t>

      <section title="Lexical Structure">

        <t>
          The lexical structure of a document in the textual format is made up
          of four basic elements: line terminators, white space, comments, and
          tokens. Of these, only tokens are significant in the syntactic
          grammar. There are four kinds of tokens: identifiers, IRI references,
          literals, and punctuators.
        </t>

        <t>
          When several lexical grammar rules match a sequence of characters in a
          document, the longest match takes priority.
        </t>

        <section title="Line Terminators">

          <t>
            Line terminators divide text into lines. A line terminator is any
            Unicode character with Line_Break class BK, CR, LF, or NL. However,
            any CR character that immediately precedes a LF character is
            ignored. (This affects only the numbering of lines.)
          </t>

        </section>

        <section title="White Space">

          <t>
            White space is a sequence of one or more white space characters. A
            white space character is any Unicode character with the White_Space
            property.
          </t>

        </section>

        <section title="Comments">

          <t>
            Comments are sequences of characters that are ignored when parsing
            text into tokens. Single-line comments begin with the characters
            "//" and extend to the end of the line. Delimited comments begin
            with the characters "/*" and end with the characters "*/". Delimited
            comments can occupy a portion of a line, a single line, or multiple
            lines.
          </t>

          <t>
            Comments do not nest. The character sequences "/*" and "*/" have no
            special meaning within a single-line comment, and the character
            sequences "//" and "/*" have no special meaning within a delimited
            comment.
          </t>

        </section>

        <section title="Identifiers">

          <t>
            Identifier tokens are user-defined symbolic names. The rules for
            identifiers correspond exactly to those recommended by the <xref
            target="UNICODE-UAX31">Unicode Standard Annex #31</xref>: An
            identifier consists of a Unicode character in the ID_Start class
            followed by zero or more Unicode characters in the ID_Continue
            class.
            <list>
              <t>identifier = START *CONTINUE</t>
              <t>START = &lt;Any character in the ID_Start class&gt;</t>
              <t>CONTINUE = &lt;Any character in the ID_Continue class&gt;</t>
            </list>
          </t>

          <t>
            All identifiers must be converted into Unicode Normalization Form C
            (NFC), as defined by the <xref target="UNICODE-UAX15">Unicode
            Standard Annex #15</xref>. Comparison of identifiers is based on NFC
            and is case-sensitive.
          </t>

        </section>

        <section title="IRI References">

          <t>
            An IRI reference is a Unicode string that conforms to the syntax
            defined in <xref target="RFC3987">RFC 3987</xref>. An IRI reference
            can be absolute or relative and can contain a fragment identifier.
            IRI references are enclosed in angle brackets ("&lt;" and "&gt;").
            <list>
              <t>iri = %x3C IRI-reference %x3E</t>
              <t>IRI-reference = &lt;Defined in RFC 3987&gt;</t>
            </list>
          </t>

        </section>

        <section title="Literals">

          <t>
            A literal is a textual representation of a value. There are six
            types of literals: Boolean, integer, floating-point, byte string,
            text string, and null.
          </t>

          <section title="Boolean Literals">

            <t>
              The literals "true" and "false" denote the Boolean values true and
              false, respectively.
              <list>
                <t>boolean = %x74.72.75.65 / %x66.61.6C.73.65</t>
              </list>
            </t>

          </section>

          <section title="Integer Literals">

            <t>
              Integer literals denote integer values of unspecified precision.
              By default, integer literals are expressed in decimal, but they
              can also be specified in an alternate base using a prefix. Binary
              literals begin with "0b", octal literals begin with "0o", and
              hexadecimal literals begin with "0x".
            </t>

            <t>
              Decimal literals contain the digits "0" through "9". Binary
              literals contain "0" and "1", octal literals contain "0" through
              "7", and hexadecimal literals contain "0" through "9" as well as
              "A" through "F" in upper- or lowercase.
            </t>

            <t>
              Negative integers are expressed by prepending a minus sign ("-").
              <list>
                <t>integer = [%x2D] (decimal / binary / octal / hexadecimal)</t>
                <t>decimal = 1*DIGIT</t>
                <t>binary = %x30 (%x42 / %x62) 1*BINDIG</t>
                <t>octal = %x30 (%x4F / %x6F) 1*OCTDIG</t>
                <t>hexadecimal = %x30 (%x58 / %x78) 1*HEXDIG</t>
                <t>DIGIT = %x30-39</t>
                <t>BINDIG = %x30-31</t>
                <t>OCTDIG = %x30-37</t>
                <t>HEXDIG = %x30-39 / %x41-46 / %x61-66</t>
              </list>
            </t>

          </section>

          <section title="Floating-point Literals">

            <t>
              Floating-point literals denote floating-point values of
              unspecified precision.
            </t>

            <t>
              Floating-point literals consist of a sequence of decimal digits
              followed by either a fraction, an exponent, or both. The fraction
              consists of a decimal point (".") followed by a sequence of
              decimal digits. The exponent consists of the upper- or lowercase
              letter "e" followed by an optional sign and a sequence of decimal
              digits that indicate a power of 10 by which the value preceding
              the "e" is multiplied.
            </t>

            <t>
              Negative floating-point values are expressed by prepending a minus
              sign ("-").
              <list>
                <t>floating-point = [%x2D] 1*DIGIT [fraction] [exponent]</t>
                <t>fraction = %x2E 1*DIGIT</t>
                <t>exponent = (%x45 / %x65) [%x2B / %x2D] 1*DIGIT</t>
              </list>
            </t>

            <t>
              Floating-point literals can additionally denote the special
              "Not-a-Number" (NaN) value, positive infinity, and negative
              infinity. The NaN value is produced by the token "NaN". The two
              infinite values are produced by the tokens "+Infinity" (or simply
              "Infinity") and "-Infinity".
              <list>
                <t>floating-point =/ %x4E.61.4E</t>
                <t>floating-point =/ [%x2B] %x49.6E.66.69.6E.69.74.79</t>
                <t>floating-point =/ %x2D.49.6E.66.69.6E.69.74.79</t>
              </list>
            </t>

          </section>

          <section title="Byte String Literals">

            <t>
              A byte string literal consists of a prefix and zero or more bytes
              encoded in <xref target="RFC4648">Base16, Base32, or Base64</xref>
              and enclosed in single quotes. Byte string literals encoded in
              Base16 begin with "h" or "b16", byte string literals encoded in
              Base32 begin with "b32", and byte string literals encoded in
              Base64 begin with "b64".
              <list>
                <t>bytes = base16 / base32 / base64</t>
                <t>base16 = (%x68 / %x62.31.36) SQUOTE &lt;Base16 encoded data&gt; SQUOTE</t>
                <t>base32 = %x62.33.32 SQUOTE &lt;Base32 encoded data&gt; SQUOTE</t>
                <t>base64 = %x62.36.34 SQUOTE &lt;Base64 encoded data&gt; SQUOTE</t>
                <t>SQUOTE = %x27</t>
              </list>
            </t>

          </section>

          <section title="Text String Literals">

            <t>
              A text string literal consists of zero or more Unicode characters
              enclosed in double quotes. It can include simple escape sequences
              (such as \t for the tab character) as well as hexadecimal and
              Unicode escape sequences.
              <list>
                <t>text = DQUOTE *(char / %x5C escape) DQUOTE</t>
                <t>char = &lt;Any character except %x22, %x5C, and line terminators&gt;</t>
                <t>escape = simple-escape / hexadecimal-escape / unicode-escape</t>
                <t>simple-escape = %x30 / %x62 / %x74 / %x6E / %x76</t>
                <t>simple-escape =/ %x66 / %x72 / %x22 / %x27 / %x5C</t>
                <t>hexadecimal-escape = (%x58 / %x78) 2HEXDIG</t>
                <t>unicode-escape = %x55 4HEXDIG / %x75 8HEXDIG</t>
                <t>DQUOTE = %x22</t>
              </list>
            </t>

            <t>
              An escape sequence denotes a single Unicode code point. For
              hexadecimal and Unicode escape sequences, the code point is formed
              by the hexadecimal number following the "\X", "\x", "\U", or "\u"
              prefix. Simple escape sequences indicate the code points listed in
              <xref target="escape"/>.
            </t>

            <texttable title="Simple Escape Sequences" anchor="escape">
              <ttcol>Escape Sequence</ttcol>
              <ttcol>Character Name</ttcol>
              <ttcol>Code Point</ttcol>

              <c>\0</c>
              <c>Null</c>
              <c>%x00</c>
              <c>\b</c>
              <c>Backspace</c>
              <c>%x08</c>
              <c>\t</c>
              <c>Character Tabulation</c>
              <c>%x09</c>
              <c>\n</c>
              <c>Line Feed</c>
              <c>%x0A</c>
              <c>\v</c>
              <c>Line Tabulation</c>
              <c>%x0B</c>
              <c>\f</c>
              <c>Form Feed</c>
              <c>%x0C</c>
              <c>\r</c>
              <c>Carriage Return</c>
              <c>%x0D</c>
              <c>\"</c>
              <c>Quotation Mark</c>
              <c>%x22</c>
              <c>\'</c>
              <c>Apostrophe</c>
              <c>%x27</c>
              <c>\\</c>
              <c>Reverse Solidus</c>
              <c>%x5C</c>
            </texttable>

          </section>

          <section title="Null Literal">

            <t>
              The literals "null" and "?" denote the intentional absence of any
              value.
              <list>
                <t>null = %x6E.75.6C.6C / %x3F</t>
              </list>
            </t>

          </section>

        </section>

        <section title="Punctuators">

          <t>
            Punctuator tokens are used for grouping and separating.
            <list>
              <t>punctuator = "#" | ":" | "[" | "]" | "{" | "}" | "=" | "->"</t>
            </list>
          </t>

        </section>

      </section>

      <section title="Syntactic Structure">

        <t>
          The syntactic structure of a document in the textual format is made up
          of three kinds of elements: links and forms, as defined by the CoRAL
          data model, and directives. Directives provide a way to make documents
          easier to read and write by defining a base IRI for relative IRI
          references and introducing shorthands for link and form relation
          types.
        </t>

        <t>
          Elements are processed in the order they appear in the document.
          Document processors need to maintain an <spanx>environment</spanx>
          while iterating a list of elements. The environment consists of three
          variables: a <spanx>current context IRI</spanx>, a <spanx>current base
          IRI</spanx>, and a mapping from identifiers to IRIs. The current
          context IRI and current base IRI are both initially set to the
          document's retrieval context. The mapping from identifiers to IRIs is
          initially empty.
        </t>

        <section title="Documents">

          <t>
            The body of a document in the textual format consists of zero or
            more links, forms, and directives.
            <list>
              <t>body = *(link / form / directive)</t>
            </list>
          </t>

        </section>

        <section title="Links" anchor="textual-links">

          <t>
            A link consists of the link relation type, followed by the link
            target, optionally followed by a link body enclosed in curly
            brackets ("{" and "}").
            <list>
              <t>link = relation target ["{" body "}"]</t>
            </list>
          </t>

          <t>
            The link relation type is denoted either by an absolute IRI
            reference, a simple name, a qualified name, or an unsigned integer.
            An IRI reference must be resolved to an IRI. It doesn't matter what
            it is resolved against, since it is always an absolute reference.
            <list>
              <t>relation = iri / simple-name / qualified-name / integer</t>
            </list>
            A simple name consists of an identifier. It is resolved to an IRI by
            looking up the empty string in the mapping from identifiers to IRIs
            and concatenating the looked up IRI and the specified identifier. It
            is an error if the empty string is not present in the mapping.
            <list>
              <t>simple-name = identifier</t>
            </list>
            A qualified name consists of two identifiers separated by a colon
            (":"). It is resolved to an IRI by looking up the identifier on the
            left hand side in the mapping from identifiers to IRIs and
            concatenating the looked up IRI and the identifier on the right hand
            side. It is an error if the identifier on the left hand side is not
            present in the mapping.
            <list>
              <t>qualified-name = identifier ":" identifier</t>
            </list>
          </t>

          <t>
            The link target is denoted by an IRI reference or represented by a
            value literal. The IRI reference may be relative or absolute and is
            resolved against the current base IRI. If the link target is null,
            the link target is an unspecified resource.
            <list>
              <t>target = iri / literal / null</t>
              <t>literal = boolean / integer / floating-point / bytes / text</t>
            </list>
          </t>

          <t>
            The list of elements in the link body (if any) is processed in a
            fresh environment. The current context IRI and current base IRI in
            this environment are both initially set to the link target of the
            enclosing link. The mapping from identifiers to IRIs is initially
            set to a copy of the mapping from identifiers to IRIs in the current
            environment.
          </t>

        </section>

        <section title="Forms">

          <t>
            A form consists of the form relation type, followed by a "->" token,
            a method identifier, and a submission IRI reference, optionally
            followed by form data enclosed in square brackets ("[" and "]").
            <list>
              <t>form = relation "->" method iri ["[" form-data "]"]</t>
            </list>
          </t>

          <t>
            The form relation type is denoted in the same way as a link relation
            type; see <xref target="textual-links"/>.
          </t>

          <t>
            The method identifier refers to one of the request methods defined
            by the protocol that is identified by the scheme of the submission
            IRI. Method identifiers are constrained to the range of US-ASCII
            characters and are case-insensitive.
          </t>

          <t>
            For <xref target="RFC7231">HTTP</xref>, the set of possible method
            identifiers is maintained in the HTTP Method Registry. For <xref
            target="RFC7252">CoAP</xref>, the set of possible method identifiers
            is maintained in the CoAP Method Codes Registry.
            <list>
              <t>method = identifier</t>
            </list>
          </t>

          <t>
            The submission IRI reference may be relative or absolute and is
            resolved against the current base IRI.
          </t>

          <section title="Form Data">

            <t>
              Form data consists of zero or more space-separated key-value
              pairs.
              <list>
                <t>form-data = *(key value)</t>
              </list>
            </t>

            <t>
              Form data is processed in a fresh environment. The current context
              IRI and current base IRI in this environment are both initially
              set to the submission IRI of the enclosing form. The mapping from
              identifiers to IRIs is initially set to a copy of the mapping from
              identifiers to IRIs in the current environment.
            </t>

            <t>
              The key is denoted in the same way as a link relation type; see
              <xref target="textual-links"/>.
              <list>
                <t>key = iri / simple-name / qualified-name / integer</t>
              </list>
            </t>

            <t>
              The value can be an IRI reference, Boolean literal, integer
              literal, floating-point literal, byte string literal, or text
              string literal. An IRI reference may be relative or absolute and
              is resolved against the current base IRI.
              <list>
                <t>value = iri / boolean / integer / floating-point / bytes / text</t>
              </list>
            </t>

          </section>

        </section>

        <section title="Directives">

          <t>
            Directives provide the ability to manipulate the environment when
            processing a list of elements. All directives start with a hash
            ("#") followed by a directive identifier. Directive identifiers are
            constrained to the range of US-ASCII characters and are
            case-insensitive.
          </t>

          <t>
            The following directives are available: Base IRI directives and
            Using directives.
            <list>
              <t>directive = base-directive / using-directive</t>
            </list>
          </t>

          <section title="Base IRI Directives">

            <t>
              A Base IRI directive consists of a hash ("#"), followed by the
              identifier "base" in upper- or lowercase, followed by an IRI
              reference.
              <list>
                <t>base-directive = "#" "base" iri</t>
              </list>
              The directive is processed by resolving the IRI reference against
              the current context IRI and assigning the result to the current
              base IRI.
            </t>

          </section>

          <section title="Using Directives">

            <t>
              A Using directive consists of a hash ("#"), followed by the
              identifier "using" in upper- or lowercase, optionally followed by
              an identifier and an equals sign ("="), followed by an absolute
              IRI reference. If the optional identifier is not specified, it is
              assumed to be the empty string.
              <list>
                <t>using-directive = "#" "using" [identifier "="] iri</t>
              </list>
              The directive is processed by resolving the IRI reference to an
              IRI and adding the specified identifier and resolved IRI to the
              mapping from identifiers to IRIs. It doesn't matter what the IRI
              reference is resolved against, since it is always an absolute
              reference. It is an error if the identifier is already present in
              the mapping.
            </t>

          </section>

        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Usage Considerations">

      <t>
        This section discusses some considerations in creating CoRAL-based
        applications and managing link and form relation types.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Security Considerations" anchor="security">

      <t>
        Parsers of CoRAL documents must operate on input that is assumed to be
        untrusted. This means that parsers must fail gracefully in the face of
        malicious inputs. Additionally, parsers must deal with resource
        exhaustion resulting, for example, from the allocation of big data items
        or exhaustion of the stack depth. See Section 8 of <xref
        target="RFC7049">RFC 7049</xref> for additional security considerations
        relating to CBOR.
      </t>

      <t>
        Implementers of the CoRAL textual format need to consider the security
        aspects of handling Unicode input. See the <xref
        target="UNICODE-UAX36">Unicode Standard Annex #36</xref> for security
        considerations relating to visual spoofind and misuse of character
        encodings. See Section 10 of <xref target="RFC3629">RFC 3629</xref> for
        security considerations relating to UTF-8.
      </t>

      <t>
        CoRAL makes extensive use of IRIs and URIs. See Section 8 of <xref
        target="RFC3987">RFC 3987</xref> for security considerations relating to
        IRIs. See Section 7 of <xref target="RFC3986">RFC 3986</xref> for
        security considerations relating to URIs.
      </t>

      <t>
        CoRAL is used in conjunction with a Web transfer protocol such as HTTP
        or CoAP. See Section 9 of <xref target="RFC7230">RFC 7320</xref>,
        Section of 9 of <xref target="RFC7231">RFC 7231</xref>, etc. for
        security considerations relating to HTTP. See Section 11 of <xref
        target="RFC7252">RFC 7252</xref> for security considerations relating to
        CoAP.
      </t>

      <t>
        CoRAL does not define any specific mechanisms for the confidentiality
        and integrity of CoRAL documents. It relies on application layer or
        transport layer mechanisms such as <xref target="RFC5246">Transport
        Layer Security (TLS)</xref>.
      </t>

      <t>
        CoRAL documents and the structure of a web of resources revealed from
        automatically following links can disclose personal information and
        other sensitive information. Implementations need to prevent the
        unintentional disclosure of such information. See Section of 9 of <xref
        target="RFC7231">RFC 7231</xref> for additional considerations.
      </t>

      <t>
        The security of applications using CoRAL can depend on the proper
        preparation and comparison of internationalized strings. For example,
        such strings can be used to make authentication and authorization
        decisions, and the security of an application could be compromised if an
        entity providing a given string is connected to the wrong account or
        online resource based on different interpretations of the string. See
        <xref target="RFC6943">RFC 6943</xref> for security considerations
        relating to identifiers in IRIs and other places.
      </t>

      <t>
        Applications using CoRAL ought to consider the attack vectors opened by
        automatically following, trusting, or otherwise using links and forms in
        CoRAL documents. In particular, a server authoritative for the CoRAL
        representation of a resource may not necessarily be the authoritative
        source for nested links and forms.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="IANA Considerations">

      <section title="Media Type &quot;application/coral+cbor&quot;">

        <t>
          This document registers the media type
          &quot;application/coral+cbor&quot; according to the procedures of
          <xref target="RFC6838">BCP 13</xref>.
          <list style="hanging">
            <t hangText="Type name:">
              <vspace/>application
            </t>
            <t hangText="Subtype name:">
              <vspace/>coral+cbor
            </t>
            <t hangText="Required parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Optional parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Encoding considerations:">
              <vspace/>binary
            </t>
            <t hangText="Security considerations:">
              <vspace/>See <xref target="security"/> of &SELF;.
            </t>
            <t hangText="Interoperability considerations:">
              <vspace/>N/A
            </t>
            <t hangText="Published specification:">
              <vspace/>&SELF;
            </t>
            <t hangText="Applications that use this media type:">
              <vspace/>See <xref target="introduction"/> of &SELF;.
            </t>
            <t hangText="Fragment identifier considerations:">
              <vspace/>As specified for "application/cbor".
            </t>
            <t hangText="Additional information:">
              <vspace/>Deprecated alias names for this type: N/A
              <vspace/>Magic number(s): N/A
              <vspace/>File extension(s): N/A
              <vspace/>Macintosh file type code(s): N/A
            </t>
            <t hangText="Person &amp; email address to contact for further information:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Intended usage:">
              <vspace/>COMMON
            </t>
            <t hangText="Restrictions on usage:">
              <vspace/>N/A
            </t>
            <t hangText="Author:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Change controller:">
              <vspace/>IESG
            </t>
            <t hangText="Provisional registration?">
              <vspace/>No
            </t>
          </list>
        </t>

      </section>

      <section title="Media Type &quot;text/coral&quot;">

        <t>
          This document registers the media type &quot;text/coral&quot;
          according to the procedures of <xref target="RFC6838">BCP 13</xref>
          and guidelines in <xref target="RFC6657">RFC 6657</xref>.
          <list style="hanging">
            <t hangText="Type name:">
              <vspace/>text
            </t>
            <t hangText="Subtype name:">
              <vspace/>coral
            </t>
            <t hangText="Required parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Optional parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Encoding considerations:">
              <vspace/>See <xref target="textual"/> of &SELF;.
            </t>
            <t hangText="Security considerations:">
              <vspace/>See <xref target="security"/> of &SELF;.
            </t>
            <t hangText="Interoperability considerations:">
              <vspace/>N/A
            </t>
            <t hangText="Published specification:">
              <vspace/>&SELF;
            </t>
            <t hangText="Applications that use this media type:">
              <vspace/>See <xref target="introduction"/> of &SELF;.
            </t>
            <t hangText="Fragment identifier considerations:">
              <vspace/>N/A
            </t>
            <t hangText="Additional information:">
              <vspace/>Deprecated alias names for this type: N/A
              <vspace/>Magic number(s): N/A
              <vspace/>File extension(s): .coral
              <vspace/>Macintosh file type code(s): TEXT
            </t>
            <t hangText="Person &amp; email address to contact for further information:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Intended usage:">
              <vspace/>COMMON
            </t>
            <t hangText="Restrictions on usage:">
              <vspace/>N/A
            </t>
            <t hangText="Author:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Change controller:">
              <vspace/>IESG
            </t>
            <t hangText="Provisional registration?">
              <vspace/>No
            </t>
          </list>
        </t>

      </section>

      <section title="CoAP Content Formats">

        <t>
          This document registers CoAP content formats for the media types
          &quot;application/coral+cbor&quot; and &quot;text/coral&quot;
          according to the procedures of <xref target="RFC6838">BCP 13</xref>.
          <list style="symbols">
            <t>
              Media Type: application/coral+cbor<vspace/>
              Content Coding: identity<vspace/>
              ID: TBD (maybe 63)<vspace/>
              Reference: &SELF;
            </t>
            <t>
              Media Type: text/coral<vspace/>
              Content Coding: identity<vspace/>
              ID: TBD (maybe 10063)<vspace/>
              Reference: &SELF;
            </t>
          </list>
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">

      &RFC2119;
      &RFC3629;
      &RFC3986;
      &RFC3987;
      &RFC4648;
      &RFC5234;
      &RFC6657;
      &RFC6838;
      &RFC6943;
      &RFC7049;
      &RFC8174;

      &I-D.ietf-cbor-cddl;
      &I-D.nottingham-rfc5988bis;

      <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
        <front>
          <title>The Unicode Standard</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date />
        </front>
        <annotation>
          Note that this reference is to the latest version of Unicode, rather
          than to a specific release. It is not expected that future changes in
          the Unicode specification will have any impact on this document.
        </annotation>
      </reference>

      <reference anchor="UNICODE-UAX15" target="http://unicode.org/reports/tr15/">
        <front>
          <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date />
        </front>
      </reference>

      <reference anchor="UNICODE-UAX31" target="http://unicode.org/reports/tr31/">
        <front>
          <title>Unicode Standard Annex #31: Unicode Identifier and Pattern Syntax</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date />
        </front>
      </reference>

      <reference anchor="UNICODE-UAX36" target="http://unicode.org/reports/tr36/">
        <front>
          <title>Unicode Standard Annex #36: Unicode Security Considerations</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date />
        </front>
      </reference>

    </references>

    <references title="Informative References">

      &RFC5246;
      &RFC6690;
      &RFC7228;
      &RFC7230;
      &RFC7231;
      &RFC7252;

      &I-D.ietf-core-links-json;

      &W3C.REC-html51-20161101;
      &W3C.REC-rdf11-concepts-20140225;
      &W3C.REC-turtle-20140225;
      &W3C.REC-webarch-20041215;

    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <!--
    <section title="Acknowledgements" numbered="no">
    </section>
    -->

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
