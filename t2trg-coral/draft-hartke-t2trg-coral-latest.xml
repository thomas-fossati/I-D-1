<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC3629 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.3629.xml">
  <!ENTITY RFC3986 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.3986.xml">
  <!ENTITY RFC3987 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.3987.xml">
  <!ENTITY RFC4648 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.4648.xml">
  <!ENTITY RFC5234 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.5234.xml">
  <!ENTITY RFC5789 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.5789.xml">
  <!ENTITY RFC6573 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.6573.xml">
  <!ENTITY RFC6657 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.6657.xml">
  <!ENTITY RFC6690 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.6690.xml">
  <!ENTITY RFC6838 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.6838.xml">
  <!ENTITY RFC6903 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.6903.xml">
  <!ENTITY RFC6906 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.6906.xml">
  <!ENTITY RFC6943 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.6943.xml">
  <!ENTITY RFC7049 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7049.xml">
  <!ENTITY RFC7228 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7228.xml">
  <!ENTITY RFC7230 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7230.xml">
  <!ENTITY RFC7231 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7231.xml">
  <!ENTITY RFC7252 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7252.xml">
  <!ENTITY RFC7320 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7320.xml">
  <!ENTITY RFC8132 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.8132.xml">
  <!ENTITY RFC8174 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.8174.xml">
  <!ENTITY RFC8288 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.8288.xml">
  <!ENTITY RFC8446 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.8446.xml">
  <!ENTITY I-D.ietf-cbor-cddl SYSTEM "http://www.rfc-editor.org/refs/bibxml3/reference.I-D.ietf-cbor-cddl.xml">
  <!ENTITY I-D.ietf-core-links-json SYSTEM "http://www.rfc-editor.org/refs/bibxml3/reference.I-D.ietf-core-links-json.xml">
  <!ENTITY W3C.REC-html52-20171214 SYSTEM "http://www.rfc-editor.org/refs/bibxml4/reference.W3C.REC-html52-20171214.xml">
  <!ENTITY W3C.REC-rdf11-concepts-20140225 SYSTEM "http://www.rfc-editor.org/refs/bibxml4/reference.W3C.REC-rdf11-concepts-20140225.xml">
  <!ENTITY W3C.REC-turtle-20140225 SYSTEM "http://www.rfc-editor.org/refs/bibxml4/reference.W3C.REC-turtle-20140225.xml">
  <!ENTITY W3C.REC-webarch-20041215 SYSTEM "http://www.rfc-editor.org/refs/bibxml4/reference.W3C.REC-webarch-20041215.xml">
  <!ENTITY SELF "[I-D.hartke-t2trg-coral]">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>

<rfc category="exp" docName="draft-hartke-t2trg-coral-06" ipr="trust200902">

  <front>

    <title abbrev="Constrained RESTful Application Language">
      The Constrained RESTful Application Language (CoRAL)
    </title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>Torshamnsgatan 23</street>
          <city>Stockholm</city>
          <code>SE-16483</code>
          <country>Sweden</country>
        </postal>
        <email>klaus.hartke@ericsson.com</email>
      </address>
    </author>

    <date/>

    <workgroup>Thing-to-Thing Research Group</workgroup>

    <abstract>

      <t>
        The Constrained RESTful Application Language (CoRAL) defines a data
        model and interaction model as well as two specialized serialization
        formats for the description of typed connections between resources on
        the Web ("links"), possible operations on such resources ("forms"), as
        well as simple resource metadata.
      </t>

    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Introduction" anchor="introduction">

      <t>
        The Constrained RESTful Application Language (CoRAL) is a language for
        the description of typed connections between resources on the Web
        ("links"), possible operations on such resources ("forms"), as well as
        simple resource metadata.
      </t>

      <t>
        CoRAL is intended for driving automated software agents that navigate a
        Web application based on a standardized vocabulary of link and form
        relation types. It is designed to be used in conjunction with a Web
        transfer protocol such as the <xref target="RFC7230">Hypertext Transfer
        Protocol (HTTP)</xref> or the <xref target="RFC7252">Constrained
        Application Protocol (CoAP)</xref>.
      </t>

      <t>
        This document defines the CoRAL data and interaction model, as well as
        two specialized CoRAL serialization formats:
      </t>

      <t>
        The CoRAL data and interaction model is a superset of the Web Linking
        model of <xref target="RFC8288">RFC 8288</xref>. The CoRAL data model
        consists of two elements: <spanx>links</spanx> that describe the
        relationships between pairs of resources and the type of those
        relationships, and <spanx>forms</spanx> that describe possible
        operations on resources and the type of those operations. Additionally,
        the data model can describe simple resource metadata in a way similar to
        the <xref target="W3C.REC-rdf11-concepts-20140225">Resource Description
        Framework (RDF)</xref>. In contrast to RDF, the focus of CoRAL is on the
        interaction with resources, not just the relationships between them. The
        CoRAL interaction model derives from <xref
        target="W3C.REC-html52-20171214">HTML 5</xref> and specifies how an
        automated software agent can navigate between resources by following
        links and perform operations on resources by submitting forms.
      </t>

      <t>
        The primary CoRAL serialization format is a compact, binary encoding of
        links and forms in <xref target="RFC7049">Concise Binary Object
        Representation (CBOR)</xref>. It is intended for <xref
        target="RFC7228">environments with constraints on power, memory, and
        processing resources</xref> and shares many similarities with the
        message format of the <xref target="RFC7252">Constrained Application
        Protocol (CoAP)</xref>. For example, it uses numeric identifiers instead
        of verbose strings for link and form relation types, and pre-parses URIs
        into (what CoAP considers to be) their components, which greatly
        simplifies URI processing. As a result, link serializations are often
        much more compact than equivalent serializations in <xref
        target="RFC6690">CoRE Link Format</xref> <xref
        target="I-D.ietf-core-links-json"/>.
      </t>

      <t>
        The secondary CoRAL serialization format is a lightweight, textual
        encoding of links and forms that is intended to be easy to read and
        write for humans. The format is loosely inspired by the syntax of <xref
        target="W3C.REC-turtle-20140225">Turtle</xref> and is used throughout
        the document for examples.
      </t>

      <section title="Requirements Notation">

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          <xref target="RFC2119">BCP 14</xref> <xref target="RFC8174"/> when,
          and only when, they appear in all capitals, as shown here.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Examples" anchor="examples">

      <section title="Web Linking">

        <t>
          At its core, CoRAL is just yet another serialization format for Web
          links. For example, if an HTTP client sends the following request:
        </t>

<figure><artwork><![CDATA[
   GET /TheBook/chapter3 HTTP/1.1
   Host: example.com
]]></artwork></figure>

        <t>
          and receives the following response:
        </t>

<figure><artwork><![CDATA[
   HTTP/1.1 200 OK
   Content-Type: text/coral

   #using <http://www.iana.org/assignments/relation/>

   next    <./chapter4>
   icon    </favicon.png>
   license <http://creativecommons.org/licenses/by/4.0/>
]]></artwork></figure>

        <t>
          then the representation contains the following three links:
          <list style="symbols">
            <t>
              one link of type "http://www.iana.org/assignments/relation/next"
              from &lt;http://example.com/TheBook/chapter3&gt; to
              &lt;http://example.com/TheBook/chapter4&gt;,
            </t>
            <t>
              one link of type "http://www.iana.org/assignments/relation/icon"
              from &lt;http://example.com/TheBook/chapter3&gt; to
              &lt;http://example.com/favicon.png&gt;, and
            </t>
            <t>
              one link of type
              "http://www.iana.org/assignments/relation/license" from
              &lt;http://example.com/TheBook/chapter3&gt; to
              &lt;http://creativecommons.org/licenses/by/4.0/&gt;.
            </t>
          </list>
        </t>

        <t>
          This representation is equivalent to the following <xref
          target="RFC8288">Link header field</xref>:
        </t>

<figure><artwork><![CDATA[
   Link: <./chapter4>; rel="next",
         </favicon.png>; rel="icon",
         <http://creativecommons.org/licenses/by/4.0/>; rel="license"
]]></artwork></figure>

        <t>
          and the following <xref target="W3C.REC-html52-20171214">HTML 5</xref>
          link elements:
        </t>

<figure><artwork><![CDATA[
   <link rel="next" href="./chapter4">
   <link rel="icon" href="/favicon.png">
   <link rel="license"
         href="http://creativecommons.org/licenses/by/4.0/">
]]></artwork></figure>

      </section>

      <section title="Links, Forms, and Metadata">

        <t>
          In its entirety, CoRAL is an expressive language for describing Web
          links between resources, possible operations on these resources, and
          simple resource metadata. For example, if an HTTP client sends the
          following request:
        </t>

<figure><artwork><![CDATA[
   GET /tasks HTTP/1.1
   Host: example.com
]]></artwork></figure>

        <t>
          and receives the following response:
        </t>

<figure><artwork><![CDATA[
   HTTP/1.1 200 OK
   Content-Type: text/coral

   #using <http://example.org/vocabulary#>
   #using coral = <urn:TBD#>

   task </tasks/1> {
      description "Pick up the kids"
   }

   task </tasks/2> {
      description "Return the books to the library"
      coral:delete -> DELETE </tasks/2>
   }

   coral:create -> POST </tasks> [coral:accept "example/task"]
]]></artwork></figure>

        <t>
          then the representation contains the following six elements:
          <list style="symbols">
            <t>
              one link of type "http://example.org/vocabulary#task" from
              &lt;http://example.com/tasks&gt; to
              &lt;http://example.com/tasks/1&gt;,
            </t>
            <t>
              one link of type "http://example.org/vocabulary#description" from
              &lt;http://example.com/tasks/1&gt; to "Pick up the kids",
            </t>
            <t>
              one link of type "http://example.org/vocabulary#task" from
              &lt;http://example.com/tasks&gt; to
              &lt;http://example.com/tasks/2&gt;,
            </t>
            <t>
              one link of type "http://example.org/vocabulary#description" from
              &lt;http://example.com/tasks/2&gt; to "Return the books to the
              library",
            </t>
            <t>
              one form of type "urn:TBD#delete" that can be used to
              delete &lt;http://example.com/tasks/2&gt; by making a DELETE
              request to &lt;http://example.com/tasks/2&gt;, and
            </t>
            <t>
              one form of type "urn:TBD#create" that can be used to
              create a new item in &lt;http://example.com/tasks&gt; by making a
              POST request to &lt;http://example.com/tasks&gt; with an
              "example/task" payload.
            </t>
          </list>
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Data and Interaction Model" anchor="model">

      <t>
        The Constrained RESTful Application Language (CoRAL) is designed for
        building <xref target="W3C.REC-webarch-20041215">Web-based
        applications</xref> in which automated software agents navigate between
        resources by following links and perform operations on resources by
        submitting forms.
      </t>

      <section title="Browsing Context">

        <t>
          Borrowing from <xref target="W3C.REC-html52-20171214">HTML 5</xref>,
          each such agent maintains a <spanx>browsing context</spanx> in which
          the representations of Web resources are processed. (In HTML 5, the
          browsing context typically corresponds to a tab or window in a Web
          browser.)
        </t>

        <t>
          A browsing context has a <spanx>session history</spanx> that lists the
          resource representations that the agent has processed, is processing,
          or will process. At any time, one representation in each browsing
          context is designated the <spanx>active</spanx> representation.
        </t>

        <t>
          A session history consists of a flat list of session history entries.
          Each <spanx>session history entry</spanx> consists of a resource
          representation and the <xref target="RFC3987">Internationalized
          Resource Identifier (IRI)</xref> that was used to retrieve the
          representation. An entry may additionally have other information
          associated with it. New entries are added to the session history as
          the agent navigates from resource to resource.
        </t>

      </section>

      <section title="Documents">

        <t>
          A resource representation in one of the CoRAL serialization formats is
          called a CoRAL <spanx>document</spanx>. The IRI that was used to
          retrieve such a document is called the document's <spanx>retrieval
          context</spanx>.
        </t>

        <t>
          A CoRAL document consists of a list of zero or more links, forms, and
          embedded resource representations, collectively called <spanx>elements</spanx>.
          CoRAL serialization formats may define additional types of elements
          for efficiency or convenience, such as base IRIs for relative IRI
          references.
        </t>

      </section>

      <section title="Links">

        <t>
          A <spanx>link</spanx> describes a relationship between two resources
          on the Web <xref target="RFC8288"/>. As defined in RFC 8288, it
          consists of a <spanx>link context</spanx>, a <spanx>link relation
          type</spanx>, and a <spanx>link target</spanx>. In CoRAL, a link can
          additionally have a nested list of zero or more elements, which take
          the place of link target attributes.
        </t>

        <t>
          A link can be viewed as a statement of the form "{link context} has a
          {link relation type} resource at {link target}" where the link target
          may be further described by nested elements.
        </t>

        <t>
          The link relation type identifies the semantics of a link. In HTML 5
          and the RFC 8288 Link header field, link relation types are typically
          denoted by an IANA-registered name, such as "stylesheet" or "icon". In
          CoRAL, in contrast, link relation types are denoted by an IRI or an unsigned
          integer. IRIs on the one hand allow for the creation of new, unique relation types in a
          decentralized fashion, but can incur a high overhead in terms of
          message size. Small, unsigned integers on the other hand minimize the
          overhead of link relation types in constrained environments, but
          require the assignment of values by a registry to avoid collisions.
        </t>

        <t>
          The link context and the link target are both resources on the Web.
          Resources are denoted in CoRAL either by an <xref target="RFC3987">IRI
          reference</xref> or (similarly to RDF) a literal. If the IRI scheme
          indicates a Web transfer protocol such as HTTP or CoAP, then an agent
          can dereference the IRI and navigate the browsing context to the
          referenced resource; this is called <spanx>following the link</spanx>.
          A literal directly identifies a value, which in CoRAL can be a Boolean value, an
          integer, a floating-point number, a byte string, or a text string.
        </t>

        <t>
          A link can occur as a top-level element in a document or as a nested
          element within a link. When a link occurs as a top-level element, the
          link context is implicitly the document's retrieval context. When a
          link occurs nested within a link, the link context of the inner link
          is the link target of the outer link.
        </t>

        <t>
          There are no restrictions on the cardinality of links; there can be
          multiple links to and from a particular target, and multiple links of
          the same or different types between a given link context and target.
          However, the CoRAL data model constrains the description of a
          resource graph to a tree: Links between linked resources can only be
          described by further nesting links.
        </t>

      </section>

      <section title="Forms">

        <t>
          A <spanx>form</spanx> provides instructions to an agent for performing
          an operation on a Web resource. It consists of a <spanx>form
          context</spanx>, a <spanx>form relation type</spanx>, a <spanx>request
          method</spanx>, and a <spanx>submission IRI</spanx>. Additionally, a
          form may be accompanied by <spanx>form data</spanx>.
        </t>

        <t>
          A form can be viewed as an instruction of the form "To perform a {form
          relation type} operation on {form context}, make a {request method}
          request to {submission IRI}" where the payload of the request may be
          further described by form data.
        </t>

        <t>
          The form relation type identifies the semantics of the operation. Like
          link relation types, form relation types are denoted by an IRI or an
          unsigned integer.
        </t>

        <t>
          The form context is the resource on which an operation is ultimately
          performed. To perform the operation, an agent needs to construct a request
          with the specified request method and submission IRI. The submission
          IRI typically refers to the form context, but MAY refer to another
          resource. Constructing and sending the request is called _submitting
          the form_.
        </t>

        <t>
          If a form is accompanied by form data (<xref target="form-data"/>),
          then the agent MUST also construct a payload that matches the
          specifications of the form data and include that in the request.
        </t>

        <t>
          A form can occur as a top-level element in a document or as a nested
          element within a link. When a form occurs as a top-level element, the
          form context is implicitly the document's retrieval context. When a
          form occurs nested within a link, the form context is the link target
          of the enclosing link.
        </t>

      </section>

      <section title="Form Data" anchor="form-data">

        <t>
          Form data provides instructions for agents to construct a request
          payload. It consists of a list of zero or more <spanx>form
          fields</spanx>. Each form field consists of a <spanx>form field
          name</spanx> and a <spanx>form field value</spanx>.
        </t>

        <t>
          Form fields can either directly identify data items that need to be
          included in the request payload or reference another resource (such as
          a schema) that describes the data items. Form fields may also provide
          other information, such as acceptable representation formats.
        </t>

        <t>
          The form field name identifies the semantics of the form field. Like
          link and form relation types, form field names are denoted by an IRI
          or an unsigned integer.
        </t>

        <t>
          The form field value can be an IRI, a Boolean value, an integer, a
          floating-point number, a byte string, or a text string.
        </t>

      </section>

      <section title="Embedded Representations">

        <t>
          When a document contains links to many resources and an agent needs a
          representation of each link target, it may be inefficient to retrieve
          each of these representations individually. To alleviate this,
          documents can directly embed representations of resources.
        </t>

        <t>
          An <spanx>embedded representation</spanx> consists of a sequence of
          bytes, plus <spanx>representation metadata</spanx> to describe those
          bytes.
        </t>

        <t>
          An embedded representation may be a full, partial, or inconsistent
          version of the representation served from the IRI of the represented
          resource.
        </t>

        <t>
          An embedded representation can occur as a top-level element in a
          document or as a nested element within a link. When it occurs as a
          top-level element, it provides an alternate representation of the
          document's retrieval context. When it occurs nested within a link, it
          provides a representation of link target of the enclosing link.
        </t>

      </section>

      <section title="Navigation">

        <t>
          An agent begins interacting with an application by performing a GET
          request on an <spanx>entry point IRI</spanx>. The entry point IRI is
          the only IRI an agent is expected to know before interacting with an
          application. From there, the agent is expected to make all requests by
          following links and submitting forms provided by the server in
          responses. The entry point IRI can be obtained by manual configuration
          or through some discovery process.
        </t>

        <t>
          If dereferencing the entry point IRI yields a CoRAL document or any
          other representation that implements the CoRAL data and interaction
          model, then the agent proceeds as follows:
          <list style="numbers">
            <t>
              The first step for the agent is to decide what to do next, i.e.,
              which type of link to follow or form to submit, based on the link
              relation types and form relation types it understands.
            </t>
            <t>
              The agent finds the link(s) or form(s) with the respective relation
              type in the active representation. This may yield one or more
              candidates, from which the agent must select the most appropriate
              one in the next step. The set of candidates may be empty, for
              example, when a transition is not supported or not allowed.
            </t>
            <t>
              The agent selects one of the candidates based on the metadata
              associated with the link(s) or form(s). Metadata typically
              includes the media type of the target resource representation, the
              IRI scheme, the request method, and other information that is
              provided as nested elements in a link and form data in a form.
              <vspace blankLines="1"/>
              If the selected candidate contains an embedded representation,
              then the agent MAY skip the following steps and immediately
              proceed with step <xref target="continue-with-representation"
              format="counter"/>.
            </t>
            <t>
              The agent resolves the IRI reference in the link or form
              (Section 5 of <xref target="RFC3986">RFC 3986</xref>)
              to obtain the <spanx>request IRI</spanx>. Fragment identifiers are
              not part of the request IRI and MUST be separated from the rest of
              the IRI prior to a dereference. The request IRI may need to be
              converted to a URI (Section 3.1 of <xref
              target="RFC3987">RFC 3987</xref>) for protocols that do not
              support IRIs.
            </t>
            <t>
              The agent constructs a new request with the request IRI. If the
              agent follows a link, the request method MUST be GET. If the agent
              submits a form, the request method MUST be the one specified in
              the form. The agent SHOULD set HTTP header fields and CoAP request
              options according to provided metadata (e.g., set the HTTP Accept
              header field or the CoAP Accept option when the media type of the
              target resource is provided). In case of a form with form
              data, the agent MUST also include a request payload that matches the
              specifications of the form data.
            </t>
            <t>
              The agent sends the request and receives the response.
            </t>
            <t>
              If a fragment identifier was separated from the request IRI, the
              agent dereferences the fragment identifier within the received
              representation.
            </t>
            <t anchor="continue-with-representation">
              The agent <spanx>updates the session history</spanx>: It removes
              all the entries in the browsing context's session history after
              the current entry. Then it appends a new entry at the end of the
              history representing the new resource and makes that entry the active representation.
            </t>
            <t>
              Finally, the agent processes the representation. In case of a CoRAL
              document or any other representation that implements the CoRAL
              data and interaction model, this means the agent decides again
              what to do next &mdash; and the cycle repeats.
            </t>
          </list>
        </t>

      </section>

      <section title="History Traversal">

        <t>
          An agent can navigate a browsing context also by traversing the
          browsing context's session history. An agent can <spanx>traverse the
          session history</spanx> by updating the active representation to the
          that entry.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Binary Format" anchor="binary">

      <t>
        This section defines the encoding of documents in the CoRAL binary
        format.
      </t>

      <t>
        A document in the binary format is a data item in <xref
        target="RFC7049">Concise Binary Object Representation (CBOR)</xref>. The
        structure of this data item is presented in the <xref
        target="I-D.ietf-cbor-cddl">Concise Data Definition Language
        (CDDL)</xref>. The media type is "application/coral+cbor".
      </t>

      <section title="Data Structure">

        <t>
          The data structure of a document in the binary format is made up of
          four kinds of elements: links, forms, embedded representations, and
          (as an extension to the CoRAL data model) base IRI directives. Base
          IRI directives provide a way to encode IRI references with a
          common base more efficiently.
        </t>

        <t>
          Elements are processed in the order they appear in the document.
          Document processors need to maintain an <spanx>environment</spanx>
          while iterating an array of elements. The environment consists of
          three variables: a <spanx>current context IRI</spanx>, a
          <spanx>current base IRI</spanx>, and a <spanx>current relation
          type</spanx>. The current context IRI and current base IRI are
          initially both set to the document's retrieval context. The current
          relation type is initially set to the unsigned integer zero.
        </t>

        <section title="Documents" anchor="binary-body">

          <t>
            The body of a document in the binary format is encoded as an array
            of zero or more links, forms, embedded representations, and
            directives.
            <list>
              <t>body = [*(link / form / representation / directive)]</t>
            </list>
          </t>

        </section>

        <section title="Links" anchor="binary-links">

          <t>
            A link is encoded as an array that consists of the unsigned integer
            2, followed by the link relation type and the link target,
            optionally followed by a link body that contains nested elements.
            <list>
              <t>link = [link: 2, relation, target, ?body]</t>
            </list>
          </t>

          <t>
            The link relation type is encoded either as a text string containing
            an absolute IRI reference or as an (unsigned or negative) integer
            representing the difference to the current relation type. A link is
            processed by updating the current relation type to the result of
            adding the specified integer (or zero in the case of a text string)
            to the current relation type. It is an error if the current relation
            type becomes negative.
            <list>
              <t>relation = text / int</t>
            </list>
          </t>

          <t>
            The link target is denoted by an IRI reference or represented by a
            literal value. The IRI reference MAY be relative or absolute, and
            MUST be resolved against the current base IRI. The encoding of IRI
            references in the binary format is described in <xref
            target="I-D.hartke-t2trg-ciri">RFC XXXX</xref>. The link target MAY
            be null, which indicates that the link target is an unidentified
            resource.
            <list>
              <t>target = ciri / literal / null</t>
              <t>literal = bool / int / float / bytes / text</t>
            </list>
          </t>

          <t>
            The array of elements in the link body, if any, MUST be processed in
            a fresh environment. The current context IRI and current base IRI in
            the new environment are initially both set to the link target of the
            enclosing link. The current relation type in the new environment is
            initially set to the current relation type.
          </t>

        </section>

        <section title="Forms" anchor="binary-forms">

          <t>
            A form is encoded as an array that consists of the unsigned integer
            3, followed by the form relation type, the submission method, and a
            submission IRI reference, optionally followed by form data.
            <list>
              <t>form = [form: 3, relation, method, ciri, ?form-data]</t>
            </list>
          </t>

          <t>
            The form relation type is encoded and processed in the same way as a
            link relation type (<xref target="binary-links"/>).
          </t>

          <t>
            The method MUST refer to one of the request methods defined by the
            Web transfer protocol identified by the scheme of the submission
            IRI. It is encoded either as a text string or an unsigned integer.
            <list>
              <t>method = text / uint</t>
            </list>
          </t>

          <t>
            For <xref target="RFC7230">HTTP</xref>, the method MUST be encoded
            as a text string in the format defined in Section 4.1 of <xref
            target="RFC7231">RFC 7231</xref>; the set of possible values is
            maintained in the
            IANA HTTP Method Registry. For <xref target="RFC7252">CoAP</xref>,
            the method MUST be encoded as an unsigned integer (e.g., the
            unsigned integer 2 for the POST method); the set of possible values
            is maintained in the IANA CoAP Method Codes Registry.
          </t>

          <t>
            The submission IRI reference MAY be relative or absolute, and MUST be
            resolved against the current base IRI. The encoding of IRI
            references in the binary format is described in <xref
            target="I-D.hartke-t2trg-ciri">RFC XXXX</xref>.
          </t>

          <section title="Form Data">

            <t>
              Form data is encoded as an array of zero or more name-value pairs.
              <list>
                <t>form-data = [*(form-field-name, form-field-value)]</t>
              </list>
              Form data, if any, MUST be processed in a fresh environment. The
              current context IRI and current base IRI in the new environment
              are initially both set to the submission IRI of the enclosing
              form. The current relation type in the new environment is
              initially set to the current relation type.
            </t>

            <t>
              A form field name is encoded and processed in the same way as a
              link relation type (<xref target="binary-links"/>).
              <list>
                <t>form-field-name = text / uint</t>
              </list>
            </t>

            <t>
              A form field value can be an IRI reference, a Boolean value, an
              integer, a floating-point number, a byte string, a text string, or
              null. An IRI reference MAY be relative or absolute, and MUST be
              resolved against the current base IRI. The encoding of IRI
              references in the binary format is described in <xref
              target="I-D.hartke-t2trg-ciri">RFC XXXX</xref>.
              <list>
                <t>form-field-value = ciri / bool / int / float / bytes / text / null</t>
              </list>
            </t>

          </section>

          <section title="Short Forms">

            <t>
              Forms in certain shapes can be encoded in a more efficient manner
              using short forms. The following short forms are available:
              <list>
                <t>form /= [form.create: 4, ?accept: uint .size 2]</t>
                <t>form /= [form.update: 5, ?accept: uint .size 2]</t>
                <t>form /= [form.delete: 6]</t>
                <t>form /= [form.search: 7, ?accept: uint .size 2]</t>
              </list>
            </t>

            <t>
              If the scheme of the submission IRI indicates HTTP, the short
              forms expand as follows:
            </t>

            <figure>
              <artwork>
   [4]     -&gt;  [3, "urn:TBD#create", "POST", []]
   [4, x]  -&gt;  [3, "urn:TBD#create", "POST", [],
                  ["urn:TBD#accept", x]]
   [5]     -&gt;  [3, "urn:TBD#update", "PUT", []]
   [5, x]  -&gt;  [3, "urn:TBD#update", "PUT", [],
                  ["urn:TBD#accept", x]]
   [6]     -&gt;  [3, "urn:TBD#delete", "DELETE", []]
   [7]     -&gt;  [3, "urn:TBD#search", "POST", []]
   [7, x]  -&gt;  [3, "urn:TBD#search", "POST", [],
                  ["urn:TBD#accept", x]]
              </artwork>
            </figure>

            <t>
              If the scheme of the submission IRI indicates CoAP, the short
              forms expand as follows (the only difference being the request
              methods):
            </t>

            <figure>
              <artwork>
   [4]     -&gt;  [3, "urn:TBD#create", 2, []]
   [4, x]  -&gt;  [3, "urn:TBD#create", 2, [],
                  ["urn:TBD#accept", x]]
   [5]     -&gt;  [3, "urn:TBD#update", 3, []]
   [5, x]  -&gt;  [3, "urn:TBD#update", 3, [],
                  ["urn:TBD#accept", x]]
   [6]     -&gt;  [3, "urn:TBD#delete", 4, []]
   [7]     -&gt;  [3, "urn:TBD#search", 5, []]
   [7, x]  -&gt;  [3, "urn:TBD#search", 5, [],
                  ["urn:TBD#accept", x]]
              </artwork>
            </figure>

            <t>
              The form relation types and form field names used in these
              expansions are defined in <xref target="core-vocabulary"/>.
            </t>

          </section>

        </section>

        <section title="Embedded Representations">

          <t>
            An embedded representation is encoded as an array that consists of
            the unsigned integer 0, followed by the HTTP content type or CoAP
            content format of the representation and a byte string containing
            the representation data.
            <list>
              <t>representation = [representation: 0, text / uint, bytes]</t>
            </list>
            For HTTP, the content type MUST be specified as a text string in the
            format defined in Section 3.1.1.1 of <xref target="RFC7231">RFC
            7231</xref>; the set of possible values is maintained in the IANA
            Media Types Registry. For CoAP, the content format MUST be specified
            as an unsigned integer; the set of possible values is maintained in
            the IANA CoAP Content-Formats Registry.
          </t>

        </section>

        <section title="Directives">

          <t>
            Directives provide the ability to manipulate the environment when
            processing a list of elements. There is one directive available: the
            Base IRI directive.
            <list>
              <t>directive = base-directive</t>
            </list>
          </t>

          <section title="Base IRI Directives">

            <t>
              A Base IRI directive is encoded as an array that consists of the
              negative integer -1, followed by an IRI reference.
              <list>
                <t>base-directive = [base: -1, ciri]</t>
              </list>
            </t>

            <t>
              The IRI reference MAY be relative or absolute, and MUST be resolved
              against the current context IRI. The encoding of IRI references in
              the binary format is described in <xref
              target="I-D.hartke-t2trg-ciri">RFC XXXX</xref>.
            </t>

            <t>
              The directive is processed by resolving the IRI reference against
              the current context IRI and assigning the result to the current
              base IRI.
            </t>

          </section>

        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Textual Format" anchor="textual">

      <t>
        This section defines the syntax of documents in the CoRAL textual format
        using two grammars: The lexical grammar defines how Unicode characters
        are combined to form line terminators, white space, comments, and
        tokens. The syntactic grammar defines how the tokens are combined to
        form documents. Both grammars are presented in <xref
        target="RFC5234">Augmented Backus-Naur Form (ABNF)</xref>.
      </t>

      <t>
        A document in the textual format is a Unicode string in a Unicode
        encoding form <xref target="UNICODE"/>. The media type for such
        documents is "text/coral". The "charset" parameter is not used; charset
        information is transported inside the document in the form of an
        OPTIONAL Byte Order Mark (BOM). The use of the <xref
        target="RFC3629">UTF-8 encoding scheme</xref>, without a BOM, is
        RECOMMENDED.
      </t>

      <section title="Lexical Structure">

        <t>
          The lexical structure of a document in the textual format is made up
          of four basic elements: line terminators, white space, comments, and
          tokens. Of these, only tokens are significant in the syntactic
          grammar. There are four kinds of tokens: identifiers, IRI references,
          literals, and punctuators.
        </t>

        <t>
          When several lexical grammar rules match a sequence of characters in a
          document, the longest match takes priority.
        </t>

        <section title="Line Terminators">

          <t>
            Line terminators divide text into lines. A line terminator is any
            Unicode character with Line_Break class BK, CR, LF, or NL. However,
            any CR character that immediately precedes a LF character is
            ignored. (This affects only the numbering of lines in error
            messages.)
          </t>

        </section>

        <section title="White Space">

          <t>
            White space is a sequence of one or more white space characters. A
            white space character is any Unicode character with the White_Space
            property.
          </t>

        </section>

        <section title="Comments">

          <t>
            Comments are sequences of characters that are ignored when parsing
            text into tokens. Single-line comments begin with the characters
            "//" and extend to the end of the line. Delimited comments begin
            with the characters "/*" and end with the characters "*/". Delimited
            comments can occupy a portion of a line, a single line, or multiple
            lines.
          </t>

          <t>
            Comments do not nest. The character sequences "/*" and "*/" have no
            special meaning within a single-line comment; the character
            sequences "//" and "/*" have no special meaning within a delimited
            comment.
          </t>

        </section>

        <section title="Identifiers">

          <t>
            An identifier tokens is a user-defined symbolic name. The rules for
            identifiers correspond to those recommended by the <xref
            target="UNICODE-UAX31">Unicode Standard Annex #31</xref> using the
            following profile:
            <list>
              <t>identifier = start *continue *(medial 1*continue)</t>
              <t>start = &lt;Any character with the XID_Start property&gt;</t>
              <t>continue = &lt;Any character with the XID_Continue property&gt;</t>
              <t>medial = "-" / "." / "~" / %xB7 / %x58A / %xF0B</t>
              <t>medial =/ %x2010 / %x2027 / %x30A0 / %x30FB</t>
            </list>
          </t>

          <t>
            All identifiers MUST be converted into Unicode Normalization Form C
            (NFC), as defined by the <xref target="UNICODE-UAX15">Unicode
            Standard Annex #15</xref>. Comparison of identifiers is based on NFC
            and is case-sensitive (unless otherwise noted).
          </t>

        </section>

        <section title="IRI References">

          <t>
            An IRI reference is a Unicode string that conforms to the syntax
            defined in <xref target="RFC3987">RFC 3987</xref>. An IRI reference
            can be absolute or relative, and can contain a fragment identifier.
            IRI references are enclosed in angle brackets ("&lt;" and "&gt;").
            <list>
              <t>iri = "&lt;" IRI-reference "&gt;"</t>
              <t>IRI-reference = &lt;Defined in Section 2.2 of RFC 3987&gt;</t>
            </list>
          </t>

        </section>

        <section title="Literals">

          <t>
            A literal is a textual representation of a value. There are six
            types of literals: Boolean, integer, floating-point, byte string,
            text string, and null.
          </t>

          <section title="Boolean Literals">

            <t>
              The case-insensitive tokens "true" and "false" denote the Boolean
              values true and false, respectively.
              <list>
                <t>boolean = "true" / "false"</t>
              </list>
            </t>

          </section>

          <section title="Integer Literals">

            <t>
              Integer literals denote integer values of unspecified precision.
              By default, integer literals are expressed in decimal, but they
              can also be specified in an alternate base using a prefix. Binary
              literals begin with "0b", octal literals begin with "0o", and
              hexadecimal literals begin with "0x".
            </t>

            <t>
              Decimal literals contain the digits "0" through "9". Binary
              literals contain "0" and "1", octal literals contain "0" through
              "7", and hexadecimal literals contain "0" through "9" as well as
              "A" through "F" in upper- or lowercase.
            </t>

            <t>
              Negative integers are expressed by prepending a minus sign ("-").
              <list>
                <t>integer = ["+" / "-"] (decimal / binary / octal / hexadecimal)</t>
                <t>decimal = 1*DIGIT</t>
                <t>binary = %x30 (%x42 / %x62) 1*BINDIG</t>
                <t>octal = %x30 (%x4F / %x6F) 1*OCTDIG</t>
                <t>hexadecimal = %x30 (%x58 / %x78) 1*HEXDIG</t>
                <t>DIGIT = %x30-39</t>
                <t>BINDIG = %x30-31</t>
                <t>OCTDIG = %x30-37</t>
                <t>HEXDIG = %x30-39 / %x41-46 / %x61-66</t>
              </list>
            </t>

          </section>

          <section title="Floating-point Literals">

            <t>
              Floating-point literals denote floating-point numbers of
              unspecified precision.
            </t>

            <t>
              Floating-point literals consist of a sequence of decimal digits
              followed by a fraction, an exponent, or both. The fraction
              consists of a decimal point (".") followed by a sequence of
              decimal digits. The exponent consists of the letter "e" in upper-
              or lowercase, followed by an optional sign and a sequence of
              decimal digits that indicate a power of 10 by which the value
              preceding the "e" is multiplied.
            </t>

            <t>
              Negative floating-point values are expressed by prepending a minus
              sign ("-").
              <list>
                <t>floating-point = ["+" / "-"] 1*DIGIT [fraction] [exponent]</t>
                <t>fraction = "." 1*DIGIT</t>
                <t>exponent = (%x45 / %x65) ["+" / "-"] 1*DIGIT</t>
              </list>
            </t>

            <t>
              Floating-point literals can additionally denote the special
              "Not-a-Number" (NaN) value, positive infinity, and negative
              infinity. The NaN value is produced by the case-insensitive token
              "NaN". The two infinite values are produced by the
              case-insensitive tokens "+Infinity" (or simply "Infinity") and
              "-Infinity".
              <list>
                <t>floating-point =/ "NaN"</t>
                <t>floating-point =/ ["+" / "-"] "Infinity"</t>
              </list>
            </t>

          </section>

          <section title="Byte String Literals">

            <t>
              A byte string literal consists of a prefix and zero or more bytes
              encoded in <xref target="RFC4648">Base16, Base32, or Base64</xref>
              and enclosed in single quotes. Byte string literals encoded in
              Base16 begin with "h" or "b16", byte string literals encoded in
              Base32 begin with "b32", and byte string literals encoded in
              Base64 begin with "b64".
              <list>
                <t>bytes = base16 / base32 / base64</t>
                <t>base16 = (%x68 / %x62.31.36) SQUOTE &lt;Base16 encoded data&gt; SQUOTE</t>
                <t>base32 = %x62.33.32 SQUOTE &lt;Base32 encoded data&gt; SQUOTE</t>
                <t>base64 = %x62.36.34 SQUOTE &lt;Base64 encoded data&gt; SQUOTE</t>
                <t>SQUOTE = %x27</t>
              </list>
            </t>

          </section>

          <section title="Text String Literals">

            <t>
              A text string literal consists of zero or more Unicode characters
              enclosed in double quotes. It can include simple escape sequences
              (such as \t for the tab character) as well as hexadecimal and
              Unicode escape sequences.
              <list>
                <t>text = DQUOTE *(char / %x5C escape) DQUOTE</t>
                <t>char = &lt;Any character except %x22, %x5C, and line terminators&gt;</t>
                <t>escape = simple-escape / hexadecimal-escape / unicode-escape</t>
                <t>simple-escape = %x30 / %x62 / %x74 / %x6E / %x76</t>
                <t>simple-escape =/ %x66 / %x72 / %x22 / %x27 / %x5C</t>
                <t>hexadecimal-escape = (%x78 / %x58) 2HEXDIG</t>
                <t>unicode-escape = %x75 4HEXDIG / %x55 8HEXDIG</t>
                <t>DQUOTE = %x22</t>
              </list>
            </t>

            <t>
              An escape sequence denotes a single Unicode code point. For
              hexadecimal and Unicode escape sequences, the code point is
              expressed by the hexadecimal number following the "\x", "\X",
              "\u", or "\U" prefix. Simple escape sequences indicate the code
              points listed in <xref target="escape"/>.
            </t>

            <texttable title="Simple Escape Sequences" anchor="escape">
              <ttcol align="center">Escape Sequence</ttcol>
              <ttcol align="center">Code Point</ttcol>
              <ttcol align="left">Character Name</ttcol>

              <c>\0</c>
              <c>U+0000</c>
              <c>Null</c>
              <c>\b</c>
              <c>U+0008</c>
              <c>Backspace</c>
              <c>\t</c>
              <c>U+0009</c>
              <c>Character Tabulation</c>
              <c>\n</c>
              <c>U+000A</c>
              <c>Line Feed</c>
              <c>\v</c>
              <c>U+000B</c>
              <c>Line Tabulation</c>
              <c>\f</c>
              <c>U+000C</c>
              <c>Form Feed</c>
              <c>\r</c>
              <c>U+000D</c>
              <c>Carriage Return</c>
              <c>\"</c>
              <c>U+0022</c>
              <c>Quotation Mark</c>
              <c>\'</c>
              <c>U+0027</c>
              <c>Apostrophe</c>
              <c>\\</c>
              <c>U+005C</c>
              <c>Reverse Solidus</c>
            </texttable>

          </section>

          <section title="Null Literal">

            <t>
              The case-insensitive tokens "null" and "_" denote the intentional
              absence of any value.
              <list>
                <t>null = "null" / "_"</t>
              </list>
            </t>

          </section>

        </section>

        <section title="Punctuators">

          <t>
            Punctuator tokens are used for grouping and separating.
            <list>
              <t>punctuator = "#" | ":" | "*" | "[" | "]" | "{" | "}" | "=" | "->"</t>
            </list>
          </t>

        </section>

      </section>

      <section title="Syntactic Structure">

        <t>
          The syntactic structure of a document in the textual format is made up
          of four kinds of elements: links, forms, embedded representations, and
          (as an extension to the CoRAL data model) directives. Directives
          provide a way to make documents easier to read and write by defining
          base IRIs for relative IRI references and introducing shorthands for
          IRIs.
        </t>

        <t>
          Elements are processed in the order they appear in the document.
          Document processors need to maintain an <spanx>environment</spanx>
          while iterating a list of elements. The environment consists of three
          variables: a <spanx>current context IRI</spanx>, a <spanx>current base
          IRI</spanx>, and a <spanx>current mapping from identifiers to
          IRIs</spanx>. The current context IRI and current base IRI are
          initially both set to the document's retrieval context. The current
          mapping from identifiers to IRIs is initially empty.
        </t>

        <section title="Documents">

          <t>
            The body of a document in the textual format consists of zero or
            more links, forms, and directives.
            <list>
              <t>body = *(link / form / representation / directive)</t>
            </list>
          </t>

        </section>

        <section title="Links" anchor="textual-links">

          <t>
            A link consists of the link relation type, followed by the link
            target, optionally followed by a link body enclosed in curly
            brackets ("{" and "}").
            <list>
              <t>link = relation target ["{" body "}"]</t>
            </list>
          </t>

          <t>
            The link relation type is denoted either by an absolute IRI
            reference, a simple name, a qualified name, or an integer.
            <list>
              <t>relation = iri / simple-name / qualified-name / integer</t>
            </list>
          </t>

          <t>
            A simple name consists of an identifier. It is resolved to an IRI by
            looking up the empty string in the current mapping from identifiers
            to IRIs and appending the specified identifier to the result. It is
            an error if the empty string is not present in the mapping.
            <list>
              <t>simple-name = identifier</t>
            </list>
            A qualified name consists of two identifiers separated by a colon
            (":"). It is resolved to an IRI by looking up the identifier on the
            left hand side in the current mapping from identifiers to IRIs and
            appending the identifier on the right hand side to the result. It is
            an error if the identifier on the left hand side is not present in
            the mapping.
            <list>
              <t>qualified-name = identifier ":" identifier</t>
            </list>
          </t>

          <t>
            The link target is denoted by an IRI reference or represented by a
            value literal. The IRI reference MAY be relative or absolute, and
            MUST be resolved against the current base IRI. If the link target is
            null, the link target is an unidentified resource.
            <list>
              <t>target = iri / literal / null</t>
              <t>literal = boolean / integer / floating-point / bytes / text</t>
            </list>
          </t>

          <t>
            The list of elements in the link body, if any, MUST be processed in
            a fresh environment. The current context IRI and current base IRI in
            this environment are initially both set to the link target of the
            enclosing link. The mapping from identifiers to IRIs is initially
            set to a copy of the mapping from identifiers to IRIs in the current
            environment.
          </t>

        </section>

        <section title="Forms">

          <t>
            A form consists of the form relation type, followed by a "->" token,
            a method identifier, and a submission IRI reference, optionally
            followed by form data enclosed in square brackets ("[" and "]").
            <list>
              <t>form = relation "->" method iri ["[" form-data "]"]</t>
            </list>
          </t>

          <t>
            The form relation type is denoted in the same way as a link relation
            type (<xref target="textual-links"/>).
          </t>

          <t>
            The method identifier refers to one of the request methods defined
            by the Web transfer protocol identified by the scheme of the
            submission IRI. Method identifiers are case-insensitive and
            constrained to Unicode characters in the Basic Latin block.
            <list>
              <t>method = identifier</t>
            </list>
            For <xref target="RFC7230">HTTP</xref>, the set of possible method
            identifiers is maintained in the IANA HTTP Method Registry. For
            <xref target="RFC7252">CoAP</xref>, the set of possible method
            identifiers is maintained in the IANA CoAP Method Codes Registry.
          </t>

          <t>
            The submission IRI reference MAY be relative or absolute, and MUST be
            resolved against the current base IRI.
          </t>

          <section title="Form Data">

            <t>
              Form data consists of zero or more name-value pairs.
              <list>
                <t>form-data = *(form-field-name form-field-value)</t>
              </list>
            </t>

            <t>
              Form data, if any, MUST be processed in a fresh environment. The current
              context IRI and current base IRI in this environment are initially
              both set to the submission IRI of the enclosing form. The mapping
              from identifiers to IRIs is initially set to a copy of the mapping
              from identifiers to IRIs in the current environment.
            </t>

            <t>
              The form field name is denoted in the same way as a link relation
              type (<xref target="textual-links"/>).
              <list>
                <t>form-field-name = iri / simple-name / qualified-name / integer</t>
              </list>
            </t>

            <t>
              The form field value can be an IRI reference, Boolean literal,
              integer literal, floating-point literal, byte string literal, text
              string literal, or null. An IRI reference MAY be relative or
              absolute, and MUST be resolved against the current base IRI.
              <list>
                <t>form-field-value = iri / boolean / integer</t>
                <t>form-field-value =/ floating-point / bytes / text / null</t>
              </list>
            </t>

          </section>

        </section>

        <section title="Embedded Representations">

          <t>
            An embedded representation consists of a "*" token, followed by the
            representation data, optionally followed by representation metadata
            enclosed in square brackets ("[" and "]").
            <list>
              <t>representation = "*" bytes ["[" representation-metadata "]"]</t>
            </list>
          </t>

          <t>
            Representation metadata consists of zero or more name-value pairs.
            <list>
              <t>representation-metadata = *(metadata-name metadata-value)</t>
            </list>
          </t>

          <t>
            This document specifies only one kind of metadata item, labeled with
            the name "type": the HTTP content type or CoAP content format of the
            representation.
            <list>
              <t>metadata-name = "type"</t>
              <t>metadata-value = text / integer</t>
            </list>
            For HTTP, the content type MUST be specified as a text string in the
            format defined in Section 3.1.1.1 of <xref target="RFC7231">RFC
            7231</xref>; the set of possible values is maintained in the IANA
            Media Types Registry. For CoAP, the content format MUST be specified
            as an integer; the set of possible values is maintained in
            the IANA CoAP Content-Formats Registry.
          </t>

          <t>
            A metadata item with the name "type" MUST NOT occur more than once.
            If absent, its value defaults to content type
            "application/octet-stream" or content format 42.
          </t>

        </section>

        <section title="Directives">

          <t>
            Directives provide the ability to manipulate the environment when
            processing a list of elements. All directives start with a number
            sign ("#") followed by a directive identifier. Directive identifiers
            are case-insensitive and constrained to Unicode characters in the
            Basic Latin block.
          </t>

          <t>
            The following directives are available: Base IRI directives and
            Using directives.
            <list>
              <t>directive = base-directive / using-directive</t>
            </list>
          </t>

          <section title="Base IRI Directives">

            <t>
              A Base IRI directive consists of a number sign ("#"), followed by
              the case-insensitive identifier "base", followed by an IRI
              reference.
              <list>
                <t>base-directive = "#" "base" iri</t>
              </list>
              The IRI reference MAY be relative or absolute, and MUST be resolved
              against the current context IRI.
            </t>

            <t>
              The directive is processed by resolving the IRI reference against
              the current context IRI and assigning the result to the current
              base IRI.
            </t>

          </section>

          <section title="Using Directives">

            <t>
              A Using directive consists of a number sign ("#"), followed by the
              case-insensitive identifier "using", optionally followed by an
              identifier and an equals sign ("="), finally followed by an
              absolute IRI reference. If the identifier is not specified, it is
              assumed to be the empty string.
              <list>
                <t>using-directive = "#" "using" [identifier "="] iri</t>
              </list>
              The IRI reference MUST be absolute.
            </t>

            <t>
              The directive is processed by adding the specified identifier and
              IRI to the current mapping from identifiers to IRIs. It is an
              error if the identifier is already present in the mapping.
            </t>

          </section>

        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Usage Considerations">

      <t>
        This section discusses some considerations in creating CoRAL-based
        applications and managing link and form relation types.
      </t>

      <section title="Specifying CoRAL-based Applications">

        <t>
          CoRAL-based applications naturally implement the <xref
          target="W3C.REC-webarch-20041215">Web architecture</xref> and thus are
          centered around orthogonal specifications for identification,
          interaction, and representation:
          <list style="symbols">
            <t hangText="Identification:">
              Resources are identified by IRIs or represented by value literals.
            </t>
            <t hangText="Interaction:">
              Interactions are based on the hypermedia interaction model of the
              Web and the methods provided by the Web transfer protocol. The
              semantics of possible interactions are identified by link and form
              relation types.
            </t>
            <t hangText="Representation:">
              Representations are CoRAL documents encoded in the binary format
              defined in <xref target="binary"/> or the textual format defined
              in <xref target="textual"/>. Depending on the application,
              additional representation formats may be used.
            </t>
          </list>
        </t>

        <t>
          Specifications for CoRAL-based applications need to list the specific
          components used in the application and their identifiers. This SHOULD
          include at least the following items:
          <list style="symbols">
            <t hangText="URI Schemes:">
              IRI schemes that identify the Web transfer protocol(s) used in the
              application.
            </t>
            <t hangText="Media Types:">
              Internet media types that identify the representation format(s)
              used in the application, including the media type(s) of the CoRAL
              serialization format(s).
            </t>
            <t hangText="Link Relation Types:">
              Link relation types that identify the semantics of links.
            </t>
            <t hangText="Form Relation Types:">
              Form relation types that identify the semantics of forms.
              Additionally, for each form relation type, the permissible request
              method(s).
            </t>
            <t hangText="Form Field Names:">
              Form field names that identify the semantics of form fields.
              Additionally, for each form field name, the permissible form field
              value(s) or type(s).
            </t>
          </list>
        </t>

        <section title="Naming Resources">

          <t>
            Resource names -- <xref target="RFC3986">URIs</xref> and <xref
            target="RFC3987">IRIs</xref> -- are a cornerstone of Web-based
            applications. They enable the uniform identification of resources and
            are used every time a client interacts with a server or a resource
            representation needs to refer to another resource.
          </t>

          <t>
            URIs and IRIs often include structured application data in the path
            and query components, such as paths in a filesystem or keys in a
            database. It is a common practice in many HTTP-based applications to
            make this part of the application specification, i.e., to
            prescribe fixed URI templates that are hard-coded in
            implementations. There are, however, a number of problems with this
            practice <xref target="RFC7320"/>.
          </t>

          <t>
            In CoRAL-based applications, resource names are not part of the
            application specification; they are an implementation detail. The
            specification of a CoRAL-based application MUST NOT mandate any
            particular form of resource name structure. <xref
            target="RFC7320">BCP 190</xref> describes the problematic practice
            of fixed URI structures in more detail and provides some acceptable
            alternatives.
          </t>

          <!--
          <t>
            Nevertheless, the design of the URI structure on a server is an
            essential part of implementing a CoRAL-based application, even
            though it is not part of the application interface. A good URI is:
            <list style="symbols">
              <t>
                Short. Short URIs are easier to remember and cause less overhead
                in requests and representations.
              </t>
              <t>
                Meaningful. A URI should describe the resource in a way that is
                meaningful and useful to humans.
              </t>
              <t>
                Consistent. URIs should follow a consistent pattern to make it
                easy to reason about the application.
              </t>
              <t>
                Bookmarkable. Cool URIs don't change <xref target="COOLURI"/>.
                However, in practice, application resource structures do change.
                That should cause URIs to change as well so they better reflect
                reality. Implementations SHOULD NOT depend on unchanging URIs.
              </t>
              <t>
                Shareable. A URI should not be context sensitive, e.g., to the
                currently logged-in user. It should be possible to share a URI
                with third parties so they can access the same resource.
              </t>
              <t>
                Extension-less. Some applications return different data for
                different extensions, e.g., for
                &lt;http://example.com/data.xml&gt; and
                &lt;http://example.com/data.json&gt;. Instead, different
                representations of a resource SHOULD be negotiated, e.g., using
                the HTTP Accept header field or the CoAP Accept option.
              </t>
            </list>
          </t>
          -->

        </section>

        <section title="Implementation Limits">

          <t>
            This document places no restrictions on the number of elements in a
            CoRAL document or the depth of nested elements. Applications using
            CoRAL (in particular those running in constrained environments) MAY
            wish to limit these numbers and specify implementation limits that
            an application implementation must at least support to be
            interoperable.
          </t>

          <t>
            Applications MAY also mandate the following and other restrictions:
            <list style="symbols">
              <t>
                use of only either the binary format or the text format;
              </t>
              <t>
                use of only either HTTP or CoAP as supported Web transfer
                protocol;
              </t>
              <t>
                use of only either IRIs or unsigned integers to denote link
                relation types, form relation types, and form field names;
              </t>
              <t>
                use of only either short forms or long forms in the binary
                format;
              </t>
              <t>
                use of only either HTTP content types or CoAP content formats;
              </t>
              <t>
                use of IRI references only up to a specific length;
              </t>
              <t>
                use of CBOR in a canonical format (Section 3.9 of <xref
                target="RFC7049">RFC 7049</xref>).
              </t>
            </list>
          </t>

        </section>

      </section>

      <section title="Minting New Relation Types">

        <t>
          New link relation types, form relation types, and form field names can
          be minted by defining an <xref target="RFC3987">IRI</xref> that
          uniquely identifies the item. Although the IRI can point to a resource
          that contains a definition of the semantics of the relation type,
          clients SHOULD NOT automatically access that resource to avoid
          overburdening its server. The IRI SHOULD be under the control of the
          person or party defining it, or be delegated to them.
        </t>

        <t>
          Link relation types registered in the IANA Link Relations Registry,
          such as <xref target="RFC6573">"collection"</xref> or <xref
          target="W3C.REC-html52-20171214">"icon"</xref>, can be used in CoRAL
          by appending the registered name to the IRI
          &lt;http://www.iana.org/assignments/relation/&gt;:
        </t>

        <figure>
          <artwork>
   #using iana = &lt;http://www.iana.org/assignments/relation/&gt;

   iana:collection &lt;/items&gt;
   iana:icon       &lt;/favicon.png&gt;
          </artwork>
        </figure>

        <t>
          A good source for link relation types for resource metadata are <xref
          target="W3C.REC-rdf11-concepts-20140225">RDF predicates</xref>. An RDF
          statement says that some relationship, indicated by a predicate, holds
          between two resources. RDF predicates and link relation types can
          therefore often be used interchangeably. For example, a CoRAL document
          could describe its creator by using the <xref target="FOAF">FOAF
          vocabulary</xref>:
        </t>

        <figure>
          <artwork>
   #using iana = &lt;http://www.iana.org/assignments/relation/&gt;
   #using foaf = &lt;http://xmlns.com/foaf/0.1/&gt;

   foaf:maker _ {
      iana:type       &lt;http://xmlns.com/foaf/0.1/Person&gt;
      foaf:familyName "Hartke"
      foaf:givenName  "Klaus"
      foaf:mbox       &lt;mailto:klaus.hartke@ericsson.com&gt;
   }
          </artwork>
        </figure>

      </section>

      <section title="Registering Relation Types" anchor="registering">

        <t>
          IRIs that identify link relation types, form relation types, and form
          field names do not need to be registered. The inclusion of DNS names
          in IRIs allows for the decentralized creation of new IRIs without the
          risk of collisions.
        </t>

        <t>
          However, IRIs can be relatively verbose and impose a high overhead on
          representations. This can be a problem in <xref
          target="RFC7228">constrained environments</xref>. Therefore, CoRAL
          alternatively allows the use of unsigned integers to identify link
          relation types, form relation types, and form field names. These
          impose a much smaller overhead but instead need to be assigned by a
          registry to avoid collisions.
        </t>

        <t>
          This document does not create a registry for such integers. Instead,
          the media types for CoRAL documents in the binary and textual format
          are defined to have a <xref target="RFC6906">"profile"
          parameter</xref> that determines the registry in use. The registry is
          identified by a <xref target="RFC3986">URI</xref>. For example, a
          CoRAL document that uses the registry identified by the URI
          &lt;http://example.com/registry&gt; can use the following media type:
          <list>
            <t>application/coral+cbor; profile="http://example.com/registry"</t>
          </list>
          The URI serves only as an identifier; it does not necessarily have to
          be dereferencable (or even use a dereferencable URI scheme). It is
          permissible, though, to use a dereferencable URI and to serve a
          representation that provides information about the registry in a
          human- or machine-readable way. (The format of such a representation
          is outside the scope of this document.)
        </t>

        <t>
          For simplicity, a CoRAL document can use unsigned integers from only
          one registry. The "profile" parameter of the CoRAL media types
          MUST contain a single URI, not a white space separated list of URIs as
          recommended by <xref target="RFC6906">RFC 6906</xref>. If the
          "profile" parameter is absent, the default profile specified in <xref
          target="default-profile"/> of this document is assumed.
        </t>

        <t>
          A CoRAL registry SHOULD map each unsigned integer to a full IRI that
          identifies a link relation type, form relation type, or form field
          name.
          Once
          an integer has been assigned, the assignment MUST NOT be changed or
          removed. A registry MAY provide additional information about an
          assignment that MAY change over time.
        </t>

        <t>
          In <xref target="RFC7252">CoAP</xref>, media types (including specific
          values for their parameters) are encoded as an unsigned integer
          called the <spanx>content format</spanx>. For use with CoAP, each CoRAL registry
          needs to register a new content format in the IANA CoAP
          Content-Formats Registry. Each such registered content format MUST
          specify a CoRAL media type with a "profile" parameter that contains
          the registry URI.
        </t>

      </section>

      <section title="Expressing Link Target Attributes">

        <t>
          Link target attributes defined for use with <xref
          target="RFC6690">CoRE Link Format</xref> (such as "type", "hreflang",
          "media", "ct", "rt", "if", "sz", and "obs") can be expressed in CoRAL by
          nesting links under the respective link and specifying the attribute
          name appended to the IRI &lt;http://TBD/&gt; as the link relation
          type.
        </t>

        <t>
          If the expressed link target attribute has a value, the target of the
          nested link MUST be a text string; otherwise, the target MUST be the
          Boolean value "true":
        </t>

        <figure>
          <artwork>
   #using iana = &lt;http://www.iana.org/assignments/relation/&gt;
   #using attr = &lt;http://TBD/&gt;

   iana:item &lt;/patches/1&gt; {
      attr:type "application/json-patch+json"
      attr:ct   "51"
      attr:sz   "247"
      attr:obs  true
   }
          </artwork>
        </figure>

        <t>
          [[NOTE TO RFC EDITOR: Please replace all occurrences of "http://TBD/"
          in this document with an IETF-controlled IRI, such as "urn:ietf:..."
          or "http://...ietf.org/...".]]
        </t>

        <t>
          Link target attributes that do not actually describe the link target
          but the link itself (such as "rel", "anchor", "rev", "title", and
          "title*") are excluded from this provision and MUST NOT occur in a
          CoRAL document.
        </t>

      </section>

      <section title="Embedding CoRAL in CBOR Structures">

        <t>
          Data items in the CoRAL binary format (<xref target="binary"/>) MAY be
          embedded in other <xref target="RFC7049">CBOR</xref> data structures.
          Specifications using <xref target="I-D.ietf-cbor-cddl">CDDL</xref>
          SHOULD reference the following CDDL definitions for this purpose:
          <list>
            <t>CoRAL-Body = body</t>
            <t>CoRAL-Link = link</t>
            <t>CoRAL-Form = form</t>
          </list>
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Security Considerations" anchor="security">

      <t>
        Parsers of CoRAL documents must operate on input that is assumed to be
        untrusted. This means that parsers MUST fail gracefully in the face of
        malicious inputs. Additionally, parsers MUST be prepared to deal with
        resource exhaustion (e.g., resulting from the allocation of big data
        items) or exhaustion of the call stack (stack overflow). See Section 8
        of <xref target="RFC7049">RFC 7049</xref> for security considerations
        relating to parsing CBOR.
      </t>

      <t>
        Implementers of the CoRAL textual format need to consider the security
        aspects of handling Unicode input. See the <xref
        target="UNICODE-UAX36">Unicode Standard Annex #36</xref> for security
        considerations relating to visual spoofing and misuse of character
        encodings. See Section 10 of <xref target="RFC3629">RFC 3629</xref> for
        security considerations relating to UTF-8.
      </t>

      <t>
        CoRAL makes extensive use of IRIs and URIs. See Section 8 of <xref
        target="RFC3987">RFC 3987</xref> for security considerations relating to
        IRIs. See Section 7 of <xref target="RFC3986">RFC 3986</xref> for
        security considerations relating to URIs.
      </t>

      <t>
        The security of applications using CoRAL can depend on the proper
        preparation and comparison of internationalized strings. For example,
        such strings can be used to make authentication and authorization
        decisions, and the security of an application could be compromised if an
        entity providing a given string is connected to the wrong account or
        online resource based on different interpretations of the string. See
        <xref target="RFC6943">RFC 6943</xref> for security considerations
        relating to identifiers in IRIs and other locations.
      </t>

      <t>
        CoRAL is intended to be used in conjunction with a Web transfer protocol
        like HTTP or CoAP. See Section 9 of <xref target="RFC7230">RFC
        7320</xref>, Section 9 of <xref target="RFC7231">RFC 7231</xref>, etc.,
        for security considerations relating to HTTP. See Section 11 of <xref
        target="RFC7252">RFC 7252</xref> for security considerations relating to
        CoAP.
      </t>

      <t>
        CoRAL does not define any specific mechanisms for protecting the
        confidentiality and integrity of CoRAL documents. It relies on
        application layer or transport layer mechanisms for this, such as <xref
        target="RFC8446">Transport Layer Security (TLS)</xref>.
      </t>

      <t>
        CoRAL documents and the structure of a web of resources revealed from
        automatically following links can disclose personal information and
        other sensitive information. Implementations need to prevent the
        unintentional disclosure of such information. See Section of 9 of <xref
        target="RFC7231">RFC 7231</xref> for additional considerations.
      </t>

      <t>
        Applications using CoRAL ought to consider the attack vectors opened by
        automatically following, trusting, or otherwise using links and forms in
        CoRAL documents. In particular, a server that is authoritative for the
        CoRAL representation of a resource may not necessarily be authoritative
        for elements nested inside the top level links in the document.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="IANA Considerations">

      <section title="Media Type &quot;application/coral+cbor&quot;">

        <t>
          This document registers the media type
          &quot;application/coral+cbor&quot; according to the procedures of
          <xref target="RFC6838">BCP 13</xref>.
          <list style="hanging">
            <t hangText="Type name:">
              <vspace/>application
            </t>
            <t hangText="Subtype name:">
              <vspace/>coral+cbor
            </t>
            <t hangText="Required parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Optional parameters:">
              <vspace/>profile - See <xref target="registering"/> of &SELF;.
            </t>
            <t hangText="Encoding considerations:">
              <vspace/>binary - See <xref target="binary"/> of &SELF;.
            </t>
            <t hangText="Security considerations:">
              <vspace/>See <xref target="security"/> of &SELF;.
            </t>
            <t hangText="Interoperability considerations:">
              <vspace/>N/A
            </t>
            <t hangText="Published specification:">
              <vspace/>&SELF;
            </t>
            <t hangText="Applications that use this media type:">
              <vspace/>See <xref target="introduction"/> of &SELF;.
            </t>
            <t hangText="Fragment identifier considerations:">
              <vspace/>As specified for "application/cbor".
            </t>
            <t hangText="Additional information:">
              <vspace/>Deprecated alias names for this type: N/A
              <vspace/>Magic number(s): N/A
              <vspace/>File extension(s): N/A
              <vspace/>Macintosh file type code(s): N/A
            </t>
            <t hangText="Person &amp; email address to contact for further information:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Intended usage:">
              <vspace/>COMMON
            </t>
            <t hangText="Restrictions on usage:">
              <vspace/>N/A
            </t>
            <t hangText="Author:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Change controller:">
              <vspace/>IESG
            </t>
            <t hangText="Provisional registration?">
              <vspace/>No
            </t>
          </list>
        </t>

      </section>

      <section title="Media Type &quot;text/coral&quot;">

        <t>
          This document registers the media type &quot;text/coral&quot;
          according to the procedures of <xref target="RFC6838">BCP 13</xref>
          and guidelines in <xref target="RFC6657">RFC 6657</xref>.
          <list style="hanging">
            <t hangText="Type name:">
              <vspace/>text
            </t>
            <t hangText="Subtype name:">
              <vspace/>coral
            </t>
            <t hangText="Required parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Optional parameters:">
              <vspace/>profile - See <xref target="registering"/> of &SELF;.
            </t>
            <t hangText="Encoding considerations:">
              <vspace/>binary - See <xref target="textual"/> of &SELF;.
            </t>
            <t hangText="Security considerations:">
              <vspace/>See <xref target="security"/> of &SELF;.
            </t>
            <t hangText="Interoperability considerations:">
              <vspace/>N/A
            </t>
            <t hangText="Published specification:">
              <vspace/>&SELF;
            </t>
            <t hangText="Applications that use this media type:">
              <vspace/>See <xref target="introduction"/> of &SELF;.
            </t>
            <t hangText="Fragment identifier considerations:">
              <vspace/>N/A
            </t>
            <t hangText="Additional information:">
              <vspace/>Deprecated alias names for this type: N/A
              <vspace/>Magic number(s): N/A
              <vspace/>File extension(s): .coral
              <vspace/>Macintosh file type code(s): TEXT
            </t>
            <t hangText="Person &amp; email address to contact for further information:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Intended usage:">
              <vspace/>COMMON
            </t>
            <t hangText="Restrictions on usage:">
              <vspace/>N/A
            </t>
            <t hangText="Author:">
              <vspace/>See the Author's Address section of &SELF;.
            </t>
            <t hangText="Change controller:">
              <vspace/>IESG
            </t>
            <t hangText="Provisional registration?">
              <vspace/>No
            </t>
          </list>
        </t>

      </section>

      <section title="CoAP Content Formats">

        <t>
          This document registers CoAP content formats for the media types
          &quot;application/coral+cbor&quot; and &quot;text/coral&quot;
          according to the procedures of <xref target="RFC7252">RFC 7252</xref>.
          <list style="symbols">
            <t>
              Media Type: application/coral+cbor<vspace/>
              Content Coding: identity<vspace/>
              ID: TBD (maybe 63)<vspace/>
              Reference: &SELF;
            </t>
            <t>
              Media Type: text/coral<vspace/>
              Content Coding: identity<vspace/>
              ID: TBD (maybe 10063)<vspace/>
              Reference: &SELF;
            </t>
          </list>
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">

      <reference anchor="I-D.hartke-t2trg-ciri">
        <front>
          <title>Constrained Internationalized Resource Identifiers</title>
          <author initials="K." surname="Hartke" fullname="Klaus Hartke">
            <organization/>
          </author>
          <date month="October" day="22" year="2018"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-hartke-t2trg-ciri-00"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-hartke-t2trg-ciri-00.txt"/>
      </reference>

      &RFC2119;
      &RFC3629;
      &RFC3986;
      &RFC3987;
      &RFC4648;
      &RFC5234;
      &RFC6657;
      &RFC6838;
      &RFC6943;
      &RFC7049;
      &RFC8174;
      &RFC8288;

      &I-D.ietf-cbor-cddl;

      <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
        <front>
          <title>The Unicode Standard</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date/>
        </front>
        <annotation>
          Note that this reference is to the latest version of Unicode, rather
          than to a specific release. It is not expected that future changes in
          the Unicode specification will have any impact on this document.
        </annotation>
      </reference>

      <reference anchor="UNICODE-UAX15" target="http://unicode.org/reports/tr15/">
        <front>
          <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date/>
        </front>
      </reference>

      <reference anchor="UNICODE-UAX31" target="http://unicode.org/reports/tr31/">
        <front>
          <title>Unicode Standard Annex #31: Unicode Identifier and Pattern Syntax</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date/>
        </front>
      </reference>

      <reference anchor="UNICODE-UAX36" target="http://unicode.org/reports/tr36/">
        <front>
          <title>Unicode Standard Annex #36: Unicode Security Considerations</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date/>
        </front>
      </reference>

    </references>

    <references title="Informative References">

      &RFC5789;
      &RFC6573;
      &RFC6690;
      &RFC6903;
      &RFC6906;
      &RFC7228;
      &RFC7230;
      &RFC7231;
      &RFC7252;
      &RFC7320;
      &RFC8132;
      &RFC8446;

      &I-D.ietf-core-links-json;

      &W3C.REC-html52-20171214;
      &W3C.REC-rdf11-concepts-20140225;
      &W3C.REC-turtle-20140225;
      &W3C.REC-webarch-20041215;

      <!--
      <reference anchor="COOLURI" target="http://www.w3.org/Provider/Style/URI.html">
        <front>
          <title>Cool URIs don't change</title>
          <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee"/>
          <date year="1998"/>
        </front>
      </reference>
      -->

      <reference anchor="FOAF" target="http://xmlns.com/foaf/spec/20140114.html">
        <front>
          <title>FOAF Vocabulary Specification 0.99</title>
          <author initials="D." surname="Brickley" fullname="Dan Brickley"/>
          <author initials="L." surname="Miller" fullname="Libby Miller"/>
          <date month="January" day="14" year="2014"/>
        </front>
      </reference>

    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Core Vocabulary" anchor="core-vocabulary">

      <t>
        This section defines the core vocabulary for CoRAL. It is RECOMMENDED
        that all CoRAL registries assign an unsigned integer to each of these
        link relation types, form relation types, and form field names.
      </t>

      <t>
        [[NOTE TO RFC EDITOR: Please replace all occurrences of "urn:TBD" in
        this document with an IETF-controlled IRI, such as "urn:ietf:..." or
        "http://...ietf.org/...".]]
      </t>

      <section title="Link Relation Types">

        <t>
          <list style="hanging">
            <t hangText="&lt;http://www.iana.org/assignments/relation/type&gt;">
              <vspace/>Indicates that the link's context is an instance of the
              type specified as the link's target; see Section 6 of <xref
              target="RFC6903">RFC 6903</xref>.
            </t>
            <t>
              This link relation type serves in CoRAL the same purpose as the
              RDF predicate identified by the IRI
              &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;.
            </t>
            <t hangText="&lt;http://www.iana.org/assignments/relation/item&gt;">
              <vspace/>Indicates that the link's context is a collection and
              that the link's target is a member of that collection; see Section
              2.1 of <xref target="RFC6573">RFC 6573</xref>.
            </t>
            <t hangText="&lt;http://www.iana.org/assignments/relation/collection&gt;">
              <vspace/>Indicates that the link's target is a collection and that
              the link's context is a member of that collection; see Section 2.2
              of <xref target="RFC6573">RFC 6573</xref>.
            </t>
          </list>
        </t>

      </section>

      <section title="Form Relation Types">

        <t>
          <list style="hanging">
            <t hangText="&lt;urn:TBD#create&gt;">
              <vspace/>Indicates that the form's context is a collection and
              that a new item can be created in that collection by submitting a
              suitable representation. This form relation type is typically used
              with the POST method <xref target="RFC7231"/> <xref
              target="RFC7252"/>.
            </t>
            <t hangText="&lt;urn:TBD#update&gt;">
              <vspace/>Indicates that the form's context can be updated by
              submitting a suitable representation. This form relation type is
              typically used with the PUT method <xref target="RFC7231"/> <xref
              target="RFC7252"/>, PATCH method <xref target="RFC5789"/> <xref
              target="RFC8132"/>, or iPATCH method <xref target="RFC8132"/>.
            </t>
            <t hangText="&lt;urn:TBD#delete&gt;">
              <vspace/>Indicates that the form's context can be deleted. This
              form relation type is typically used with the DELETE method <xref
              target="RFC7231"/> <xref target="RFC7252"/>.
            </t>
            <t hangText="&lt;urn:TBD#search&gt;">
              <vspace/>Indicates that the form's context can be searched by
              submitting a search query. This form relation type is typically
              used with the POST method <xref target="RFC7231"/> <xref
              target="RFC7252"/> or FETCH method <xref target="RFC8132"/>.
            </t>
            <!--
            <t hangText="&lt;urn:TBD#link&gt;">
              <vspace/>Indicates that the form's context can be associated with
              other resources by submitting one or more links. This form
              relation type is typically used with the PATCH method <xref
              target="RFC5789"/> <xref target="RFC8132"/>, or iPATCH method
              <xref target="RFC8132"/>.
            </t>
            <t hangText="&lt;urn:TBD#unlink&gt;">
              <vspace/>Indicates that the form's context can be disassociated
              from other resources by submitting one or more links. This form
              relation type is typically used with the PATCH method <xref
              target="RFC5789"/> <xref target="RFC8132"/>, or iPATCH method
              <xref target="RFC8132"/>.
            </t>
            -->
          </list>
        </t>

      </section>

      <section title="Form Field Names">

        <t>
          <list style="hanging">
            <t hangText="&lt;urn:TBD#accept&gt;">
              <vspace/>Specifies an acceptable HTTP content type or CoAP content
              format for the request payload. There MAY be multiple form fields
              with this name. If a form does not include a form field with this
              name, the server accepts any or no request payload, depending on
              the form relation type.
            </t>
            <t>
              For HTTP, the content type MUST be specified as a text string in
              the format defined in Section 3.1.1.1 of <xref
              target="RFC7231">RFC 7231</xref>; the set of possible values is
              maintained in the IANA Media Types Registry. For CoAP, the content
              format MUST be specified as an unsigned integer; the set of
              possible values is maintained in the IANA CoAP Content-Formats
              Registry.
            </t>
          </list>
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Default Profile" anchor="default-profile">

      <t>
        This section defines a default registry that is assumed when a CoRAL
        media type without a "profile" parameter is used.
        <list>
          <t>0 = &lt;http://www.iana.org/assignments/relation/type&gt;</t>
          <t>1 = &lt;http://www.iana.org/assignments/relation/item&gt;</t>
          <t>2 = &lt;http://www.iana.org/assignments/relation/collection&gt;</t>
          <t>3 = &lt;urn:TBD#create&gt;</t>
          <t>4 = &lt;urn:TBD#update&gt;</t>
          <t>5 = &lt;urn:TBD#delete&gt;</t>
          <t>6 = &lt;urn:TBD#search&gt;</t>
          <t>7 = &lt;urn:TBD#accept&gt;</t>
        </list>
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <!--
    <section title="Acknowledgements" numbered="no">
    </section>
    -->

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
