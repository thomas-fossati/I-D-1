<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "reference.RFC.2119.xml">
  <!ENTITY RFC3986 SYSTEM "reference.RFC.3986.xml">
  <!ENTITY RFC5226 SYSTEM "reference.RFC.5226.xml">
  <!ENTITY RFC5988 SYSTEM "reference.RFC.5988.xml">
  <!ENTITY RFC6690 SYSTEM "reference.RFC.6690.xml">
  <!ENTITY RFC7049 SYSTEM "reference.RFC.7049.xml">
  <!ENTITY RFC7228 SYSTEM "reference.RFC.7228.xml">
  <!ENTITY RFC7252 SYSTEM "reference.RFC.7252.xml">
  <!ENTITY I-D.greevenbosch-appsawg-cbor-cddl SYSTEM "reference.I-D.greevenbosch-appsawg-cbor-cddl.xml">
  <!ENTITY I-D.hartke-core-apps SYSTEM "reference.I-D.hartke-core-apps.xml">
  <!ENTITY I-D.hartke-core-lighting SYSTEM "reference.I-D.hartke-core-lighting.xml">
  <!ENTITY I-D.ietf-core-interfaces SYSTEM "reference.I-D.ietf-core-interfaces.xml">
  <!ENTITY I-D.ietf-core-links-json SYSTEM "reference.I-D.ietf-core-links-json.xml">
  <!ENTITY I-D.kelly-json-hal SYSTEM "reference.I-D.kelly-json-hal.xml">
  <!ENTITY W3C.REC-webarch-20041215 SYSTEM "reference.W3C.REC-webarch-20041215.xml">
  <!ENTITY SELF "[RFCXXXX]">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>

<rfc category="exp" docName="draft-hartke-t2trg-coral-01" ipr="trust200902">

  <front>

    <title abbrev="CoRAL">The Constrained RESTful Application Language (CoRAL)</title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63905</phone>
        <email>hartke@tzi.org</email>
      </address>
    </author>

    <date />

    <workgroup>Thing-to-Thing Research Group</workgroup>

    <abstract>

      <t>
        The Constrained RESTful Application Language (CoRAL) is a compact,
        binary representation format for building RESTful, hypermedia-driven
        applications that run in constrained environments.
      </t>

    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Introduction">

      <t>
        Constrained RESTful Environments (CoRE) realize the
        <xref target="W3C.REC-webarch-20041215">Web architecture</xref>
        in a suitable form for
        <xref target="RFC7228">constrained nodes and networks</xref>.
      </t>

      <t>
        In the Web, hypertext documents contain links and forms that allow a
        user to navigate between resources and submit information to a server
        for processing.  By annotating these elements with machine-readable
        <xref target="RFC5988">link relation types</xref> and form relation
        types, it is possible to extend this interaction model to
        machine-to-machine communication.
      </t>

      <t>
        This document describes the Constrained RESTful Application Language
        (CoRAL), a compact serialization format for Web links and forms that is
        based on the <xref target="RFC7049">Concise Binary Object Representation
        (CBOR)</xref> and aligns closely with the
        <xref target="RFC7252">Constrained Application Protocol (CoAP)</xref>.
      </t>

      <section title="Terminology">

        <t>
          Readers are expected to be familiar with the terms and
          concepts described in <xref target="RFC5988"/> and
          <xref target="I-D.hartke-core-apps"/>.
        </t>

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
          RECOMMENDED", "MAY", and "OPTIONAL" in this document are
          to be interpreted as described in <xref target="RFC2119"/>.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Model">

      <t>
        CoRAL is designed for building hypermedia-driven Web applications in
        which CoRAL clients navigate between resources by following links and
        submitting forms.
      </t>

      <t>
        Each CoRAL client maintains a "browsing context", an environment in
        which resource representations are processed by the machine. (In the
        Web of humans, the browsing context typically corresponds to a tab or
        window in a Web browser.) A browsing context has a session history,
        which lists the resources that that browsing context has visited, is
        visiting, or will visit. At any time, one resource in a browsing context
        is designated the "current" resource. Following a link or submitting a
        form causes the browsing context to navigate to a new resource.
      </t>
      
      <t>
        A link indicates a relationship between two resources, the link context
        and the link target, and affords the navigation between these two. The
        semantics of the relationship are identified by a link relation type,
        which in CoRAL may be IANA-registered or application-specific. To
        minimize round-trips, a link in CoRAL may optionally embed a (complete
        or partial) representation of the link target. Furthermore, the link
        target may be an anonymous resource; in this case, the link turns into
        a "literal" which consists only of a link relation type and a
        representation.
      </t>

      <t>
        A form similarly indicates a relationship between two resources, the
        form context and the form target, and affords the interaction with the
        context through the submission of the form to the target. In many cases
        the target of a form is the same resource as the context, but this is
        not required. The semantics of a form are identified by a form relation
        type, which again in CoRAL may be IANA-registered or
        application-specific. The submission of a form typically requires the
        client to construct a payload that is included with the request. For
        this purpose, a form indicates the acceptable content formats for the
        payload and may optionally embed a detailed description of the expected
        data, for example, in the form of a list of form fields. (The syntax for
        such a description is outside this document's scope.)
      </t>

      <t>
        The CoRAL interaction model is as follows:
        <list style="numbers">
          <t>
            The first step for a client is to decide what to do next, i.e.,
            which type of link to follow or form to submit, based on the link
            relation types and form relation types it understands.
          </t>
          <t>
            The client finds the link(s) or form(s) with the given relation type
            in the current resource. This may yield one or more candidates from
            which the client must select the most appropriate one. The set of
            candidates may be empty if the transition is not allowed, for
            example, when the client is unauthorized. The format of links and
            forms in CoRAL is specified in <xref target="format"/>.
          </t>
          <t>
            The client selects one of the candidates based on the metadata
            associated with the link or form. Metadata may include the content
            format of the target resource representation, the URI scheme, the
            request method and other attributes that describe the target. This
            metadata is encoded in CoRAL as CoAP-style options, which are
            specified in <xref target="options"/>.
          </t>
          <t>
            The client resolves the URI reference in the link or form to its
            absolute form in order to obtain the "request URI". CoRAL encodes
            URI references like CoAP as a sequence of options, which simplifies
            working with URIs. The process of reference resolution is specified
            in <xref target="resolution"/>.
          </t>
          <t>
            The client constructs a request with the request URI. If the client
            follows a link, the request method is GET; if the client submits a
            form, the request method is indicated by an option. The client
            should set request parameters according to the link/form attributes,
            for example, set the CoAP Accept option when the content format of
            the target resource is indicated. In case of a form, the client also
            needs to construct a payload that matches the specifications of the
            form.
          </t>
          <t>
            Finally, the client sends the request and retrieves the response.
            The client processes the enclosed representation, updates the
            browsing context to the new resource, and again can decide what to
            do next.
          </t>
        </list>
      </t>

      <t>
        A client may implement further ways to navigate the browsing context,
        for example, by traversing the browsing context's session history.
        A session history consists of a flat list of session
        history entries. Each session history entry consists of a URI and may
        have other information associated with it. Session history entries are
        added to the session history as the client navigates from resource to
        resource. A client can traverse the session history to any entry by
        navigating the browsing context to the resource for that entry.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Format" anchor="format">

      <t>
        CoRAL can be used as a standalone representation format or embedded in
        representations of other formats. As a standalone format, CoRAL
        representations have the media type "application/coral" or a derived
        media type with the suffix "+coral". The format is in all cases the
        same.
      </t>

      <t>
        A CoRAL document consists of a sequence of links, forms, literals
        and bases, which are collectively called elements. Elements consist of
        a number indicating the element type, a "href type" that indicates how
        CoRAL-encoded URI references are to be interpreted in reference
        resolution, a sequence of zero or more options and, optionally, a body.
      </t>

      <t>
        Link, form and literal elements come in two flavors: a "fat" format that
        includes all the items listed above, and a "tiny" format. The tiny
        formats provide a concise way to express elements that match a certain
        pattern. Base elements are always in the "fat" format; they encode a
        base URI for reference resolution and apply to all following elements
        until the next base element is encountered.
      </t>

      <t>
        In the Web, link relation types are identified by strings, such as
        "stylesheet", "terms-of-service" or "item". In order to minimize the
        overhead of using these relation types in constrained environments,
        <xref target="I-D.hartke-core-apps"/> extends the link relation types
        registry with a numeric identifier for each link relation type. CoRAL
        uses these numeric identifiers instead of the link relation type name.
        The same principle is applied to form relation types, request methods,
        and media types.
      </t>

      <t>
        Using the notation of
        <xref target="I-D.greevenbosch-appsawg-cbor-cddl"/>,
        the CoRAL data format can be expressed as follows:
      </t>

      <figure>
        <artwork type="cddl">
<![CDATA[   document      = [*element]
   element       = tiny-link / tiny-literal / tiny-form
                 / fat-link  / fat-literal  / fat-form
                 / base

   tiny-link     = [1, href-type, relation]
   tiny-literal  = [2, href-type, relation, format, body]
   tiny-form     = [3, href-type, relation, accept]
   base          = [4, href-type, options]
   fat-link      = [5, href-type, options, ?body]
   fat-literal   = [6, href-type, options, ?body]
   fat-form      = [7, href-type, options, ?body]

   href-type     = &(append-relation: 0,
                     absolute-path: 1,
                     append-path: 2,
                     relative-path: 3)

   relation      = int
   format        = int
   accept        = int
   options       = [*(option-number, option-value)]
   option-number = uint
   option-value  = uint / int / text / bytes
   body          = bytes]]>
        </artwork>
      </figure>

      <t>
        The options are an array that contains a sequence of pairs where each
        pair consists of a CoRAL option number and an option value. The pairs
        MUST be sorted such that the option numbers are in ascending order.
      </t>

      <t>
        The tiny formats expand as follows:
      </t>

      <figure>
        <artwork align="center">
<![CDATA[[1, H, R]        ->  [5, H, [1, R]]
[2, H, R, F, B]  ->  [6, H, [1, R, 6, F], B]
[3, H, R, A]     ->  [7, H, [1, R, 4, A]]]]>
        </artwork>
      </figure>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Options" anchor="options">

      <t>
        <xref target="table-options"/> summarizes the CoRAL options defined in
        this document. The options are explained in the following subsections.
      </t>

      <texttable title="Options" anchor="table-options">
        <ttcol align="right">No.</ttcol>
        <ttcol>R</ttcol>
        <ttcol>Name</ttcol>
        <ttcol>Format</ttcol>
        <ttcol>Length</ttcol>
        <ttcol>Default</ttcol>

        <c>1</c>   <c>x</c>  <c>Relation</c>        <c>int</c>     <c></c>       <c>(none)</c>
        <c>2</c>   <c></c>   <c>Method</c>          <c>uint</c>    <c></c>       <c>2 (POST)</c>
        <c>3</c>   <c>x</c>  <c>Accept</c>          <c>int</c>     <c></c>       <c>(none)</c>
        <c>4</c>   <c>x</c>  <c>Format</c>          <c>int</c>     <c></c>       <c>(none)</c>
        <c>5</c>   <c></c>   <c>Href.Scheme</c>     <c>text</c>    <c>1-255</c>  <c>(none)</c>
        <c>6</c>   <c></c>   <c>Href.Host.Name</c>  <c>text</c>    <c>1-255</c>  <c>(none)</c>
        <c>7</c>   <c></c>   <c>Href.Host.IPv4</c>  <c>bytes</c>   <c>4</c>      <c>(none)</c>
        <c>8</c>   <c></c>   <c>Href.Host.IPv6</c>  <c>bytes</c>   <c>16</c>     <c>(none)</c>
        <c>9</c>   <c></c>   <c>Href.Port</c>       <c>uint</c>    <c></c>       <c>(see below)</c>
        <c>10</c>  <c>x</c>  <c>Href.Path</c>       <c>text</c>    <c>0-255</c>  <c>(none)</c>
        <c>11</c>  <c>x</c>  <c>Href.Query</c>      <c>text</c>    <c>0-255</c>  <c>(none)</c>
        <c>12</c>  <c></c>   <c>Href.Fragment</c>   <c>text</c>    <c>0-255</c>  <c>(none)</c>
        <c>13</c>  <c></c>   <c>Title</c>           <c>text</c>    <c>0-255</c>  <c>(none)</c>
        <c>14</c>  <c></c>   <c>Updatable</c>       <c>bool</c>    <c></c>       <c>false</c>
        <c>15</c>  <c></c>   <c>Deletable</c>       <c>bool</c>    <c></c>       <c>false</c>
      </texttable>

      <t>
        The option properties are defined as follows:
        <list style="hanging">
          <t hangText="Number:">
            An option is identified by an option number.
          </t>
          <t hangText="Repeatable (R):">
            An option that is repeatable MAY be included one or more times in an
            element. An option that is not repeatable MUST NOT be included more
            than once. If a client encounters an option with more occurrences
            than the option is defined for, each supernumerary option occurrence
            MUST be ignored.
          </t>
          <t hangText="Format:">
            Option values are defined to have a certain format. In the same
            manner as the types defined in Section 3.2 of
            <xref target="RFC7252"/>, "string" stands for a text string;
            "opaque" for a byte string, and "uint" for an unsigned integer.
          </t>
          <t hangText="Length:">
            Option values are defined to have a specific length, often in the
            form of an upper and lower bound. For unsigned integer options the
            length is counted as the number of bytes that would be needed to
            represent the unsigned integer as a binary number. The length of an
            option value MUST NOT be outside the defined range. If a client
            encounters an option with a length outside the defined range, that
            option MUST be ignored.
          </t>
          <t hangText="Default Value:">
            Options may be defined to have a default value.  If the value of an
            option is intended to be this default value, the option SHOULD NOT
            be included in the element. If the option is not present, the
            default value MUST be assumed.
          </t>
        </list>
      </t>

      <section title="Accept">

        <t>
          The Accept Option indicates the acceptable content formats for the
          representation included in a form submission.
        </t>

        <t>
          The option value of an Accept Option is either one of the content
          format IDs defined in the CoAP Content-Formats registry (&gt;= 0) or
          one of the content format IDs defined by the media type of the CoRAL
          document (&lt; 0).
        </t>

        <t>
          If a form does not include an Accept Option, the service accepts any
          content format.
        </t>

      </section>

      <section title="Deletable">

        <t>
          The Deletable Option, when present in a link, defines a form that
          can be used to delete the target resource.  The submission method is
          DELETE and no representation is included in the request.
        </t>

      </section>

      <section title="Format">

        <t>
          The Format Option, when present in a link or a form, provides a hint
          indicating what the content format of the payload of the CoAP response
          should be when following the link or submitting the form. Note that
          this is only a hint; it does not override the Content-Format Option
          included in the CoAP response.
        </t>

        <t>
          The Format Option is REQUIRED if a link embeds a representation in the
          link body. The Format Option is also REQUIRED in a literal. In both
          cases the first occurence of the option indicates the content format
          of the embedded representation.
        </t>

        <t>
          The option value of a Format Option is either one of the content
          format IDs defined in the CoAP Content-Formats registry (&gt;= 0) or
          one of the content format IDs defined by the media type of the CoRAL
          document (&lt; 0).
        </t>

      </section>

      <section title="Href.*">

        <t>
          The Href.Scheme, Href.Host.Name, Href.Host.IPv4, Href.IPv6,
          Href.Port, Href.Path, Href.Query and Href.Fragment Options are used
          to specify the target resource URI of a link or form and the base URI
          of a literal. They hold the following values:
          <list style="symbols">
            <t>
              the Href.Scheme Option specifies the URI scheme name,
            </t>
            <t>
              the Href.Host.Name Option specifies the host as a registered name
              <xref target="RFC3986"/>,
            </t>
            <t>
              the Href.Host.IPv4 Option specifies the host as a 32-bit IPv4
              address,
            </t>
            <t>
              the Href.Host.IPv6 Option specifies the host as a 128-bit IPv6
              address,
            </t>
            <t>
              the Href.Port Option specifies the port number,
            </t>
            <t>
              each Href.Path Option specifies one segment of the path,
            </t>
            <t>
              each Href.Query Option specifies one argument of the query, and
            </t>
            <t>
              the Href.Fragment Option specifies the fragment identifier.
            </t>
          </list>
        </t>

        <t>
          The Href.Host.Name, Href.Host.IPv4 and Href.Host.IPv6 options are
          mutually exclusive.
        </t>

        <t>
          The default value of the Href.Port Option is the default port for the
          URI scheme.
        </t>

        <t>
          <xref target="table-href"/> lists the permitted Href.* options by Href
          Type. A 'yes' indicates that an option of this type MAY be present; a
          'no' indicates that an option of this type MUST NOT be present. The
          resolution of Href.* options against a base URI is specified in
          <xref target="resolution"/>.
        </t>

        <texttable title="Permitted Href.* Options by Href Type" anchor="table-href">
          <ttcol align="left"></ttcol>
          <ttcol align="center">absolute- path</ttcol>
          <ttcol align="center">relative- path</ttcol>
          <ttcol align="center">append- path</ttcol>
          <ttcol align="center">append- relation</ttcol>

          <c>Href.Scheme</c>    <c>yes</c> <c>no</c>  <c>no</c>  <c>no</c>
          <c>Href.Host.Name</c> <c>yes</c> <c>no</c>  <c>no</c>  <c>no</c>
          <c>Href.Host.IPv4</c> <c>yes</c> <c>no</c>  <c>no</c>  <c>no</c>
          <c>Href.Host.IPv6</c> <c>yes</c> <c>no</c>  <c>no</c>  <c>no</c>
          <c>Href.Port</c>      <c>yes</c> <c>no</c>  <c>no</c>  <c>no</c>
          <c>Href.Path</c>      <c>yes</c> <c>yes</c> <c>yes</c> <c>no</c>
          <c>Href.Query</c>     <c>yes</c> <c>yes</c> <c>yes</c> <c>no</c>
          <c>Href.Fragment</c>  <c>yes</c> <c>yes</c> <c>yes</c> <c>no</c>
        </texttable>

      </section>

      <section title="Method">

        <t>
          The Method Option indicates the CoAP method to use for form
          submission. The option value is one of the CoAP method codes defined
          in the CoAP Method Codes registry.
        </t>

      </section>

      <section title="Relation">

        <t>
          The Relation Option indicate the link relation type of a link or
          literal and the form relation type of a form. At least one Relation
          Option is REQUIRED.
        </t>

        <t>
          The option value of a Relation Option is either one of the relation
          type IDs defined in the Link Relation Types registry (&gt;= 0) or
          one of the relation type IDs defined by the media type of the CoRAL
          document (&lt; 0).
        </t>

      </section>

      <section title="Title">

        <t>
          The Title Option, when present, is used to label the target of a link
          such that it can be used as a human-readable identifier (e.g., a menu
          entry).
        </t>

      </section>

      <section title="Updatable">

        <t>
          The Updatable Option, when present in a link, defines a form that
          can be used to update the target resource.  The context and target
          resource of that form is the target resource of the link, the
          submission method is PUT and the content format of the submitted
          representation is defined by the Format Option of the link.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Reference Resolution" anchor="resolution">

      <t>
        This section defines the process of resolving a URI reference within a
        link, literal or form to an absolute URI suitable for inclusion in a
        CoAP request.
      </t>

      <section title="Establish a Base URI">

        <t>
          URI references may be relative and thus are only usable when a base
          URI is known. This means that a base URI must be established before
          the use of all URI references that might be relative.
        </t>

        <t>
          The base URI of a reference in a link, literal or form is established
          as specified in Section 5.1 of <xref target="RFC3986"/>. CoRAL
          supports a "Base URI Embedded in Content" in the form of base
          elements. A base element applies to all subsequent elements in a
          document until the next base element is encountered. The URI reference
          in a base element itself is resolved relative to the base URI of next
          lower precedence.
        </t>

      </section>

      <section title="Transform References">

        <t>
          The following pseudocode describes an algorithm for transforming a
          URI reference R into its target URI T using the base URI B, the Href
          Type H, and the Link or Form Relation Type S. The URI reference
          and base URI are assumed to be pre-parsed into a sequence of Href.*
          options; the result is returned as a sequence of Href.* options as
          well.
        </t>

        <figure>
          <artwork>
<![CDATA[   if (R starts with Href.Scheme) then
      T = R

   elif (R starts with Href.Host.*) then
      T = [ (k, v) | (k, v) <- B, k == Href.Scheme ] ++
          [ (k, v) | (k, v) <- R, k >  Href.Scheme ]

   elif (R starts with Href.Port) then
      T = [ (k, v) | (k, v) <- B, k <  Href.Port ] ++
          [ (k, v) | (k, v) <- R, k >= Href.Port ]

   elif (H is append-relation) then
      T = [ (k, v) | (k, v) <- B, k <= Href.Path ] ++
          [ (Href.Path, (hex S)) ]

   elif (H is append-path) then
      T = [ (k, v) | (k, v) <- B, k <= Href.Path ] ++
          [ (k, v) | (k, v) <- R, k >= Href.Path ]

   elif (H is relative-path) then
      T = [ (k, v) | (k, v) <- B, k <  Href.Path ] ++
    (init [ (k, v) | (k, v) <- B, k == Href.Path ]) ++
          [ (k, v) | (k, v) <- R, k >= Href.Path ]

   elif (H is absolute-path) then
      T = [ (k, v) | (k, v) <- B, k <  Href.Path ] ++
          [ (k, v) | (k, v) <- R, k >= Href.Path ]

   endif]]>
          </artwork>
        </figure>

        <t>
          The "init" function returns all the elements of the input list except
          the last one. For example, (init [1, 2, 3]) returns [1, 2] and
          (init []) returns [].
        </t>

        <t>
          The "hex" function returns a hexadecimal representation of the input
          number. For example, (hex 421) returns "1A5" and (hex 0) returns "0".
        </t>

      </section>

      <section title="Remove Dot Segments">

        <t>
          After transforming a the URI reference into its target URI, the
          special path segments "." and ".." need to be removed. Although there
          are many ways to accomplish this removal process, we describe a simple
          method using two string buffers.
          <list style="numbers">
            <t>
              The input buffer is initialized with the sequence of path segments
              and the output buffer is initialized to the empty sequence.
            </t>
            <t>
              While the input buffer is not empty, loop as follows:
              <list style="symbols">
                <t>
                  If the input buffer begins with ".", then remove this segment
                  from the input buffer; otherwise,
                </t>
                <t>
                  if the input buffer begins with "..", then remove this segment
                  from the input buffer and and remove the last segment (if any)
                  from the output buffer; otherwise,
                </t>
                <t>
                  move the first path segment in the input buffer to the end of
                  the output buffer.
                </t>
              </list>
            </t>
            <t>
              Finally, the sequence of path segments in the target URI is
              replaced by the sequence of path segments in the output buffer.
            </t>
          </list>
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Security Considerations" anchor="security">

      <t>
        TODO.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="IANA Considerations">

      <section title="CoRAL Option Number Registry">

        <t>
          This document establishes the CoRAL Option Number registry for the
          option numbers used in CoRAL. The registry is located within the
          CoRE Parameters registry.
        </t>

        <section title="Registering New Option Numbers">

          <t>
            Option numbers are registered on the advice of a Designated Expert
            (appointed by the IESG or their delegate), with a Specification
            Required (using terminology from <xref target="RFC5226"/>).
          </t>

          <t>
            Registration requests consist of the completed registration template
            below, typically published in an RFC. However, to allow for the
            allocation of values prior to publication, the Designated Expert may
            approve registration once they are satisfied that a specification
            will be published.
          </t>

          <t>The registration template is:
            <list style="symbols">
              <t>Option Number:</t>
              <t>Option Name:</t>
              <t>Reference:</t>
            </list>
          </t>

        </section>

        <section title="Initial Registry Contents">

          <t>The CoRAL Option Number registry's initial contents are:
            <list style="symbols">
              <t>
                Option Number: 1<vspace />
                Option Name: Relation<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 2<vspace />
                Option Name: Method<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 3<vspace />
                Option Name: Accept<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 4<vspace />
                Option Name: Format<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 5<vspace />
                Option Name: Href.Scheme<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 6<vspace />
                Option Name: Href.Host.Name<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 7<vspace />
                Option Name: Href.Host.IPv4<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 8<vspace />
                Option Name: Href.Host.IPv6<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 9<vspace />
                Option Name: Href.Port<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 10<vspace />
                Option Name: Href.Path<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 11<vspace />
                Option Name: Href.Query<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 12<vspace />
                Option Name: Href.Fragment<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 13<vspace />
                Option Name: Title<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 14<vspace />
                Option Name: Updatable<vspace />
                Reference: &SELF;
              </t>
              <t>
                Option Number: 15<vspace />
                Option Name: Deletable<vspace />
                Reference: &SELF;
              </t>
            </list>
          </t>

        </section>

      </section>

      <section anchor="media-type" title="Media Type">

        <t>
          This document registers the media type "application/coral" in the
          "Media Types" registry.
          <list style="hanging">
            <t hangText="Type name:">
              <vspace/>application
            </t>
            <t hangText="Subtype name:">
              <vspace/>coral
            </t>
            <t hangText="Required parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Optional parameters:">
              <vspace/>N/A
            </t>
            <t hangText="Encoding considerations:">
              <vspace/>CoRAL is a binary encoding.
            </t>
            <t hangText="Security considerations:">
              <vspace/>See <xref target="security"/> of &SELF;.
            </t>
            <t hangText="Interoperability considerations:">
              <vspace/>There are no known interoperability issues.
            </t>
            <t hangText="Published specification:">
              <vspace/>&SELF;
            </t>
            <t hangText="Applications that use this media type:">
              <vspace/>Hypermedia-driven Web applications that run in
              constrained nodes and networks.
            </t>
            <t hangText="Fragment identifier considerations:">
              <vspace/>N/A
            </t>
            <t hangText="Additional information:">
              <list style="hanging">
                <t hangText="Deprecated alias names for this type:">N/A</t>
                <t hangText="Magic number(s):">N/A</t>
                <t hangText="File extension(s):">.coral</t>
                <t hangText="Macintosh file type code(s):">N/A</t>
              </list>
            </t>
            <t hangText="Person &amp; email address to contact for further information:">
              <vspace/>See "Author's Address" section of &SELF;.
            </t>
            <t hangText="Intended usage:">
              <vspace/>COMMON
            </t>
            <t hangText="Restrictions on usage:">
              <vspace/>N/A
            </t>
            <t hangText="Author:">
              <vspace/>See "Author's Address" section of &SELF;.
            </t>
            <t hangText="Change controller:">
              <vspace/>IESG
            </t>
          </list>
        </t>

      </section>

      <section title="Structured Syntax Suffix">

        <t>
          This document registers the suffix "+coral" in the
          "Structured Syntax Suffix" registry.
          <list style="hanging">
            <t hangText="Name:">
              <vspace/>Constrained RESTful Application Language (CoRAL)
            </t>
            <t hangText="+suffix:">
              <vspace/>+coral
            </t>
            <t hangText="References:">
              <vspace/>&SELF;
            </t>
            <t hangText="Encoding considerations:">
              <vspace/>CoRAL is a binary format.
            </t>
            <t hangText="Interoperability considerations:">
              <vspace/>There are no known interoperability issues.
            </t>
            <t hangText="Fragment identifier considerations:">
              <vspace/>The syntax and semantics of fragment identifiers
              specified for +coral are as specified for "application/coral".
              (At publication of this document, there is no fragment
              identification syntax defined for "application/coral".)
            </t>
            <t hangText="Security considerations:">
              <vspace/>See <xref target="security"/> of &SELF;.
            </t>
            <t hangText="Contact:">
              <vspace/>See "Author's Address" section of &SELF;.
            </t>
            <t hangText="Author/Change controller:">
              <vspace/>IESG
            </t>
          </list>
        </t>

      </section>

      <section anchor="coap-content-format" title="CoAP Content-Format">

        <t>
          This document registers a content format for the
          "application/coral" media type in the "CoAP Content-Formats"
          registry.
          <list style="symbols">
            <t>
              Media Type: application/coral<vspace/>
              Encoding: -<vspace/>
              ID: 70<vspace/>
              Reference: &SELF;
            </t>
          </list>
        </t>

      </section>
      
    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">

      &RFC2119;
      &RFC3986;
      &RFC5226;
      &RFC5988;
      &RFC7049;
      &RFC7252;

    </references>

    <references title="Informative References">

      &RFC6690;
      &RFC7228;
      &I-D.greevenbosch-appsawg-cbor-cddl;
      &I-D.hartke-core-apps;
      &I-D.hartke-core-lighting;
      &I-D.ietf-core-interfaces;
      &I-D.ietf-core-links-json;
      &I-D.kelly-json-hal;
      &W3C.REC-webarch-20041215;

    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Examples">

      <section title="CoRE Lighting">

        <t>
          <xref target="I-D.hartke-core-lighting">CoRE Lighting</xref> defines
          a benchmark scenario for the exploration of hypermedia-oriented design
          in constrained, RESTful environments. The bulletin board example in
          Section 5.2.1 of <xref target="I-D.hartke-core-lighting"/> can be
          encoded in CoRAL as follows:
        </t>

        <figure>
          <artwork>
<![CDATA[  [[7, 3, [1, 1, 4, 65200, 13, "bulletins"]],
   [5, 1, [1, 33, 6, 65200, 9, "light-bulb.example"], <<1>>],
   [5, 1, [1, 33, 6, 65200, 9, "remote-control.example"], <<2>>]]]]>
          </artwork>
        </figure>

        <t>
          where &lt;&lt;1&gt;&gt; is a byte string that encodes the following
          CoRAL structure:
        </t>

        <figure>
          <artwork>
<![CDATA[  [[5, 3, [2, 100, 6, 65202, 13, "config"]],
   [2, 3, 101, 0, "Light 2"],
   [2, 3, 102, 0, "Illuminates the couch."],
   [2, 3, 103, 0, "Living Room"]]]]>
          </artwork>
        </figure>

        <t>
          and &lt;&lt;2&gt;&gt; is a byte string that encodes the following
          CoRAL structure:
        </t>

        <figure>
          <artwork>
<![CDATA[  [[5, 3, [1, 1, 6, 65203, 13, "state"]],
   [2, 3, 101, 0, "LRC 1"],
   [2, 3, 102, 0, "Controls Light 2."],
   [2, 3, 103, 0, "Living Room"]]]]>
          </artwork>
        </figure>

        <t>
          <xref target="table-lighting-comparison"/> shows a comparison of
          sizes of the example encoded in CoRAL and JSON.
        </t>

        <texttable align="center" anchor="table-lighting-comparison" title="Size Comparison">
          <ttcol>Format</ttcol>
          <ttcol>Size</ttcol>
          
          <c>JSON</c>                   <c>515 bytes</c>
          <c>CoRAL</c>                  <c>245 bytes</c>
        </texttable>

      </section>

      <section title="CoRE Link Format">

        <t>
          The example in this section is based on an example on page 14 of
          <xref target="RFC6690"/>:
        </t>

        <figure>
          <artwork>
<![CDATA[   </sensors>;ct=40;title="Sensor Index",
   </sensors/temp>;rt="temperature-c";if="sensor",
   </sensors/light>;rt="light-lux";if="sensor",
   <http://www.example.com/sensors/t123>;anchor="/sensors/temp"
   ;rel="describedby",
   </t>;anchor="/sensors/temp";rel="alternate"]]>
          </artwork>
        </figure>

        <t>
          The example can be encoded in CoRAL as follows (using CBOR diagnostic
          notation):
        </t>

        <figure>
          <artwork>
<![CDATA[  [[4, 1, [13, "sensors"]],
   [5, 2, [6, 40, 16, "Sensor Index"]],
   [5, 2, [13, "temp", 19, "temperature-c", 20, "sensor"]],
   [5, 2, [13, "light", 19, "light-lux", 20, "sensor"]],
   [5, 1, [1, 18, 8, "http", 9, "www.example.com", 
           13, "sensors", 13, "t123", 21, "/sensors/temp"]],
   [5, 1, [1, 2, 13, "t", 21, "/sensors/temp"]]]]]>
          </artwork>
        </figure>

        <t>
          <xref target="table-link-comparison"/> shows a comparison of
          sizes of the example encoded in CoRAL and a number of Link Format
          variants.
        </t>

        <texttable align="center" anchor="table-link-comparison" title="Size Comparison">
          <ttcol>Format</ttcol>
          <ttcol>Size</ttcol>
          
          <c>Link Format</c>            <c>251 bytes</c>
          <c>Link Format (JSON)</c>     <c>320 bytes</c>
          <c>Link Format (CBOR)</c>     <c>203 bytes</c>
          <c>CoRAL</c>                  <c>181 bytes</c>
        </texttable>

      </section>

      <section title="CoRE Interfaces">

        <t>
          The example in this section is based on an example on page 10 of
          <xref target="I-D.ietf-core-interfaces"/>:
        </t>

        <figure>
          <artwork>
<![CDATA[   </s/>;rt="simple.sen";if="core.b",
   </s/lt>;rt="simple.sen.lt";if="core.s",
   </s/tmp>;rt="simple.sen.tmp";if="core.s";obs,
   </s/hum>;rt="simple.sen.hum";if="core.s",
   </a/>;rt="simple.act";if="core.b",
   </a/1/led>;rt="simple.act.led";if="core.a",
   </a/2/led>;rt="simple.act.led";if="core.a",
   </d/>;rt="simple.dev";if="core.ll",
   </l/>;if="core.lb"]]>
          </artwork>
        </figure>

        <t>
          The example can be encoded in CoRAL as follows (using CBOR diagnostic
          notation):
        </t>

        <figure>
          <artwork>
<![CDATA[  [[5, 1, [13, "d", 13, "", 19, "simple.dev", 20, "core.ll"]],
   [5, 1, [13, "l", 13, "", 20, "core.lb"]],
   [4, 1, [20, "core.b"]],
   [5, 2, [13, "s", 13, "", 19, "simple.sen"]],
   [5, 2, [13, "a", 13, "", 19, "simple.act"]],
   [4, 1, [13, "s", 20, "core.s"]],
   [5, 2, [13, "lt", 19, "simple.sen.lt"]],
   [5, 2, [13, "tmp", 19, "simple.sen.tmp", 22, true]],
   [5, 2, [13, "hum", 19, "simple.sen.hum"]],
   [4, 1, [13, "a", 19, "simple.act.led", 20, "core.a"]],
   [5, 2, [13, "1", 13, "led"]],
   [5, 2, [13, "2", 13, "led"]]]]]>
          </artwork>
        </figure>

        <t>
          <xref target="table-interfaces-comparison"/> shows a comparison of
          sizes of the example encoded in CoRAL and a number of Link Format
          variants.
        </t>

        <texttable align="center" anchor="table-interfaces-comparison" title="Size Comparison">
          <ttcol>Format</ttcol>
          <ttcol>Size</ttcol>

          <c>Link Format</c>            <c>332 bytes</c>
          <c>Link Format (JSON)</c>     <c>456 bytes</c>
          <c>Link Format (CBOR)</c>     <c>264 bytes</c>
          <c>CoRAL</c>                  <c>248 bytes</c>
        </texttable>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Acknowledgements" numbered="no">

      <t>
        This specification is heavily inspired by the
        <xref target="I-D.kelly-json-hal">JSON Hypertext Application Language
        (HAL)</xref>; the author of and contributors to that specification are
        acknowledged for their great work.
      </t>

      <t>
        Yassin Nasir Hassan suggested placing the hypermedia controls for
        modifying a link target in the link context rather than in the
        representation of the link target.
      </t>

      <t>
        Thanks to
        Carsten Bormann and
        Matthias Kovatsch
        for helpful comments and discussions that have shaped the
        document.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
