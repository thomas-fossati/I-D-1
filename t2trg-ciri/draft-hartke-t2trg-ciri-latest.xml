<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC3986 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.3986.xml">
  <!ENTITY RFC3987 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.3987.xml">
  <!ENTITY RFC5890 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.5890.xml">
  <!ENTITY RFC5952 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.5952.xml">
  <!ENTITY RFC7049 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7049.xml">
  <!ENTITY RFC7228 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7228.xml">
  <!ENTITY RFC7230 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7230.xml">
  <!ENTITY RFC7252 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.7252.xml">
  <!ENTITY RFC8174 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.8174.xml">
  <!ENTITY RFC8288 SYSTEM "http://www.rfc-editor.org/refs/bibxml/reference.RFC.8288.xml">
  <!ENTITY I-D.ietf-cbor-cddl SYSTEM "http://www.rfc-editor.org/refs/bibxml3/reference.I-D.ietf-cbor-cddl.xml">
  <!ENTITY W3C.REC-html52-20171214 SYSTEM "http://www.rfc-editor.org/refs/bibxml4/reference.W3C.REC-html52-20171214.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>

<rfc category="exp" docName="draft-hartke-t2trg-ciri-01" ipr="trust200902">

  <front>

    <title abbrev="Constrained IRIs">
      Constrained Internationalized Resource Identifiers
    </title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>Torshamnsgatan 23</street>
          <city>Stockholm</city>
          <code>SE-16483</code>
          <country>Sweden</country>
        </postal>
        <email>klaus.hartke@ericsson.com</email>
      </address>
    </author>

    <date/>

    <workgroup>Thing-to-Thing Research Group</workgroup>

    <abstract>

      <t>
        Constrained Internationalized Resource Identifiers are an alternate
        serialization of Internationalized Resource Identifiers (IRIs) that encodes the IRI
        components in Concise Binary Object Representation (CBOR) rather than as
        a string of characters. This simplifies parsing, reference resolution,
        and comparison of IRIs in environments with severe limitations on
        processing power, code size, and memory size.
      </t>

    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Introduction" anchor="introduction">

      <t>
        <xref target="RFC3986">URI</xref> and (less prevalently) <xref
        target="RFC3987">IRI</xref> references are the standard way to link to
        resources in hypertext formats like <xref
        target="W3C.REC-html52-20171214">HTML</xref> and the <xref
        target="RFC8288">HTTP "Link" header field</xref>. These formats
        reference resources either through a URI/IRI or through a relative
        reference that must be resolved against a base URI/IRI to yield a
        URI/IRI.
      </t>

      <t>
        URI and IRI references are strings of characters, which are chosen from
        the repertoires of US-ASCII and Unicode characters respectively. The
        individual components of a URI or IRI reference are delimited by a
        is to be interpreted. The resolution of URI/IRI references involves
        number of reserved characters, which necessitates the use of
        percent-encoding when these reserved characters are used in a
        non-delimiting function. The path component of an IRI can also contain
        special dot-segments that affect how the component
        is to be interpreted. The resolution of URI references involves
        parsing the character string into its components, combining those
        components with the components of a base URI/IRI, merging path components,
        removing dot-segments, and recomposing the result back into a character
        string.
      </t>

      <t>
        Overall, the proper handling of URIs is quite complex. This can be a
        problem particularly in <xref target="RFC7228">constrained
        environments</xref>, where devices often have severe code size
        limitations. As a result, many implementations in these environments
        choose to support only an ad-hoc, informally-specified, bug-ridden,
        non-interoperable subset of half of the URI standard.
      </t>

      <t>
        IRI references that encodes the IRI components in <xref
        This document specifies Constrained IRI References, an alternate serialization of
        target="RFC7049">Concise Binary Object Representation (CBOR)</xref>
        rather than a string of characters. Assuming an implementation of CBOR
        is already present on a device, typical operations on URI
        references such as parsing, reference resolution, and comparison can
        be implemented more easily than for character strings. A full
        implementation that covers all corner cases can be implemented in a
        relatively small amount of code.
      </t>

      <t>
        As a result of the simplification, Constrained IRI References are not
        capable of expressing all IRI references permitted by the syntax of RFC
        3987. (Hence the "constrained" in "Constrained IRI References".) The
        supported subset includes all <xref target="RFC7252">Constrained
        Application Protocol (CoAP) URIs</xref>, most <xref target="RFC7230">
        Hypertext Transfer Protocol (HTTP) URIs</xref>, and many other URIs and
        IRIs that function as resource locators.
      </t>

      <section title="Notational Conventions">

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          <xref target="RFC2119">BCP 14</xref> <xref target="RFC8174"/> when,
          and only when, they appear in all capitals, as shown here.
        </t>

        <t>
          Terms defined in this document appear in <spanx>cursive</spanx>
          where they are introduced.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Data Model">

      <t>
        components of an IRI reference are encoded as a sequence of
        The data model for Constrained IRI References is very similar to the <xref
        target="RFC7252">serialization of the Request URI in CoAP messages</xref>: The
        <spanx>options</spanx>, where each path segment and query parameter
        becomes its own option. Every option consists of an <spanx>option
        number</spanx> identifying the type of option (scheme, host name, path
        segment, etc.) and an <spanx>option value</spanx>.
      </t>

      <section title="Options">

        <t>
          The following types of options are defined:
          <list style="hanging">
            <t hangText="scheme">
              <vspace/>Specifies the IRI scheme.
              The option value can be any Unicode string matching the "scheme"
              rule described in <xref target="RFC3987">Section 2.2 of RFC
              3987</xref>.
            </t>
            <t hangText="host.name">
              <vspace/>Specifies the host of the IRI authority as a registered
              name.
              The option value can be any Unicode string matching the
              specifications of the IRI scheme. For example, if the scheme
              refers to CoAP or HTTP, then the option value is typically a DNS name.
            </t>
            <t hangText="host.ip">
              <vspace/>Specifies the host of the IRI authority as an IPv4
              address or an IPv6 address.
              The option value is a byte string with a length of 4 bytes or 16 bytes,
              respectively.
            </t>
            <t hangText="port">
              <vspace/>Specifies the port number of the IRI authority.
              The option value is an integer in the range 0 to 65535.
            </t>
            <t hangText="path.type">
              <vspace/>Specifies the type of the IRI path for reference
              resolution.
              The option value is an integer in the range 0 to 127,
              named as follows:
              <list>
                <t>
                  0 - absolute-path     <vspace/>
                  1 - append-relation   <vspace/>
                  2 - append-path       <vspace/>
                  3 - relative-path     <vspace/>
                  4 - relative-path-1up <vspace/>
                  5 - relative-path-2up <vspace/>
                  6 - relative-path-3up <vspace/>
                  7 - relative-path-4up <vspace/>
                  ...
                </t>
              </list>
            </t>
            <t hangText="path">
              <vspace/>Specifies one segment of the IRI path.
              The option value can be any Unicode string with the exception of the strings "." and "..".
              This option can occur more than once.
            </t>
            <t hangText="query">
              <vspace/>Specifies one argument of the IRI query.
              The option value can be any Unicode string.
              This option can occur more than once.
            </t>
            <t hangText="fragment">
              <vspace/>Specifies the fragment identifier.
              The option value can be any Unicode string.
            </t>
          </list>
          No percent-encoding is performed in option values.
        </t>

      </section>

      <section title="Option Sequences">

<figure title="Structure of a Well-Formed Sequence of Options" anchor="wellformed"><artwork align="center"><![CDATA[
               _ host.name _
____ scheme __/             \___ port _
 \ \________/ \__ host.ip __/ /        \
  \__________________________/ ________/
   \                          / ________    _________
    \                        / /        \  /         \
     \__________ path.type __\_\_ path _/__\_ query _/__ fragment __
               \___________/   \________/  \_________/ \__________/
]]></artwork></figure>

        <t>
          A sequence of options is considered <spanx>well-formed</spanx> if:
          <list style="symbols">
            <t>
              the sequence of options is either empty or starts with a "scheme",
              "host.name", "host.ip", "port", "path.type", "path", "query",
              or "fragment" option;
            </t>
            <t>
              any "scheme" option is followed either by a "host.name" or a
              "host.ip" option;
            </t>
            <t>
              any "host.name" option is followed by a "port" option;
            </t>
            <t>
              any "host.ip" option is followed by a "port" option;
            </t>
            <t>
              any "port" option either is followed by a "path", "query", or "fragment"
              option or is at the end of the sequence;
            </t>
            <t>
              any "path.type" option either is followed by a "path", "query", or
              "fragment" option or is at the end of the sequence;
            </t>
            <t>
              any "path" option either is followed by a "path", "query", or "fragment"
              option or is at the end of the sequence;
            </t>
            <t>
              any "query" option either is followed by a "query" or "fragment" option or
              is at the end of the sequence; and
            </t>
            <t>
              any "fragment" option is at the end of the sequence.
            </t>
          </list>
        </t>

        <t>
          A well-formed sequence of options is considered
          <spanx>absolute</spanx> if the sequence of options starts with a
          "scheme" option.
        </t>

        <t>
          A well-formed sequence of options is considered
          <spanx>relative</spanx> if the sequence of options is empty or starts
          with an option other than a "scheme" option.
        </t>

        <t>
          An absolute sequence of options is considered
          <spanx>normalized</spanx> if the result of resolving the sequence of
          options against any base is equal to the input. (It
          doesn't matter what base it is resolved against, since it is already
          absolute.)
        </t>

        <t>
          The following operations can be performed on a sequence of options:
          <list style="hanging">
            <t hangText="resolve(href, base)">
              <vspace/>Resolves a well-formed sequence of options `href` against
              an absolute sequence of options `base`. This operation MUST be
              performed by applying any algorithm that is functionally
              equivalent to the reference implementation in <xref
              target="py-resolve"/> of this document.
            </t>
            <t hangText="relative(href, base)">
              <vspace/>Makes an absolute sequence of options `href` relative to
              an absolute sequence of options `base`. This operation MUST be
              performed by applying any algorithm that returns a sequence of
              options such that `resolve(relative(h, b), b)` is equal to `h`
              given the same `b`.
            </t>
            <t hangText="recompose(href)">
              <vspace/>Recomposes an IRI reference string from an absolute
              sequence of options `href`. This operation MUST be performed by
              applying any algorithm that is functionally equivalent to the
              reference implementation in <xref target="py-recompose"/> of this
              document.
              <vspace blankLines="1"/>
              To reduce variability, it is RECOMMENDED to uppercase the letters
              in the hexadecimal notation when percent-encoding octets <xref
              target="RFC3986"/> and to follow the recommendations of Section 4
              of RFC 5952 for the <xref target="RFC5952">text representation of
              IPv6 addresses</xref>.
            </t>
            <t hangText="decompose(iriref)">
              <vspace/>Decomposes a IRI reference string `iriref` into a sequence of
              options. This operation MUST be performed by applying any
              algorithm that returns a sequence of options such that
              `recompose(decompose(x))` is equivalent to `x`.
            </t>
            <t hangText="coap(href)">
              <vspace/>Constructs CoAP options from an absolute, normalized
              sequence of options. This operation MUST be performed by
              recomposing the sequence of options to an IRI reference string as
              described above, mapping the IRI to a URI as specified in Section
              3.1 of RFC 3987, and decomposing the URI into CoAP options as
              specified in Section 6.4 of RFC 7252. A concise implementation is
              illustrated in <xref target="py-coap"/> of this document.
            </t>
          </list>
        </t>

      </section>

    </section>

    <section title="CBOR">

      <t>
        A sequence of options is represented in <xref target="RFC7049">Concise
        Binary Object Representation (CBOR)</xref> as an array
        that contains option numbers and option values in alternating order.
      </t>
        
      <t>
        The
        structure can be described in the <xref target="I-D.ietf-cbor-cddl">Concise
        Data Definition Language (CDDL)</xref> as follows:
      </t>

<figure><artwork><![CDATA[
   ciri = [?(scheme:    1, text .regexp "[A-Za-z][A-Za-z0-9+.-]*"),
           ?(host.name: 2, text //
             host.ip:   3, bytes .size 4 / bytes .size 16),
           ?(port:      4, 0..65535),
           ?(path.type: 5, 0..127),
           *(path:      6, text),
           *(query:     7, text),
           ?(fragment:  8, text)]
]]></artwork></figure>

      <t>
        Example:
        <list>
          <t>[1, "coap", 3, h'20010DB8000000000000000000000001', 4, 5683, 6, ".well-known", 6, "core"]</t>
          <t>[5, 0, 6, ".well-known", 6, "core", 7, "rt=temperature-c"]</t>
        </list>
      </t>

    </section>

    <section title="Python">

      <t>
        A sequence of options is represented in the following Python 3.6 code as
        a list of tuples, where each tuple consists of an option number and an
        option value.
      </t>

<figure><artwork><![CDATA[
<CODE BEGINS>

   import enum

   class Option(enum.IntEnum):
     _BEGIN = 0
     SCHEME = 1
     HOST_NAME = 2
     HOST_IP = 3
     PORT = 4
     PATH_TYPE = 5
     PATH = 6
     QUERY = 7
     FRAGMENT = 8
     _END = 9

   class PathType(enum.IntEnum):
     ABSOLUTE_PATH = 0
     APPEND_RELATION = 1
     APPEND_PATH = 2
     RELATIVE_PATH = 3
     RELATIVE_PATH_1UP = 4
     RELATIVE_PATH_2UP = 5
     RELATIVE_PATH_3UP = 6
     RELATIVE_PATH_4UP = 7

<CODE ENDS>
]]></artwork></figure>

      <t>
        Examples:
        <list>
          <t>
            [(Option.SCHEME, "coap"),
             (Option.HOST_IP, b"\x20\x01\x0D\xB8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"),
             (Option.PORT, 5683),
             (Option.PATH, ".well-known"),
             (Option.PATH, "core")]
          </t>
          <t>
            [(Option.PATH_TYPE, PathType.ABSOLUTE_PATH),
             (Option.PATH, ".well-known"),
             (Option.PATH, "core"),
             (Option.QUERY, "rt=temperature-c")]
          </t>
        </list>
      </t>

      <section title="Property Checks" anchor="py-check">

        <t>
          The following Python 3.6 code illustrates how to check a sequence of
          options for being well-formed, absolute, and relative.
        </t>

<figure><artwork><![CDATA[
<CODE BEGINS>

   _TRANSITIONS = ([Option.SCHEME, Option.HOST_NAME, Option.HOST_IP,
       Option.PORT, Option.PATH_TYPE, Option.PATH, Option.QUERY,
       Option.FRAGMENT, Option._END],
     [Option.HOST_NAME, Option.HOST_IP],
     [Option.PORT],
     [Option.PORT],
     [Option.PATH, Option.QUERY, Option.FRAGMENT, Option._END],
     [Option.PATH, Option.QUERY, Option.FRAGMENT, Option._END],
     [Option.PATH, Option.QUERY, Option.FRAGMENT, Option._END],
     [Option.QUERY, Option.FRAGMENT, Option._END],
     [Option._END])

   def is_well_formed(href):
     previous = Option._BEGIN
     for option, _ in href:
       if option not in _TRANSITIONS[previous]:
         return False
       previous = option
     if Option._END not in _TRANSITIONS[previous]:
       return False
     return True

   def is_absolute(href):
     return is_well_formed(href) and \
       (len(href) != 0 and href[0][0] == Option.SCHEME)

   def is_relative(href):
     return is_well_formed(href) and \
       (len(href) == 0 or href[0][0] != Option.SCHEME)

<CODE ENDS>
]]></artwork></figure>

      </section>

      <section title="Reference Resolution" anchor="py-resolve">

        <t>
          The following Python 3.6 code defines how to resolve a sequence of
          options that might be relative to a given base.
        </t>

<figure><artwork><![CDATA[
<CODE BEGINS>

   def resolve(base, href, relation=0):
     if not is_absolute(base) or not is_well_formed(href):
       return None
     result = []
     option = Option.FRAGMENT
     if len(href) != 0:
       option = href[0][0]
     if option == Option.HOST_IP:
       option = Option.HOST_NAME
     elif option == Option.PATH_TYPE:
       type = href[0][1]
       href = href[1:]
     elif option == Option.PATH:
       type = PathType.RELATIVE_PATH
       option = Option.PATH_TYPE
     if option != Option.PATH_TYPE or type == PathType.ABSOLUTE_PATH:
       _copy_until(base, result, option)
     else:
       _copy_until(base, result, Option.QUERY)
       if type == PathType.APPEND_RELATION:
         _append_and_normalize(result, Option.PATH, str(relation))
       while type > PathType.APPEND_PATH:
         if len(result) == 0 or result[-1][0] != Option.PATH:
           break
         del result[-1]
         type -= 1
     _copy_until(href, result, Option._END)
     _append_and_normalize(result, Option._END, None)
     return result

   def _copy_until(input, output, end):
     for option, value in input:
       if option >= end:
         break
       _append_and_normalize(output, option, value)

   def _append_and_normalize(output, option, value):
     if option > Option.PATH:
       if len(output) >= 2 and \
           output[-1] == (Option.PATH, '') and (
           output[-2][0] < Option.PATH_TYPE or (
           output[-2][0] == Option.PATH_TYPE and
           output[-2][1] == PathType.ABSOLUTE_PATH)):
         del output[-1]
       if option > Option.FRAGMENT:
         return
     output.append((option, value))

<CODE ENDS>
]]></artwork></figure>

      </section>

      <section title="IRI Recomposition" anchor="py-recompose">

        <t>
          The following Python 3.6 code defines how to recompose an IRI from an absolute
          sequence of options.
        </t>

<figure><artwork><![CDATA[
<CODE BEGINS>

   def recompose(href):
     if not is_absolute(href):
       return None
     result = ''
     no_path = True
     first_query = True
     for option, value in href:
       if option == Option.SCHEME:
         result += value + ':'
       elif option == Option.HOST_NAME:
         result += '//' + _encode_ireg_name(value)
       elif option == Option.HOST_IP:
         result += '//' + _encode_ip_address(value)
       elif option == Option.PORT:
         result += ':' + _encode_port(value)
       elif option == Option.PATH:
         result += '/' + _encode_path_segment(value)
         no_path = False
       elif option == Option.QUERY:
         if no_path:
           result += '/'
           no_path = False
         result += '?' if first_query else '&'
         result += _encode_query_argument(value)
         first_query = False
       elif option == Option.FRAGMENT:
         if no_path:
           result += '/'
           no_path = False
         result += '#' + _encode_fragment(value)
     if no_path:
       result += '/'
       no_path = False
     return result

   def _encode_ireg_name(s):
     return ''.join(c if _is_ireg_name_char(c)
                      else _encode_pct(c) for c in s)

   def _encode_ip_address(b):
     if len(b) == 4:
       return '.'.join(str(c) for c in b)
     elif len(b) == 16:
       return '[' + ... + ']'  # see RFC 5952

   def _encode_port(p):
      return str(p)

   def _encode_path_segment(s):
     return ''.join(c if _is_isegment_char(c)
                      else _encode_pct(c) for c in s)

   def _encode_query_argument(s):
     return ''.join(c if _is_iquery_char(c) and c != '&'
                      else _encode_pct(c) for c in s)

   def _encode_fragment(s):
     return ''.join(c if _is_ifragment_char(c)
                      else _encode_pct(c) for c in s)

   def _encode_pct(s):
     return ''.join('%{0:0>2X}'.format(c) for c in s.encode('utf-8'))

   def _is_ireg_name_char(c):
     return _is_iunreserved(c) or _is_sub_delim(c)

   def _is_isegment_char(c):
     return _is_ipchar(c)

   def _is_iquery_char(c):
     return _is_ipchar(c) or _is_iprivate(c) or c == '/' or c == '?'

   def _is_ifragment_char(c):
     return _is_ipchar(c) or c == '/' or c == '?'

   def _is_ipchar(c):
     return _is_iunreserved(c) or _is_sub_delim(c) or \
            c == ':' or c == '@'

   def _is_iunreserved(c):
     return _is_alpha(c) or _is_digit(c) or \
            c == '-' or c == '.' or c == '_' or c == '~' or \
            _is_ucschar(c)

   def _is_alpha(c):
     return c >= 'A' and c <= 'Z' or c >= 'a' and c <= 'z'

   def _is_digit(c):
     return c >= '0' and c <= '9'

   def _is_sub_delim(c):
     return c == '!' or c == '$' or c == '&' or c == '\'' or \
            c == '(' or c == ')' or c == '*' or c == '+' or \
            c == ',' or c == ';' or c == '='

   def _is_ucschar(c):
     return c >= '\U000000A0' and c <= '\U0000D7FF' or \
            c >= '\U0000F900' and c <= '\U0000FDCF' or \
            c >= '\U0000FDF0' and c <= '\U0000FFEF' or \
            c >= '\U00010000' and c <= '\U0001FFFD' or \
            c >= '\U00020000' and c <= '\U0002FFFD' or \
            c >= '\U00030000' and c <= '\U0003FFFD' or \
            c >= '\U00040000' and c <= '\U0004FFFD' or \
            c >= '\U00050000' and c <= '\U0005FFFD' or \
            c >= '\U00060000' and c <= '\U0006FFFD' or \
            c >= '\U00070000' and c <= '\U0007FFFD' or \
            c >= '\U00080000' and c <= '\U0008FFFD' or \
            c >= '\U00090000' and c <= '\U0009FFFD' or \
            c >= '\U000A0000' and c <= '\U000AFFFD' or \
            c >= '\U000B0000' and c <= '\U000BFFFD' or \
            c >= '\U000C0000' and c <= '\U000CFFFD' or \
            c >= '\U000D0000' and c <= '\U000DFFFD' or \
            c >= '\U000E1000' and c <= '\U000EFFFD'

   def _is_iprivate(c):
     return c >= '\U0000E000' and c <= '\U0000F8FF' or \
            c >= '\U000F0000' and c <= '\U000FFFFD' or \
            c >= '\U00100000' and c <= '\U0010FFFD'

<CODE ENDS>
]]></artwork></figure>

      </section>

      <section title="CoAP Encoding" anchor="py-coap">

        <t>
          The following Python 3.6 code illustrates how to construct CoAP options from
          an absolute sequence of options. For simplicity, the code does not
          omit CoAP options that have their default value.
        </t>

<figure><artwork><![CDATA[
<CODE BEGINS>

   def coap(href, to_proxy=False):
     if not is_absolute(href):
       return None
     result = b''
     previous = 0
     for option, value in href:
       if option == Option.SCHEME:
         pass
       elif option == Option.HOST_NAME:
         opt = 3  # Uri-Host
         val = value.encode('utf-8')
         result += _encode_coap_option(opt - previous, val)
         previous = opt
       elif option == Option.HOST_IP:
         opt = 3  # Uri-Host
         if len(value) == 4:
           val = '.'.join(str(c) for c in value).encode('utf-8')
         elif len(value) == 16:
           val = b'[' + ... + b']'  # see RFC 5952
         result += _encode_coap_option(opt - previous, val)
         previous = opt
       elif option == Option.PORT:
         opt = 7  # Uri-Port
         val = value.to_bytes((value.bit_length() + 7) // 8, 'big')
         result += _encode_coap_option(opt - previous, val)
         previous = opt
       elif option == Option.PATH:
         opt = 11  # Uri-Path
         val = value.encode('utf-8')
         result += _encode_coap_option(opt - previous, val)
         previous = opt
       elif option == Option.QUERY:
         opt = 15  # Uri-Query
         val = value.encode('utf-8')
         result += _encode_coap_option(opt - previous, val)
         previous = opt
       elif option == Option.FRAGMENT:
         pass
     if to_proxy:
       (option, value) = href[0]
       opt = 39  # Proxy-Scheme
       val = value.encode('utf-8')
       result += _encode_coap_option(opt - previous, val)
       previous = opt
     return result

   def _encode_coap_option(delta, value):
     length = len(value)
     delta_nibble = _encode_coap_option_nibble(delta)
     length_nibble = _encode_coap_option_nibble(length)
     result = bytes([delta_nibble << 4 | length_nibble])
     if delta_nibble == 13:
       delta -= 13
       result += bytes([delta])
     elif delta_nibble == 14:
       delta -= 256 + 13
       result += bytes([delta >> 8, delta & 255])
     if length_nibble == 13:
       length -= 13
       result += bytes([length])
     elif length_nibble == 14:
       length -= 256 + 13
       result += bytes([length >> 8, length & 255])
     result += value
     return result

   def _encode_coap_option_nibble(n):
     if n < 13:
       return n
     elif n < 256 + 13:
       return 13
     elif n < 65536 + 256 + 13:
       return 14

<CODE ENDS>
]]></artwork></figure>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Security Considerations" anchor="security">

      <t>
        Parsers must operate on input that is
        assumed to be untrusted. This means that parsers MUST fail gracefully in
        the face of malicious inputs. Additionally, parsers MUST be prepared to
        deal with resource exhaustion (e.g., resulting from the allocation of
        big data items) or exhaustion of the call stack (stack overflow). See
        Section 8 of <xref target="RFC7049">RFC 7049</xref> for security
        considerations relating to parsing CBOR.
      </t>

      <t>
        The security considerations discussed in <xref target="RFC3986">Section
        7 of RFC 3986</xref> and <xref target="RFC3987">Section 8 of RFC
        3987</xref> also apply to Constrained IRI References.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="IANA Considerations">

      <t>
        This document has no IANA actions.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">

      &RFC2119;
      &RFC3986;
      &RFC3987;
      &RFC7049;
      &RFC8174;

      &I-D.ietf-cbor-cddl;

    </references>

    <references title="Informative References">

      &RFC5890;
      &RFC5952;
      &RFC7228;
      &RFC7230;
      &RFC7252;
      &RFC8288;

      &W3C.REC-html52-20171214;

    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Acknowledgements" numbered="no">

      <!-- sorted by last name -->
      <t>
        Thanks to
        Christian Amsuess and
        Ari Keranen
        for helpful comments and discussions that have shaped the
        document.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
